-- MySQL dump 10.13  Distrib 5.5.44, for debian-linux-gnu (x86_64)
--
-- Host: localhost    Database: app
-- ------------------------------------------------------
-- Server version	5.5.44-0ubuntu0.14.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `charity_events`
--

DROP TABLE IF EXISTS `charity_events`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `charity_events` (
  `id` int(2) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) NOT NULL,
  `description` text NOT NULL,
  `image` varchar(255) NOT NULL,
  `website` varchar(255) NOT NULL,
  `phone` varchar(15) NOT NULL,
  `venue_id` int(2) NOT NULL,
  `notes` text NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `charity_events`
--

LOCK TABLES `charity_events` WRITE;
/*!40000 ALTER TABLE `charity_events` DISABLE KEYS */;
INSERT INTO `charity_events` VALUES (1,'Patriot Day Golf Tournament','On September 11, 2015 the 4th annual Patriot Day Golf Classic and Celebration will take place at the prestigious Bayou Golf Club in Largo Florida','/images/4course.jpg','http://www.patriotdaycharities.org','727-482-7943',1,'• 11 AM Registration • NOON shotgun start • 5 PM auction and celebration');
/*!40000 ALTER TABLE `charity_events` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `charity_players`
--

DROP TABLE IF EXISTS `charity_players`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `charity_players` (
  `id` int(2) unsigned NOT NULL AUTO_INCREMENT,
  `name_or_group` text NOT NULL,
  `name` varchar(255) NOT NULL,
  `email` varchar(255) NOT NULL,
  `hncp` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `charity_players`
--

LOCK TABLES `charity_players` WRITE;
/*!40000 ALTER TABLE `charity_players` DISABLE KEYS */;
INSERT INTO `charity_players` VALUES (1,'chuck brown','chuck brown','chuckrbrown@gmail.com','10'),(2,'test','Bob Brick','bob.brick@brickhouse.com','43'),(3,'test','Joe Brick','joe.brick@brickhouse.com','23'),(4,'test','Lolly Gag','lolly.gag@hotmail.com','54'),(5,'test','Fred Mason','fred.mason@jojosgarage.com','12');
/*!40000 ALTER TABLE `charity_players` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `charity_sponsors`
--

DROP TABLE IF EXISTS `charity_sponsors`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `charity_sponsors` (
  `id` int(2) unsigned NOT NULL AUTO_INCREMENT,
  `username` varchar(200) NOT NULL,
  `ticket_id` int(2) NOT NULL,
  `name_or_group` text NOT NULL,
  `logo` varchar(255) DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `url` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `charity_sponsors`
--

LOCK TABLES `charity_sponsors` WRITE;
/*!40000 ALTER TABLE `charity_sponsors` DISABLE KEYS */;
INSERT INTO `charity_sponsors` VALUES (1,'chuckrbrown@gmail.com',1,'chuck brown',NULL,NULL,NULL),(2,'bciv',2,'test',NULL,NULL,NULL);
/*!40000 ALTER TABLE `charity_sponsors` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `charity_tickets`
--

DROP TABLE IF EXISTS `charity_tickets`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `charity_tickets` (
  `id` int(2) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) NOT NULL,
  `description` text NOT NULL,
  `image` varchar(255) NOT NULL,
  `event_id` int(2) NOT NULL,
  `venue_id` int(2) NOT NULL,
  `participants` tinyint(1) NOT NULL,
  `price` decimal(5,0) NOT NULL,
  `checkout` text NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `charity_tickets`
--

LOCK TABLES `charity_tickets` WRITE;
/*!40000 ALTER TABLE `charity_tickets` DISABLE KEYS */;
INSERT INTO `charity_tickets` VALUES (1,'Individual','<ul><li>Individual Player / Sponsor</li></ul>','/images/ticket.jpg',1,1,1,150,'<form action=\"https://www.paypal.com/cgi-bin/webscr\" method=\"post\" target=\"_top\">\r\n<input type=\"hidden\" name=\"cmd\" value=\"_s-xclick\">\r\n<input type=\"hidden\" name=\"hosted_button_id\" value=\"FDPYHXUPGXCAE\">\r\n<input type=\"image\" src=\"https://www.paypalobjects.com/en_US/i/btn/btn_buynowCC_LG.gif\" border=\"0\" name=\"submit\" alt=\"PayPal - The safer, easier way to pay online!\">\r\n<img alt=\"\" border=\"0\" src=\"https://www.paypalobjects.com/en_US/i/scr/pixel.gif\" width=\"1\" height=\"1\">\r\n</form>\r\n'),(2,'Patriot Sponsor','<ul><li>Company logo stitched on all participants shirts</li><li>Sponsorship for a Veteran or Active Duty Hero’s play</li><li>One Foursome</li><li>Signage on the course</li><li>Recognition in all promotional releases and at Celebration event</li></ul>','/images/ticket.jpg',1,1,4,2500,'<form action=\"https://www.paypal.com/cgi-bin/webscr\" method=\"post\" target=\"_top\">\r\n<input type=\"hidden\" name=\"cmd\" value=\"_s-xclick\">\r\n<input type=\"hidden\" name=\"hosted_button_id\" value=\"6HUFVSJRFGHNY\">\r\n<input type=\"image\" src=\"https://www.paypalobjects.com/en_US/i/btn/btn_buynowCC_LG.gif\" border=\"0\" name=\"submit\" alt=\"PayPal - The safer, easier way to pay online!\">\r\n<img alt=\"\" border=\"0\" src=\"https://www.paypalobjects.com/en_US/i/scr/pixel.gif\" width=\"1\" height=\"1\">\r\n</form>\r\n'),(3,'Gold Star Sponsor','<ul>           <li>Sponsorship for Veteran or Active Duty Hero’s play</li>           <li>One Foursome</li>           <li>Signage on the course</li>           <li>Recognition in all promotional releases and at Celebration event</li>         </ul>','/images/ticket.jpg',1,1,4,1500,'<form action=\"https://www.paypal.com/cgi-bin/webscr\" method=\"post\" target=\"_top\">\r\n<input type=\"hidden\" name=\"cmd\" value=\"_s-xclick\">\r\n<input type=\"hidden\" name=\"hosted_button_id\" value=\"ZXL4MKTHRF6QG\">\r\n<input type=\"image\" src=\"https://www.paypalobjects.com/en_US/i/btn/btn_buynowCC_LG.gif\" border=\"0\" name=\"submit\" alt=\"PayPal - The safer, easier way to pay online!\">\r\n<img alt=\"\" border=\"0\" src=\"https://www.paypalobjects.com/en_US/i/scr/pixel.gif\" width=\"1\" height=\"1\">\r\n</form>\r\n'),(4,'Silver Star Sponsor','<ul>           <li>One Foursome</li>           <li>Signage on the course</li>           <li>Recognition in all promotional releases and at Celebration event</li>         </ul>','/images/ticket.jpg',1,1,4,1000,'<form action=\"https://www.paypal.com/cgi-bin/webscr\" method=\"post\" target=\"_top\">\r\n<input type=\"hidden\" name=\"cmd\" value=\"_s-xclick\">\r\n<input type=\"hidden\" name=\"hosted_button_id\" value=\"MB6F6LKZQPBN2\">\r\n<input type=\"image\" src=\"https://www.paypalobjects.com/en_US/i/btn/btn_buynowCC_LG.gif\" border=\"0\" name=\"submit\" alt=\"PayPal - The safer, easier way to pay online!\">\r\n<img alt=\"\" border=\"0\" src=\"https://www.paypalobjects.com/en_US/i/scr/pixel.gif\" width=\"1\" height=\"1\">\r\n</form>\r\n'),(5,'Silver Star Sponsor (non golf)','<ul>           <li>Signage on the course</li>           <li>Recognition in all promotional releases and at Celebration event</li>         </ul>','/images/ticket.jpg',1,1,0,500,'<form action=\"https://www.paypal.com/cgi-bin/webscr\" method=\"post\" target=\"_top\">\r\n<input type=\"hidden\" name=\"cmd\" value=\"_s-xclick\">\r\n<input type=\"hidden\" name=\"hosted_button_id\" value=\"BRFEHC759AQV4\">\r\n<input type=\"image\" src=\"https://www.paypalobjects.com/en_US/i/btn/btn_buynowCC_LG.gif\" border=\"0\" name=\"submit\" alt=\"PayPal - The safer, easier way to pay online!\">\r\n<img alt=\"\" border=\"0\" src=\"https://www.paypalobjects.com/en_US/i/scr/pixel.gif\" width=\"1\" height=\"1\">\r\n</form>\r\n');
/*!40000 ALTER TABLE `charity_tickets` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `charity_venues`
--

DROP TABLE IF EXISTS `charity_venues`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `charity_venues` (
  `id` int(2) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) NOT NULL,
  `description` text NOT NULL,
  `image` varchar(255) NOT NULL,
  `website` varchar(255) NOT NULL,
  `phone` varchar(15) NOT NULL,
  `map` text NOT NULL,
  `address_line1` varchar(255) NOT NULL,
  `address_line2` varchar(255) NOT NULL,
  `city` varchar(100) NOT NULL,
  `state` varchar(100) NOT NULL,
  `zipcode` varchar(15) NOT NULL,
  `notes` text NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `charity_venues`
--

LOCK TABLES `charity_venues` WRITE;
/*!40000 ALTER TABLE `charity_venues` DISABLE KEYS */;
INSERT INTO `charity_venues` VALUES (1,'Bayou Golf Club in Largo Florida','Located in the heart of Pinellas County, The Bayou Club is a wonderful, friendly and complete country club experience that recently underwent a $1 million renovation that included the interior redecoration of bar and grille and dining area, the golf shop and locker-rooms, a completely revamped fitness center, a renovated driving range and greens that were returned to their original Fazio design.','','http://bayouclubgolf.com','(727) 399-1000','https://www.google.com/maps/place/Bayou+Club/@27.8615682,-82.7465642,15z/data=!4m2!3m1!1s0x0:0xb5f6027420946ba4','7979 Bayou Club Boulevard','','Largo','FL','33777','');
/*!40000 ALTER TABLE `charity_venues` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `difr_constraints`
--

DROP TABLE IF EXISTS `difr_constraints`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `difr_constraints` (
  `id` smallint(7) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
  `description` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `operator` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `options` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=13 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `difr_constraints`
--

LOCK TABLES `difr_constraints` WRITE;
/*!40000 ALTER TABLE `difr_constraints` DISABLE KEYS */;
INSERT INTO `difr_constraints` VALUES (1,'Equals','Equals \'=\' Operator','=',''),(2,'Less Than','Less Than \'<\' Operator','<',''),(3,'Greater Than','Greater Than \'>\' Operator','>',''),(4,'RegEx','Regular Expression Match','regexp',''),(5,'Like','Like SQL Match','like',''),(6,'Within 30 Days','Selected Date/Time Field will match within 30 days','to_days(now())-335 and to_days([field]) >= to_days(now())-365',''),(7,'Expired Date/Time','Selected Date/Time Field matches or exceded (for expiration)','(to_days([table].[field]) <= to_days(now()))',''),(8,'Date/Time UnSet','Selected Date/Time Field hasn\'t been set (or checked)','[field] = \"0000-00-00\"',''),(9,'Begins With','Selected Field value begins with given value','regex \"^[value]\"',''),(10,'Ends With','Selected Field value ends with given value','regexp \"[value]+$\"',''),(11,'Not Like','Not Like SQL Match','not like',''),(12,'Within 60 days','Expires within 60 days','between date_add(now(), interval 30 day) and date_add(now(), interval 60 day)','');
/*!40000 ALTER TABLE `difr_constraints` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `difr_elements`
--

DROP TABLE IF EXISTS `difr_elements`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `difr_elements` (
  `id` int(7) NOT NULL AUTO_INCREMENT,
  `source_id` smallint(5) NOT NULL,
  `parent_id` smallint(5) DEFAULT NULL,
  `element_name` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
  `logic` int(7) DEFAULT NULL,
  `prettyname` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
  `description` text COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=117 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='defines source elements that difr references';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `difr_elements`
--

LOCK TABLES `difr_elements` WRITE;
/*!40000 ALTER TABLE `difr_elements` DISABLE KEYS */;
INSERT INTO `difr_elements` VALUES (1,1,NULL,'rcs_credentialing',NULL,'Credentialing','This table contains information about employees that require credentialing.'),(2,1,NULL,'rcs_education',NULL,'Education','This tables contains the degrees that are held by employees.'),(3,1,NULL,'rcs_personnel',NULL,'Personnel','This table contains demographic as well as most details about employees.'),(4,1,NULL,'rcs_project_members',NULL,'Project Members','This tables contains project members by user id and the roles that they serve.'),(5,1,NULL,'rcs_scopeofwork',NULL,'Projects','This table contains details about projects.'),(6,1,NULL,'rcs_reports',NULL,'Reports','This tables contains reports and the query details that are generated by this module.'),(7,1,NULL,'rcs_trainingrequired',NULL,'Training Required','This table contains employee training completion dates for courses.'),(8,1,NULL,'rcs_trainingtypes',NULL,'Training Types','This table contains the categories of training that employees may be required to complete based on their duties.'),(9,1,1,'uid',NULL,'User ID','This is the \'User ID\' field for the Credentialing Table.  It can be used to link this table to other tables that also share this common field.'),(10,1,1,'lastcred',NULL,'Date Last Credentialed','This field contains the date that an employee requiring credentialing was last verified.'),(11,1,1,'recur',NULL,'Recurring','This field is set to \'0\' or \'1\' where a \'0\' means that an employee does not require recurring credentialling and \'1\' means that they do. '),(12,1,2,'uid',NULL,'User ID','This is the User ID which can be used to link to other Tables sharing this common field.'),(13,1,2,'degree',NULL,'Degree','This is the name of a degree held by an employee.  There may be several degrees so, there may be several per User ID.'),(14,1,2,'graddate',NULL,'Graduation Date','This is the date of graduation for each instance of an employee degree.'),(15,1,2,'universityaddr',NULL,'University Address','This is the address for each of the degrees held by an employee.'),(16,1,2,'phone',NULL,'University Phone Number','This is the phone number for each record of an employee degree.'),(17,1,2,'firstreq',NULL,'First Request','This is the date of the first request for verification that an employee actually holds the degree listed.'),(18,1,2,'secondreq',NULL,'Second Request','This is the date of the second request for verification that an employee actually holds the degree listed.'),(19,1,2,'verified',NULL,'Verified Date','This is the date that a degree was verified to be valid.'),(20,1,3,'uid',NULL,'User ID','This is the unique User ID associated with each employee used to link tables in a notification or report.'),(21,1,3,'alias',NULL,'Alias','This is the alias or nickname of an employee.  It is not always used so, is probably not useful in a query.'),(22,1,3,'lastname',NULL,'Lastname','This is the lastname of an employee.'),(23,1,3,'firstname',NULL,'Firstname','This is the firstname of an employee.'),(24,1,3,'middle',NULL,'Middlename','This is the middle name of an employee.'),(25,1,3,'suffix',NULL,'Suffix','This is the suffix of an employee which would include Jr, III, IV, etc...'),(26,1,3,'degree',NULL,'Degree','This is a degree string which comprises the information that is often placed before or after an employees name to denote their professional credentials.'),(27,1,3,'ssn',NULL,'Social Security Number','This field contains an employees Social Security Number when given.  When it is not given it is set to \'Unavailable\' so, this may not be a unique field to use in a report and is subject to policies related to Personal Identifiable Information Policies.'),(28,1,3,'jobtitle',NULL,'Job Title','This field contains the job titles of employees.'),(29,1,3,'homeaddress1',NULL,'Home Address Line 1','The first address line of an employees primary residence.'),(30,1,3,'homeaddress2',NULL,'Home Address Line 2','The second address line of an employees primary residence.'),(31,1,3,'homecity',NULL,'Home City','The name of the City of an employees primary residence.'),(32,1,3,'homestate',NULL,'Home State','The abbreviation of the State that an employee resides in (this may be used for country if not residing in US).'),(33,1,3,'homezip',NULL,'Home Postal Code','This is the ZIP Code or Postal Code of an employees resident.'),(34,1,3,'homecell',NULL,'Home Cell Phone','This is the number of an employees personal cell phone.'),(35,1,3,'homephone',NULL,'Home Phone','This is an employees home telephone number.'),(36,1,3,'facilityid',NULL,'Facility ID','This is the alphanumeric code associated with a facility.'),(37,1,3,'mailcode',NULL,'Mail Code','This is the internal mailcode used in routing mail within a facility.'),(38,1,3,'workphone',NULL,'Work Phone','This is the work phone number of an employee.'),(39,1,3,'workext',NULL,'Work Phone Extension Number','This is the extension number which may also be include in an employees work phone number.  This will be blank if a user has a direct number.'),(40,1,3,'pager',NULL,'Pager Number','This is the pager number of an employee.'),(41,1,3,'fax',NULL,'Fax Number','This is the fax number of an employee.'),(42,1,3,'email',NULL,'Email Address','This is the email address of an employee.'),(43,1,3,'status',NULL,'Employee Type','The employee types are VA, WOC, VA WOC, WOC Exempt, or Foundation.'),(44,1,3,'comment',NULL,'Credentialing Comment','This is a comment field used for credentialing information.'),(45,1,3,'human',NULL,'Human Studies','This is set to \'true\' if an employee is involved in Human Studies research.'),(46,1,3,'nonhuman',NULL,'Animal Studies','This is set to \'true\' if an employee is involved in Non-Human or Animal Studies research.'),(47,1,3,'basic',NULL,'Basic Science Studies','This is set to \'true\' if an employee is involved in Basic Science Studies research.'),(48,1,3,'investigator',NULL,'Investigator','This field contains a \'t\' if an employee is an Investigator.'),(49,1,3,'studystaff',NULL,'Study Staff','This field contains a \'t\' if an employee is a member of the Study Staff.'),(50,1,3,'rnd_member',NULL,'R&D Member','This is set to \'t\' if an employee is a Research and Development Team Member.'),(51,1,3,'irb_member',NULL,'IRB Member','This is set to \'t\' if an employee is on the review board for IRB.'),(52,1,3,'other',NULL,'Other Member','This is set to \'t\' if an employee is assigned as a member of a miscellaneous membership group that can be tracked.'),(53,1,3,'office',NULL,'Office Staff','This is set to \'t\' if an employee is a member of the office staff.'),(54,1,3,'safety',NULL,'Safety Staff','This is set to \'t\' if an employee is a safety team member.'),(55,1,3,'nacicleared',NULL,'NACI Cleared','This date contains the date that an employee was cleared for their basic background investigation which is the date their background investigation data was submitted.  It is the date an employee is able to begin working.'),(56,1,3,'saccleared',NULL,'SAC Cleared','This field contains the date that an employee was cleared for a higher level of security clearance.  Only certain positions require this more indepth type of background investigation.'),(57,1,3,'propertyagreement',NULL,'WOC Appointment Letter','This field is relevant only to employees that are of the WOC type.  It can contain: Unsigned, Not Applicable, or Signed.'),(58,1,3,'credcomment',0,'Credentialing Comment','This field contains comments entered that are relevant to credentialling'),(59,1,3,'suspended',NULL,'Suspension Field','This field shows whether an employee has been barred from being involved in research projects.  Values can be:  Active, Suspended, Inactive, as well as Pending.'),(60,1,3,'credreq',NULL,'Credentialing Required','This field shows \'Yes\' or \'No\' depending on whether an employee requires recurring credentialing.'),(61,1,3,'fingerprints',NULL,'Fingerprints','This field shows whether an employees fingerprints have been taken or not which is a requirement of employment.'),(62,1,3,'backgroundcomment',NULL,'Background Comment','This is a field used for commenting on an employees background investigation.'),(63,1,3,'employeeorientation',NULL,'Employee Orientation','This field contains the status of an employee orientation.  Values can be Not Completed, Completed, or Not Applicable.'),(64,1,3,'tbtest',NULL,'TB Test','This field denotes whether an employee has had a TB Test or not.  Values include: Not Completed, Completed, or Declined.'),(65,1,3,'healthsummary',NULL,'Heath Summary','This field contains the status of an employees health summary.  Values are: Not Completed, Completed, or Not Applicable.'),(66,1,3,'wocinit',NULL,'WOC Initial Appointment Date','This field relevant to WOC employees shows their initial appointment date.'),(67,1,3,'wocstart',NULL,'WOC Start Date','This field shows either the initial or subsequent start dates of a WOC appointment.'),(68,1,3,'wocend',NULL,'WOC Appointment End Date','This field relevant to WOC employess shows the end date of a WOC appointment.'),(74,1,4,'scopeid',NULL,'Scope ID','This field is an unique ID for a project.  It can be used to link against the Projects table'),(75,1,4,'uid',NULL,'User ID','This field shows each person assigned to a project.  It can be used to link to other tables that share that common field.'),(76,1,4,'role',NULL,'Role','This field displays the role of a specific person to the role that they perform in a specific project.'),(77,1,4,'comment',NULL,'Comments','This field allows users to add comments to enable them to type in personal tips and general comments.'),(78,1,5,'scopeid',NULL,'Scope ID','This field shows the unique ID number associated with a project.  It can be used to link against the Project Members table'),(79,1,5,'irbnumber',NULL,'IRB Number','This field shows the IRB number associated with a project.'),(80,1,5,'projecttitle',NULL,'Project Title','This field displays the title of a project.'),(81,1,5,'description',NULL,'Description','This field displays the description of a project.'),(82,1,5,'received',NULL,'Received','This field displays the date a project was submitted.'),(83,1,5,'status',NULL,'Status','This field displays the status of a project; i.e. Active, Unactive, Pending, Suspended, etc.'),(84,1,7,'uid',NULL,'User ID','This field displays the User ID associated with an employee taking a particular course.  This can be linked with other tables. '),(85,1,7,'trainingtype',NULL,'Course Name','This field displays the shortened version of a course name.'),(86,1,7,'trainingdate',NULL,'Training Date','This field displays the last date a person has taken a particular course.'),(87,1,8,'name',NULL,'Name of Couse','This field displays the shortened name of a type of training.'),(88,1,8,'descr',NULL,'Description of Course','This field displays a description of a particular course.'),(89,1,8,'duration',NULL,'Duration','This field displays in months the length of time between renewal of course accreditation.  '),(90,1,8,'template',NULL,'Template','This field displays a list of training courses a specific individual is required to complete.  The values could be Other, Human, Animal, and Hospital Mandatory.'),(91,3,NULL,'credentialing',NULL,'Credentialing','This tab displays credentialing notifications.'),(92,3,NULL,'exclusionary',NULL,'Exclusionary','This tab displays anything to to with Exclusionary Lists.'),(93,3,NULL,'wocappointments',NULL,'WOC Appointments','This tab displays various elements related to WOCs.'),(94,3,NULL,'licenses',NULL,'Licenses','This tab displays licenses, whether active or inactive, held by a personnel member.'),(95,3,NULL,'training',NULL,'Training','This tab displays the training completed by a personnel member as well as when said training will expire by months.'),(96,2,NULL,'sources',NULL,'Sources','Sources are internal or external Databases, Lists, XML, RSS, network based messages, or any other information structures used as an input to DIFR.'),(97,2,NULL,'elements',NULL,'Elements','Elements are fields, relations, variables, settings, or any other type of sub-object of a source.'),(98,2,NULL,'engines',NULL,'Engines','Engines are Drivers, Transform Code, Daemons, Services, or any other type of structure that runs as a process to perform a process of some kind.'),(99,2,NULL,'logic',NULL,'Logic','Logic consists of binaries, modules, procedures, and control code.  A feature of Logic is that it accepts parameters of some sort that it acts upon and returns some type of product or return value. '),(100,2,NULL,'constraints',NULL,'Constraints','Constraints are filters, operations, regular expressions or other constructs that perform comparisons in order to reduce an output to a desired outcome.'),(101,2,NULL,'triggers',NULL,'Triggers','Triggers are scheduled tasks, cron script entries, chained events, and IO message handling.'),(102,1,NULL,'rcs_exclusionary_data',NULL,'Exclusionary Data','This table contains Employee Exclusionary Data. '),(103,1,102,'uid',NULL,'User ID','This field shows each employees exclusionary data.  It can be used to link to other tables'),(104,1,102,'status',NULL,'Status','Exclusionary Status values are: Checked, Unchecked, and NULL (not set)'),(105,1,102,'expiration',NULL,'Exclusionary Expiration Date','This field gives the date of expiration of exclusionary data checks.'),(106,3,NULL,'projects',NULL,'Projects','This tab is for Projects Notifications'),(107,1,NULL,'rcs_allergy',NULL,'Allergy Questionnaire','Employee Allergy Questionnaire tracking data'),(108,1,107,'uid',NULL,'User ID','This field can be used to link with other tables sharing this common field'),(109,1,107,'initialdate',NULL,'Initial Date','This is the date that an employee\'s first Allergy Questionnaire was completed'),(110,1,107,'lastdate',NULL,'Last Date','This field records the last date an Allergy Questionnaire was submitted'),(111,1,107,'required',NULL,'Required','This field records whether an Allergy Questionnaire is required.  Values are: \'yes\' or \'no\'.'),(112,1,NULL,'rcs_groups',NULL,'Groups','This table contains mapping between UID and groups defined within DIFR (such as Training Groups)'),(113,1,112,'uid',NULL,'USER ID','This field is used to link with other tables sharing USER ID'),(114,1,112,'gtype',NULL,'Group Type','This field shows the type of group such as \'training\'.'),(115,1,112,'gkey',NULL,'Group Key','The group key field contains defined groups within a group type such the name of a \'training group\''),(116,1,112,'value',NULL,'Value','The value field contains an individual user records setting pertaining to a group.  The value of \'true\' denotes membership.  NULL denotes that an employee is not a member of a group. ');
/*!40000 ALTER TABLE `difr_elements` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `difr_logic`
--

DROP TABLE IF EXISTS `difr_logic`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `difr_logic` (
  `id` smallint(7) NOT NULL AUTO_INCREMENT,
  `element_id` smallint(7) DEFAULT NULL,
  `type` varchar(20) COLLATE utf8_unicode_ci NOT NULL,
  `payload` text COLLATE utf8_unicode_ci,
  `options` text COLLATE utf8_unicode_ci,
  `extra` varchar(20) COLLATE utf8_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=11 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `difr_logic`
--

LOCK TABLES `difr_logic` WRITE;
/*!40000 ALTER TABLE `difr_logic` DISABLE KEYS */;
INSERT INTO `difr_logic` VALUES (1,0,'textedit',NULL,NULL,NULL),(2,0,'popup_menu',NULL,NULL,NULL),(3,0,'checkbox',NULL,NULL,NULL),(4,0,'textarea',NULL,NULL,NULL),(5,0,'scrolling_list',NULL,NULL,NULL),(6,0,'checkbox_group',NULL,NULL,NULL),(7,0,'checkbox',NULL,NULL,NULL),(8,0,'radio_group',NULL,NULL,NULL),(9,0,'radio_button',NULL,NULL,NULL),(10,0,'filefield',NULL,NULL,NULL);
/*!40000 ALTER TABLE `difr_logic` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `difr_settings`
--

DROP TABLE IF EXISTS `difr_settings`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `difr_settings` (
  `id` tinyint(3) NOT NULL AUTO_INCREMENT,
  `setting` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
  `dkey` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
  `dvalue` varchar(254) COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=19 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `difr_settings`
--

LOCK TABLES `difr_settings` WRITE;
/*!40000 ALTER TABLE `difr_settings` DISABLE KEYS */;
INSERT INTO `difr_settings` VALUES (1,'recovery','protocol','SMB'),(2,'recovery','path','//thorn/bciv'),(3,'recovery','username','admin'),(4,'recovery','password','some password here'),(5,'recovery','retention','4'),(6,'DIFR','version','3.0'),(7,'authentication','authtype','Local Only'),(8,'authentication','anonymousaccess','No'),(9,'authentication','username','cn=dude,dc=example,dc=net'),(10,'authentication','password','cheese'),(11,'authentication','primaryserver','slapd'),(12,'authentication','secondaryserver','your-mother'),(13,'authentication','port','389'),(14,'authentication','domain','gouda.cheese.example.net'),(15,'authentication','searchbase','ou=humans,dc=example,dc=net'),(16,'DIFR','theme','bootstrap'),(17,'DIFR','revision','3'),(18,'DIFR','module','interface_preferences');
/*!40000 ALTER TABLE `difr_settings` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `difr_sources`
--

DROP TABLE IF EXISTS `difr_sources`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `difr_sources` (
  `id` smallint(5) NOT NULL AUTO_INCREMENT,
  `server` varchar(150) COLLATE utf8_unicode_ci NOT NULL,
  `protocol` varchar(20) COLLATE utf8_unicode_ci NOT NULL,
  `address` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
  `sourcename` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
  `sourcetype` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
  `subtype` varchar(30) COLLATE utf8_unicode_ci DEFAULT NULL,
  `version` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
  `driver` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
  `username` varchar(20) COLLATE utf8_unicode_ci NOT NULL,
  `password` varchar(30) COLLATE utf8_unicode_ci NOT NULL,
  `options` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `prettyname` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
  `description` text COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='defines sources that difr can access';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `difr_sources`
--

LOCK TABLES `difr_sources` WRITE;
/*!40000 ALTER TABLE `difr_sources` DISABLE KEYS */;
INSERT INTO `difr_sources` VALUES (1,'localhost','TCP','127.0.0.1','difr26','MySQL','elements','2.6','dbd::mysql','difr','dynam1c!','','DIFR-26','DIFR Database Version 2.6'),(2,'localhost','SQL','127.0.0.1','Alpha','List',NULL,'none','DBI','inherit','ihherit','','Alpha Categories','Alpha Category Listing'),(3,'localhost','SQL','127.0.0.1','Notifications','List',NULL,'none','DBI','inherit','inherit','','Notification Categories','Notification List Submenu Elements'),(4,'localhost','SQL','127.0.0.1','Licenses and Certificates','List',NULL,'none','DBI','inherit','inherit','','License and Certification Types','List of License and Certificate Types ');
/*!40000 ALTER TABLE `difr_sources` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `interface_client_demographics`
--

DROP TABLE IF EXISTS `interface_client_demographics`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `interface_client_demographics` (
  `username` varchar(30) NOT NULL DEFAULT '',
  `salutation` varchar(12) DEFAULT NULL,
  `firstname` varchar(40) NOT NULL,
  `middle` char(1) DEFAULT NULL,
  `lastname` varchar(100) NOT NULL,
  `suffix` varchar(7) DEFAULT NULL,
  `jobtitle` varchar(50) DEFAULT NULL,
  `company` varchar(30) NOT NULL,
  `department` varchar(200) NOT NULL,
  `phone` varchar(20) NOT NULL,
  `addressline1` varchar(200) NOT NULL,
  `addressline2` varchar(200) DEFAULT NULL,
  `city` varchar(200) NOT NULL,
  `stateprovince` varchar(200) NOT NULL,
  `postalcode` varchar(50) DEFAULT NULL,
  `country` varchar(200) NOT NULL,
  PRIMARY KEY (`username`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `interface_client_demographics`
--

LOCK TABLES `interface_client_demographics` WRITE;
/*!40000 ALTER TABLE `interface_client_demographics` DISABLE KEYS */;
INSERT INTO `interface_client_demographics` VALUES ('test1','Mr.','joey','','Bagadonuts',' ','feeder','Chicken Little','Feed','12345678900','123 Fake Street','','Neverwhere','Neverland','009283','UNITED KINGDOM - GB'),('test2',' ','Joe','','Tester',' ','Tester','EtherFeat','Testing','18132341234','123 Fake Street','','Lutz','FL','33559','UNITED STATES - US'),('bciv','Mr.','Will','M','Collins','IV','President/CEO','EtherFeat LLC','Executive','18134284725','24348 Summer Wind Ct','','Lutz','FL','33559','UNITED STATES - US');
/*!40000 ALTER TABLE `interface_client_demographics` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `interface_clients`
--

DROP TABLE IF EXISTS `interface_clients`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `interface_clients` (
  `username` varchar(30) NOT NULL DEFAULT '',
  `active` varchar(10) NOT NULL,
  `email` varchar(100) NOT NULL,
  `password` varchar(60) NOT NULL,
  PRIMARY KEY (`username`),
  KEY `lname` (`username`,`active`,`email`,`password`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `interface_clients`
--

LOCK TABLES `interface_clients` WRITE;
/*!40000 ALTER TABLE `interface_clients` DISABLE KEYS */;
INSERT INTO `interface_clients` VALUES ('bciv','true','will@etherfeat.com','70a30750053ecb72a0ced88c0ed1b455'),('test1','true','test@etherfeat.com','8a753469e25868ef7935da8586ff8fcc'),('test2','true','test@etherfeat.com','b39df0abbaa2c0ca4745690e02004ff3');
/*!40000 ALTER TABLE `interface_clients` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `interface_events`
--

DROP TABLE IF EXISTS `interface_events`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `interface_events` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `sid` bigint(20) DEFAULT NULL,
  `event_type` varchar(100) NOT NULL DEFAULT '',
  `event_description` varchar(255) NOT NULL DEFAULT '',
  `username` varchar(30) DEFAULT NULL,
  `hostname` varchar(50) DEFAULT NULL,
  `user_ip` varchar(15) NOT NULL DEFAULT '',
  `date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`),
  KEY `sid` (`sid`),
  KEY `username` (`username`),
  KEY `hostname` (`hostname`)
) ENGINE=MyISAM AUTO_INCREMENT=13 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `interface_events`
--

LOCK TABLES `interface_events` WRITE;
/*!40000 ALTER TABLE `interface_events` DISABLE KEYS */;
INSERT INTO `interface_events` VALUES (1,0,'Login','admin local login successful','admin','sys_status','127.0.0.1','2015-09-11 15:30:05'),(2,1,'chmod','interface_preferences to interface_preferences','admin','sys_status','127.0.0.1','2015-09-11 15:30:06'),(3,1,'interface_preferences','contact','admin','sys_status','127.0.0.1','2015-09-11 15:30:06'),(4,1,'chmod','interface_preferences to interface_modules','admin','sys_status','127.0.0.1','2015-09-11 15:30:21'),(5,1,'chmod','interface_modules to interface_preferences','admin','sys_status','127.0.0.1','2015-09-11 15:32:50'),(6,1,'interface_preferences','contact','admin','sys_status','127.0.0.1','2015-09-11 15:32:50'),(7,1,'chmod','interface_preferences to interface_sessions','admin','sys_status','127.0.0.1','2015-09-11 15:32:54'),(8,1,'interface_sessions','sessions','admin','sys_status','127.0.0.1','2015-09-11 15:32:54'),(9,1,'sessions','viewing sessions','admin','sys_status','127.0.0.1','2015-09-11 15:32:54'),(10,1,'interface_sessions','events','admin','sys_status','127.0.0.1','2015-09-11 15:33:14'),(11,1,'interface_sessions','sessions','admin','sys_status','127.0.0.1','2015-09-11 15:33:23'),(12,1,'sessions','viewing sessions','admin','sys_status','127.0.0.1','2015-09-11 15:33:23');
/*!40000 ALTER TABLE `interface_events` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `interface_ldap_groups`
--

DROP TABLE IF EXISTS `interface_ldap_groups`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `interface_ldap_groups` (
  `name` varchar(50) NOT NULL DEFAULT '',
  `groupname` varchar(255) NOT NULL DEFAULT '',
  `type` varchar(255) NOT NULL DEFAULT '',
  `base` text NOT NULL,
  `server` varchar(255) NOT NULL DEFAULT '',
  `user` varchar(255) NOT NULL DEFAULT '',
  `pwd` varchar(255) NOT NULL DEFAULT '',
  PRIMARY KEY (`name`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `interface_ldap_groups`
--

LOCK TABLES `interface_ldap_groups` WRITE;
/*!40000 ALTER TABLE `interface_ldap_groups` DISABLE KEYS */;
INSERT INTO `interface_ldap_groups` VALUES ('Orlando Users','Orlando','Users','OU=Orlando,OU=Users,OU=Orlando (ORL),OU=VISN08,DC=v08,DC=med,DC=va,DC=gov','vhaorl3dc1.v08.med.va.gov,vhatam3dc2.v08.med.va.gov,vhabay3dc2.v08.med.va.gov','bciv.collins@va.gov','17c050ec31f2d8f2'),('New','Tampa','Users','OU=~New,OU=Users,OU=Tampa (TAM),OU=VISN08,DC=v08,DC=med,DC=va,DC=gov','vhaorl3dc1.v08.med.va.gov,vhatam3dc2.v08.med.va.gov,vhabay3dc2.v08.med.va.gov','bciv.collins@va.gov','17c050ec31f2d8f2');
/*!40000 ALTER TABLE `interface_ldap_groups` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `interface_message_groups`
--

DROP TABLE IF EXISTS `interface_message_groups`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `interface_message_groups` (
  `name` varchar(30) NOT NULL DEFAULT '',
  `description` varchar(255) NOT NULL DEFAULT '',
  `icon` varchar(100) NOT NULL DEFAULT 'group.png',
  `members` text NOT NULL,
  UNIQUE KEY `name` (`name`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `interface_message_groups`
--

LOCK TABLES `interface_message_groups` WRITE;
/*!40000 ALTER TABLE `interface_message_groups` DISABLE KEYS */;
INSERT INTO `interface_message_groups` VALUES ('inventory updates','An inventory change occured','group.png','dev');
/*!40000 ALTER TABLE `interface_message_groups` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `interface_message_types`
--

DROP TABLE IF EXISTS `interface_message_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `interface_message_types` (
  `name` varchar(50) NOT NULL DEFAULT '',
  `source` varchar(50) NOT NULL DEFAULT '',
  `description` varchar(255) NOT NULL DEFAULT '',
  `priority` smallint(2) NOT NULL DEFAULT '99',
  `icon` varchar(50) NOT NULL DEFAULT 'message.png',
  `sound` varchar(50) NOT NULL DEFAULT 'message.wav',
  `recipient` varchar(255) NOT NULL DEFAULT 'no group',
  `justification` varchar(255) NOT NULL DEFAULT '',
  `remediation` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`name`,`source`),
  KEY `description` (`description`),
  KEY `recipient` (`recipient`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `interface_message_types`
--

LOCK TABLES `interface_message_types` WRITE;
/*!40000 ALTER TABLE `interface_message_types` DISABLE KEYS */;
/*!40000 ALTER TABLE `interface_message_types` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `interface_messages`
--

DROP TABLE IF EXISTS `interface_messages`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `interface_messages` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) NOT NULL DEFAULT '',
  `description` varchar(255) NOT NULL DEFAULT '',
  `source` varchar(255) NOT NULL DEFAULT '',
  `priority` smallint(2) NOT NULL DEFAULT '99',
  `recipient` varchar(255) NOT NULL DEFAULT '',
  `reason` varchar(255) NOT NULL DEFAULT '',
  `contact_info` varchar(255) NOT NULL DEFAULT '',
  `payload` text,
  `generated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `resolved` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `resolvedby` varchar(50) DEFAULT NULL,
  `notes` text,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=9 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `interface_messages`
--

LOCK TABLES `interface_messages` WRITE;
/*!40000 ALTER TABLE `interface_messages` DISABLE KEYS */;
INSERT INTO `interface_messages` VALUES (1,'inventory update','TAM-EE44177','bciv',99,'powernet_dev_jahvastat','location change','bciv','SQL~~update hosts_inventory set location=\'TPA: Bldg 1, Room B230d\' where barcode=\'EE44177\'','2005-12-07 14:58:27','0000-00-00 00:00:00',NULL,'EE44177 location is now TPA: Bldg 1, Room B230d'),(8,'hey','this is a test','PowerNet',99,'vhatamcolliw1','just to test if it works.','PowerNet','','2005-12-07 14:52:45','0000-00-00 00:00:00',NULL,'this is just a test to see if the alert system will work.');
/*!40000 ALTER TABLE `interface_messages` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `interface_module_access`
--

DROP TABLE IF EXISTS `interface_module_access`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `interface_module_access` (
  `username` varchar(30) NOT NULL DEFAULT '',
  `module` varchar(50) NOT NULL DEFAULT '',
  `roles` varchar(255) DEFAULT NULL,
  `groups` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`username`,`module`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `interface_module_access`
--

LOCK TABLES `interface_module_access` WRITE;
/*!40000 ALTER TABLE `interface_module_access` DISABLE KEYS */;
INSERT INTO `interface_module_access` VALUES ('dev','interface_modules','add,edit,assign,properties,roles,groups,delete',''),('dev','interface_users','delete','dev,rcs'),('bciv','interface_users','rcs,delete',''),('dev','interface_sessions',NULL,NULL),('dev','interface_settings',NULL,NULL),('dev','interface_tasks',NULL,NULL),('bciv','interface_preferences',NULL,NULL),('bciv','interface_logout',NULL,NULL),('bciv','charity_events','add,edit,view,register,venue,events,tickets,delete,sponsors,players',NULL),('bciv','charity_sponsor',NULL,NULL),('admin','interface_preferences',NULL,NULL),('admin','interface_modules','add,roles,groups,delete,properties',NULL),('admin','interface_sessions',NULL,NULL),('admin','interface_settings',NULL,NULL),('admin','interface_users','delete',NULL);
/*!40000 ALTER TABLE `interface_module_access` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `interface_module_source`
--

DROP TABLE IF EXISTS `interface_module_source`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `interface_module_source` (
  `name` varchar(40) NOT NULL,
  `version` varchar(20) NOT NULL,
  `source` text NOT NULL,
  `state` varchar(15) NOT NULL,
  `timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `modifiedby` varchar(20) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `interface_module_source`
--

LOCK TABLES `interface_module_source` WRITE;
/*!40000 ALTER TABLE `interface_module_source` DISABLE KEYS */;
INSERT INTO `interface_module_source` VALUES ('interface_users','0.0.02','#!/usr/bin/perl\r\nuse CGI; my $q=new CGI;\r\nuse CGI::Carp qw( fatalsToBrowser );\r\n\r\nmy $script_title=\"Modules\";\r\n\r\nhead();\r\nbody();\r\ntail();\r\n\r\nsub body{\r\n  unless(defined($g->{action}) ){view();}\r\n  elsif($g->{action} eq \"assign\"){access_editor();}\r\n  elsif($g->{action} eq \"modify_access\"){modify_group_access();}\r\n  elsif($g->{action} eq \"new\"){new();}\r\n  elsif($g->{action} eq \"add\"){add();}\r\n  elsif($g->{action} eq \"edit\"){edit();}\r\n  elsif($g->{action} eq \"properties\"){properties();}\r\n  elsif($g->{action} eq \"update\"){update();}\r\n  elsif($g->{action}=~m/role/){roles();}\r\n  elsif($g->{action}=~m/group/){groups();}\r\n  # elsif($g->{action} eq \"del\"){del();}\r\n  else{\r\n    print $q->h2({-align=>\"center\"},\r\n    \"The action you have selected, $g->{action}, does not exist\");\r\n  }\r\n}\r\n\r\nsub groups{\r\n  print $q->h3({-align=>\"center\"},\"groups for $g->{name} module\");\r\n  my $total_groups=$g->{dbh}->selectrow_array(\"select groups from interface_modules where name=\'$g->{name}\'\");\r\n  if($v{action} eq \"delete_group\"){\r\n    print \"deleting \'$g->{group}\' group from $g->{name} module...<br />\";\r\n    $total_groups=~s/$g->{group}//; \r\n    $total_groups=~s/\\,\\,/\\,/; \r\n    $total_groups=~s/^\\,+//g; $total_groups=~s/\\,+$//g;\r\n    $g->{dbh}->do(\"update interface_modules set groups=\\\"$total_groups\\\" where name=\'$g->{name}\'\");\r\n  }\r\n  elsif($g->{action} eq \"add_group\"){\r\n    # add group\r\n    print \"adding \'$g->{group}\' group to $g->{name} module...<br />\";\r\n    if($total_groups ne \"\"){$total_groups=$total_groups.\"\\,\";}\r\n    $total_groups=$total_groups.\"$g->{group}\";\r\n    $g->{dbh}->do(\"update interface_modules set groups=\\\"$total_groups\\\" where name=\'$g->{name}\'\");\r\n  }\r\n  # print \"&nbsp;&#149;&nbsp;\",\r\n  # $q->a({-href=>\"\"},\"add a new group\");\r\n  # print \"roles: $total_groups<br />\";\r\n  my @total_groups=split(/\\,/,$total_groups); my $bg=$g->{bgcolor};\r\n  print $q->start_table({-cols=>\"2\",-align=>\"center\",-width=>\"70%\"}),\r\n  $q->Tr({-style=>\"background-color: $bg\"},\r\n    $q->th({-align=>\"left\"},\"groups\"),\r\n    $q->th({-align=>\"left\"},\"action\"),\r\n  );\r\n  foreach $group(@total_groups){\r\n    if($bg eq $v{bgcolor}){$bg=\"white\";}elsif($bg eq \"white\"){$bg=$g->{bgcolor};}\r\n    print $q->Tr({-style=>\"background-color: $bg\"},$q->td(\r\n      \"$group \"),\r\n      $q->td($q->a({-href=>\"$g->{scriptname}?action=delete_group&group=$group&name=$g->{name}\"},\"delete\"),\r\n    ));\r\n  }\r\n  print $q->start_form({-method=>\"get\",-action=>\"$g->{scriptname}\",-id=>\"id\"}),\r\n  $q->hidden({-name=>\"action\",-value=>\"add_group\",-override=>\"1\"}),\r\n  $q->hidden({-name=>\"name\",-value=>\"$g->{name}\"}),\r\n  $q->Tr(\r\n    $q->td(\r\n      $q->textfield({-name=>\"group\",-id=>\"input-focus\"}),\r\n    ),\r\n    $q->td(\r\n      $q->submit(\"Add Group\"),\r\n    ),\r\n  ),\r\n  $q->end_table();\r\n}\r\n\r\nsub roles{\r\n  print $q->h3({-align=>\"center\"},\"roles for $g->{name} module\");\r\n  my $total_roles=$g->{dbh}->selectrow_array(\"select roles from interface_modules where name=\'$g->{name}\'\");\r\n  if($v{action} eq \"delete_role\"){\r\n    print \"deleting \'$g->{role}\' role from $g->{name} module...<br />\";\r\n    $total_roles=~s/$g->{role}//; \r\n    $total_roles=~s/\\,\\,/\\,/; \r\n    $total_roles=~s/^\\,+//g; $total_roles=~s/\\,+$//g;\r\n    $g->{dbh}->do(\"update interface_modules set roles=\\\"$total_roles\\\" where name=\'$g->{name}\'\");\r\n  }\r\n  elsif($g->{action} eq \"add_role\"){\r\n    # add role\r\n    print \"adding \'$g->{role}\' role to $g->{name} module...<br />\";\r\n    if($total_roles ne \"\"){$total_roles=$total_roles.\"\\,\";}\r\n    $total_roles=$total_roles.\"$g->{role}\";\r\n    $g->{dbh}->do(\"update interface_modules set roles=\\\"$total_roles\\\" where name=\'$g->{name}\'\");\r\n  }\r\n  # print \"&nbsp;&#149;&nbsp;\",\r\n  # $q->a({-href=>\"\"},\"add a new role\");\r\n  # print \"roles: $total_roles<br />\";\r\n  my @total_roles=split(/\\,/,$total_roles); my $bg=$g->{bgcolor};\r\n  print $q->start_table({-cols=>\"2\",-align=>\"center\",-width=>\"70%\"}),\r\n  $q->Tr({-style=>\"background-color: $bg\"},\r\n    $q->th({-align=>\"left\"},\"roles\"),\r\n    $q->th({-align=>\"left\"},\"action\"),\r\n  );\r\n  foreach $role(@total_roles){\r\n    if($bg eq $g->{bgcolor}){$bg=\"white\";}elsif($bg eq \"white\"){$bg=$g->{bgcolor};}\r\n    print $q->Tr({-style=>\"background-color: $bg\"},$q->td(\r\n      \"$role \"),\r\n      $q->td($q->a({-href=>\"$g->{scriptname}?action=delete_role&role=$role&name=$g->{name}\"},\"delete\"),\r\n    ));\r\n  }\r\n  print $q->start_form({-method=>\"get\",-action=>\"$g->{scriptname}\",-id=>\"id\"}),\r\n  $q->hidden({-name=>\"action\",-value=>\"add_role\",-override=>\"1\"}),\r\n  $q->hidden({-name=>\"name\",-value=>\"$g->{name}\"}),\r\n  $q->Tr(\r\n    $q->td(\r\n      $q->textfield({-name=>\"role\",-id=>\"input-focus\"}),\r\n    ),\r\n    $q->td(\r\n      $q->submit(\"Add Role\"),\r\n    ),\r\n  ),\r\n  $q->end_table();\r\n}\r\n\r\nsub modify_group_access{\r\n  $sth=$g->{dbh}->do(\"update interface_module_users set $g->{name}=\\\"false\\\"\");\r\n  print \"<br />$g->{name} adding users: \";\r\n  for $usertoadd (sort keys %v){\r\n  if($usertoadd=~m/^u_/){\r\n      $usertoadd=substr($usertoadd,2);\r\n      print \"$usertoadd \";\r\n      # sql to add each iterated user to group\r\n      $sth=$g->{dbh}->do(\"update interface_module_users set $g->{name}=\\\"true\\\" where username=\\\"$usertoadd\\\"\");\r\n    }\r\n  }\r\n  print \"<br />\";\r\n  access_editor();\r\n}\r\n\r\nsub access_editor{\r\n  $sth=$g->{dbh}->prepare(\"select username,lname,fname,mi,suffix,service from interface_users order by username\"); $sth->execute();\r\n  my $modtitle=$v{name}; $modtitle=~s/\\_/ /; $modtitle=~s/\\_/ /;\r\n  print $q->h4(\"Checked users have access to the \'$modtitle\' module.\"),\r\n  \"<div style=\\\"top: 140; left: 0; width: 50%; height: 300px; overflow: scroll;\\\">\",\r\n  $q->start_form({-method=>\"post\",-action=>\"$g->{scriptname}\"}),\r\n  $q->hidden({-name=>\"action\",-value=>\"modify_access\",-override=>\"1\"}),\r\n  $q->hidden({-name=>\"name\",-value=>\"$g->{name}\",-override=>1}),\r\n  $q->start_table({-align=>\"right\",-cols=>2,-cellspacing=>0,-cellpadding=>0,-border=>0,-width=>\"100%\"});\r\n  my $grey=0;\r\n  while(my($u,$last,$first,$mi,$suffix,$service)=$sth->fetchrow_array()){\r\n    my $access=$g->{dbh}->selectrow_array(\"select $g->{name} from interface_module_users where username=\\\"$u\\\"\");\r\n    if($grey==0){print \"<Tr bgcolor=\\\"#fff0ff\\\">\"; ++$grey;}else{print \"<Tr>\"; --$grey;}\r\n    if($access eq \"true\"){\r\n      print \r\n      $q->td({-width=>\"20%\"},\"&nbsp;\"),\r\n      $q->td(\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=checkbox name=\\\"u_$u\\\" checked>   \",\r\n        $q->a({-href=>\"$g->{scriptname}?chmod=powernet_dev_users&action=edit&euname=$u\"},\"$last, $first $mi $suffix\"),\r\n      ); # $u\"),\r\n        # $q->td(\"&nbsp;$last, $first $mi $suffix\"),\r\n	# $q->td(\"$service\");\r\n    }\r\n    else{\r\n      print \r\n      $q->td(\"&nbsp;\"),\r\n      $q->td(\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=checkbox name=\\\"u_$u\\\" unchecked>   \",\r\n        $q->a({-href=>\"$g->{scriptname}?chmod=powernet_dev_users&action=edit&euname=$u\"},\"$last, $first $mi $suffix\"),\r\n      ); # $u\"),\r\n            # $q->td(\"&nbsp;$last, $first $mi $suffix\"),\r\n	    # $q->td(\"$service\");\r\n    }\r\n    print \"</Tr>\\n\";\r\n  }\r\n  print $q->end_table(),\r\n  \"&nbsp;<br /><br /><center>\",\"</div>\",\r\n  \"<div style=\\\"position: absolute; top: 140; left: 50%; width: 50%; padding-left: 4px; padding-right: 4px; height: 300px;\\\">\",\r\n  $q->h4({-align=>\"left\"},\"To grant/deny user module access, select a user and then click the \'Update Access List\' button.\"),\r\n  $q->submit(\"Update Access List\"),\"</center>\",\r\n  $q->end_table(),$q->end_form(),\r\n  \"</div>\";\r\n  # print \"<div style=\\\"position: absolute; top: 140; left: 50%; width: 50%; height: 300px;\\\">\",\r\n  # $q->h3({-align=>\"center\"},\"To enter a specific user enter username here:\"),\r\n  # $q->start_table({-align=>\"center\",-cols=>1,-cellspacing=>0,-cellpadding=>0,-border=>1}),\r\n  # $q->start_form({-method=>\"post\",-action=>\"$v{scriptname}\"}),\r\n  # $q->hidden({-name=>\"name\",-value=>\"$v{name}\",-override=>1}),\r\n  # $q->hidden({-name=>\"action\",-value=>\"finduser\"}),\r\n  # $q->Tr($q->td(\r\n  #  $q->textfield({-name=>\"eusername\",-value=>\"$v{eusername}\",-override=>\"1\"}),\r\n  #  $q->submit(\"search\"),\r\n  #),),\r\n  #$q->end_form(),\r\n  #$q->end_table(),\r\n  #\"</div>\";\r\n}\r\n\r\nsub add{\r\n  print \"adding $g->{name} $g->{title}<br />\";\r\n  my($grp,$opt,$scr)=split(/\\_/,lc($v{name}));\r\n  unless(-d \"modules/$grp\"){\r\n    print \"creating path: modules/$grp<br />\";\r\n    mkdir \"modules/$grp\";\r\n  }\r\n  unless(-d \"modules/$grp/$opt\"){\r\n    print \"creating path: modules/$grp/$opt<br />\";\r\n    mkdir \"modules/$grp/$opt\";\r\n  }\r\n  unless(-e \"modules/$grp/$opt/$scr\\.pl\"){\r\n    print \"creating empty module: modules/$grp/$opt/$scr\\.pl<br />\";\r\n    skeleton($grp,$opt,$scr);\r\n  }\r\n  else{\r\n    print \"I see your $scr\\.pl already exists...<br />\";\r\n  }\r\n  $v{name}=lc($v{name});\r\n  $g->{dbh}->do(\"insert into interface_modules values(\'$g->{name}\',\'$g->{title}\',NULL,NULL)\");\r\n  $g->{dbh}->do(\"alter table interface_module_users add column $g->{name} varchar(50)\");\r\n  $g->{dbh}->do(\"update interface_module_users set $g->{name}=\'true\' where username=\'$g->{username}\'\");\r\n  view();\r\n}\r\n\r\nsub update{\r\n  # actually move module to it\'s new home...\r\n  if($v{name} ne $v{oldname}){\r\n    my ($grp,$opt,$scr)=split(/\\_/,lc($v{oldname}));\r\n    if(-d \"modules/$grp/$opt\"){\r\n      if(-e \"modules/$grp/$opt/$scr\\.pl\"){\r\n        print \"modules/$grp/$opt/$scr\\.pl exists...<br />\";\r\n        my($ngrp,$nopt,$nscr)=split(/\\_/,lc($v{name}));\r\n        system(\"mkdir modules/$ngrp/$nopt/\");\r\n        system(\"mv modules/$grp/$opt/$scr\\.pl modules/$ngrp/$nopt/$nscr\\.pl\");\r\n        if(-e \"modules/$ngrp/$nopt/$nscr\\.pl\"){\r\n          print \"move to $ngrp/$nopt/$nscr successful! :)<br />\";\r\n        }\r\n        else{\r\n          print \"moving $grp/$opt/$scr to $ngrp/$nopt/$nscr failed! :(<br />\";\r\n        }\r\n      }else{print\"modules/$grp/$opt/$scr doesn\\\'t exist...<br />\";}\r\n    }else{print\"modules/$grp/$opt doesn\\\'t exist<br />\";}\r\n  }\r\n  $g->{dbh}->do(\"alter table interface_module_users drop column $g->{oldname}\");\r\n  $g->{dbh}->do(\"delete from interface_modules where name=\\\"$g->{oldname}\\\"\");\r\n  add();\r\n}\r\n\r\n# sub del{\r\n  # my($grp,$opt,$scr)=split(/\\_/,lc($v{name}));\r\n  # print \"deleting modules/$grp/$opt/$scr\\.pl...\";\r\n  # system(\"rm modules/$grp/$opt/$scr\\.pl\");\r\n  # unless(-e \"modules/$grp/$opt/$scr\\.pl\"){print \"successful.\";}\r\n  # else{print\"failed.<br />\";}\r\n  # $g->{dbh}->do(\"alter table module_users drop column $v{name}\");\r\n  # $g->{dbh}->do(\"delete from modules where name=\\\"$v{name}\\\"\");\r\n  # view();\r\n# }\r\n\r\nsub edit{\r\n  print \"\\n<!-- edit start -->\\n\";\r\n  my($name,$version,$source,$state); my $filepath=$g->{name}.\"\\.pl\"; $filepath=~s/\\_/\\//g;\r\n  if($g->{function} eq \"\"){$g->{function}=\"update\";\r\n    print \"<!-- function was not set.  Set function to \'update\' -->\\n\";\r\n	# initially entering the editor $g->{name} has been passed with the $g->{action} set to \'edit\'\r\n	# change \'edit\' to \'save\' and then get the latest code from the database and load it into the editor.\r\n	($name,$version,$source,$state)=$g->{dbh}->selectrow_array(\"select name,version,source,state from interface_module_source where name=\'$g->{name}\' and state=\'active\'\");\r\n	unless($name eq \"$g->{name}\"){\r\n      print \"<!-- name ($name) did not match passed name var: \'$g->{name}\' -->\\n\";\r\n	  # there is no database entry for the module chosen.  Create one on the fly for existing modules.\r\n	  $name=\"$g->{name}\"; $version=\"0.0.0001\"; $stamp=$g->{dbh}->selectrow_array(\"select now()\"); $state=\'active\';\r\n	  print $q->p(\"No source was present in database.  I am importing $name from $g->{modulepath}.\"),\"\\n\";\r\n	  if(-e \"$g->{modulepath}\"){\r\n		print $q->p(\"$g->{modulepath} exist... importing source...\"),\"\\n\";\r\n        open(IN,\"<$g->{modulepath}\") or die \"I cannot open $name : $!\";\r\n		  while(my $line=<IN>){$source.=$line;} close(IN);\r\n	    $sth=$g->{dbh}->prepare(\"insert into interface_module_source values(?,?,?,?,\'now()\',\'$g->{username}\')\");\r\n	    $sth->execute($name,$version,$source,$state) || die $g->{dbh}->errstr;\r\n	    $g->{function}=\"update\";\r\n	  }\r\n	  else{print $q->p(\"I cannot load the source from the database, and the module source does not exist.\"),\"\\n\"; exit;}\r\n	}\r\n  }\r\n  elsif($g->{function} eq \"update\"){\r\n	# update the datebase based on the modified form that passed data here.\r\n	$sth=$g->{dbh}->prepare(\"update interface_module_source set version=?,source=?,state=?,stamp=\'now()\',modifiedby=\'$g->{username}\' where name=\'$g->{name}\'\");\r\n	$sth->execute($g->{version},$g->{source},$g->{state});\r\n	# update actual file to reflect changes\r\n    my $filepath=$g->{name}.\"\\.pl\"; $filepath=~s/\\_/\\//g;\r\n    open(OUT,\">$g->{modulepath}\") || die \"Cannot open module, $g->{modulepath} for writing :$!\";\r\n    print OUT \"$g->{source}\";\r\n    close(OUT);\r\n  }\r\n  elsif($g->{function} eq \"upload\"){upload();}\r\n  else{print $q->p(\"The function you have selected does not exist.\"); exit;}\r\n\r\n  # set webvars from what we get elsewhere if need be.\r\n  if($g->{name} eq \"\"){$g->{name}=$name;}\r\n  if($g->{version} eq \"\"){$g->{version}=$version;}\r\n  if($g->{source} eq \"\"){$g->{source}=$source;}\r\n  if($g->{state} eq \"\"){$g->{state}=$state;}\r\n  if($g->{stamp} eq \"\"){$g->{stamp}=$stamp;}\r\n  if($g->{published} eq \"\"){$g->{published}=$published;}\r\n  if($g->{lastmodified} eq \"\"){$g->{lastmodified}=$lastmodified;}\r\n  if($g->{modifiedby} eq \"\"){$g->{modifiedby}=$modifiedby;}\r\n\r\n  # put editor up on screen with the latest data...\r\n  print $q->start_form({-method=>\"post\",-action=>\"$g->{scriptname}\"}),\r\n    \"\\n<table comment=\\\"table for module editor\\\">\\n<tr>\\n\",\r\n    \"<td>\",$q->label({-for=>\"name\"},\"name of module\"),\"<br />\\n\",\r\n    $q->textfield({-name=>\"name\",-value=>\"$g->{name}\",-size=>\"20\",-override=>\"1\"}),\"</td>\\n\",\r\n    $q->hidden({-name=>\"action\",-value=>\"$g->{action}\",-override=>\"1\"}),\r\n    $q->hidden({-name=>\"function\",-value=>\"$g->{function}\",-override=>\"1\"}),\r\n    \"<td>\",$q->label({-for=>\"version\"},\"module version\"),\"<br />\\n\",\r\n    $q->textfield({-name=>\"version\",-value=>\"$g->{version}\",-override=>\"1\"}),\"</td>\\n\",\r\n    \"<td>\",$q->label({-for=>\"state\"},\"state of module\"),\"<br />\\n\",\r\n    $q->popup_menu({-name=>\"state\",-size=>\"1\",-value=>[\"\",\"active\",\"debug\"],-default=>\"$g->{state}\",-override=>\"1\"}),\"</td>\\n\",\r\n    # stamp & modifiedby are automatically updated without any interaction...\r\n    \"<td>\",$q->submit(\"$g->{function}\"),\"</td>\\n</tr>\\n</table>\\n\",\r\n    $q->textarea({-name=>\"source\",value=>\"$g->{source}\",-override=>\"1\"}),\r\n  $q->end_form(),\"\\n\";\r\n  #print \"\\nfunction: \'$g->{function}\' action: \'$g->{action}\' title: \'$g->{title}\' \\n\";\r\n\r\n  #sub upload{\r\n  #  if($g->{id} eq \"\"){print \"Upload parameters where in an unacceptible format.<hr />\\n\"; return;}\r\n#	  my $textdata;\r\n#	  unless(-d \"$docs_upload/$g->{id}\"){system(\"mkdir $docs_upload/$g->{id}\"); print \"\\ncreating $docs_upload/$g->{id} folder...<br />\\n\";}\r\n#	  my($fn,$ext)=split(/\\./,$g->{uploadfilename}); $ext=lc($ext);\r\n#	  if($ext=~m/jpg/ or $ext=~m/jpeg/ or $ext=~m/gif/ or $ext=~m/png/){\r\n#	    system(\"mv $g->{uploaddir}/$g->{uploadfilename} $docs_upload/$g->{id}/$g->{uploadfilename}\");\r\n #     print \"<b>$g->{uploadfilename}</b> has been uploaded to <b>$docs_upload/$g->{id}/$g->{uploadfilename}</b> directory.<br />\\n\";\r\n  #    if($g->{type} eq \"text\"){\r\n   #     print \"prepared text image insertion token.<br />\\n\"; $g->{data}.=\"\\n\\[image\\: \\\"$g->{uploadfilename}\\\" caption: \\\"\\\" location: \\\"\\\" \\]\\n\";\r\n    #  }\r\n     # elsif($g->{type} eq \"html\"){\r\n#        print \"prepared html image insertion token.<br />\\n\"; $g->{data}.=\"\\n<img src=\\\"/docs/$g->{id}/$g->{uploadfilename}\\\" /><br \\/>\\n\";\r\n#      }\r\n#      elsif($g->{type} eq \"xml\"){\r\n#        print \"prepared xml image insertion token.<br />\\n\";\r\n#        print \"<p> There is currently no XML tag for this upload type </p>\"; $g->{data}.=\"\\n<imagetag><name>$g->{uploadfilename}</name></imagetag>\\n\";\r\n#      }\r\n#      print \"inserting image insertion token into database record<br />\\n\";\r\n#      $sth=$g->{dbh}->prepare(\"update system set data=? where id=$g->{id}\") || die $g->{dbh}->errstr;\r\n#      $sth->execute($g->{data}) || die $g->{dbh}->errstr;\r\n#    }\r\n#    elsif($ext=~m/txt/){ # uploading a txt file into the editor...\r\n#      print \"inserting text data into database record<br />\\n\";\r\n#	    open(IN,\"<$g->{uploaddir}/$g->{uploadfilename}\")||die\"cannot open file for reading : $!\";\r\n#	    while(my $line=<IN>){chomp $line; $textdata.=\"$line\\n\";}\r\n#	    close(IN);\r\n#	    $g->{data}.=$textdata;\r\n#	    system(\"rm $g->{uploaddir}/$g->{uploadfilename}\");\r\n#      # print \"$g->{data}<br />\\n\";\r\n#      $sth=$g->{dbh}->prepare(\"update system set data=? where id=$g->{id}\") || die $g->{dbh}->errstr;\r\n#      $sth->execute($g->{data}) || die $g->{dbh}->errstr;\r\n#    }\r\n#    else{\r\n#	    system(\"rm $g->{uploaddir}/$g->{uploadfilename}\");\r\n#	    print $q->font({-face=>\"Arial\",-size=>\"4\",-color=>\"red\"},\"You can only upload .jpeg, .gif, .png image and .txt files.\");\r\n#  } }\r\n  print \"\\n<!-- edit end -->\\n\";\r\n}\r\n\r\nsub properties{\r\n  print\r\n  $q->h3({-align=>\"center\"},\"Editing properties of \\\"$g->{name}\\\" module.\"),\r\n  $q->start_form({-action=>\"$g->{scriptname}\",-method=>\"post\"}),\r\n  $q->hidden({-name=>\"action\",-value=>\"update\",-override=>\"1\"}),\r\n  $q->hidden({-name=>\"oldname\",-value=>\"$g->{name}\"}),\r\n  $q->start_table({-cols=>\"3\",-cellspacing=>0,-cellpadding=>0,-border=>0,-width=>\"50%\",-align=>\"center\"}),\r\n  $q->Tr({-bgcolor=>\"#fff9ff\"},\r\n    $q->td({-align=>\"right\"},\"Module Title&nbsp;&nbsp;\"),\r\n    $q->td($q->textfield({-name=>\"title\",-value=>\"$g->{title}\",-override=>\"1\"}),),\r\n  ),\r\n  $q->Tr({-bgcolor=>\"#fff9ff\"},\r\n    $q->td({-align=>\"right\"},\"Group_Option_Module&nbsp;&nbsp;\"),\r\n    $q->td($q->textfield({-name=>\"name\",-value=>\"$g->{name}\",-override=>\"1\"}),),\r\n  ),\r\n  $q->Tr({-bgcolor=>\"#fff9ff\"},$q->td(\" \"),$q->td($q->submit(\"Save\"),),),\r\n  $q->end_form;\r\n}\r\n\r\nsub new{\r\n  print\r\n  $q->p(\"To add a new module to Interface you must know three things about the module; what group it belongs to, \",\r\n        \"the option name, and lastly the name of the module.\"\r\n  ),\r\n  $q->p(\"<font size=+2>Group:</font> Admin would be the group you would use for a module that would be available to administrators while \",\r\n        \"FeeBasis could be the name of the group that contains options used by said descriptor.\",\r\n  ),\r\n  $q->p(\"<font size=+2>Option:</font> An Option is a subset of Group that distinguishes the type of work or function\",\r\n        \"that a module serves within PowerNet\",\r\n  ),\r\n  $q->p(\"<font size=+2>Module:</font> The name of the module is the actual executable name and does not require any extension {i.e., \'.pl\'}.\",\r\n        \"The group, option, and name do not contain spaces and are seperated by an underscore character, \'_\'\",\r\n  ),\r\n  $q->start_form({-action=>\"$g->{scriptname}\",-method=>\"post\"}),\r\n  $q->hidden({-name=>\"action\",-value=>\"add\"}),\r\n  $q->start_table({-cols=>\"3\",-cellspacing=>0,-cellpadding=>0,-border=>0,-width=>\"50%\",-align=>\"center\"}),\r\n  $q->Tr({-bgcolor=>\"$g->{bgcolor}\"},\r\n    $q->td({-align=>\"right\"},\"Module Title&nbsp;&nbsp;\"),\r\n    $q->td($q->textfield({-name=>\"title\",-value=>\"$g->{title}\",-override=>\"1\"}),),\r\n  ),\r\n  $q->Tr({-bgcolor=>\"$g->{bgcolor}\"},\r\n    $q->td({-align=>\"right\"},\"Group_Option_Module&nbsp;&nbsp;\"),\r\n    $q->td($q->textfield({-name=>\"name\",-value=>\"$g->{name}\",-override=>\"1\"}),),\r\n  ),\r\n  $q->Tr({-bgcolor=>\"$g->{bgcolor}\"},$q->td(\" \"),$q->td($q->submit(\"Save\"),),),\r\n  $q->end_form;\r\n}\r\n\r\nsub view{\r\n  print \"roles: $g->{my_roles}<br />\";\r\n  print $q->start_table({-cols=>\"3\",-cellspacing=>0,-cellpadding=>0,-border=>0,-width=>\"80%\",-align=>\"center\"}),\r\n    $q->Tr({-style=>\"background-color: $g->{bgcolor}\"},$q->th(\"Module Group,Option,Name\"),$q->th(\"Module Title\"),$q->th(\"Action\"),);\r\n  #$sth=$g->{dbh}->prepare(\"select name,title from modules where name not regexp \\\"^PowerNet_Dev\\\" order by name\"); $sth->execute();\r\n  $sth=$g->{dbh}->prepare(\"select name,title from interface_modules order by name\"); $sth->execute();\r\n  my $bg=$g->{bgcolor};\r\n  while(my($name,$title)=$sth->fetchrow_array()){\r\n    if($bg eq $g->{bgcolor}){$bg=\"white\";}elsif($bg eq \"white\"){$bg=$g->{bgcolor};}\r\n    print \"<tr style=\\\"background-color: $bg\\\">\",\r\n    $q->td(\"$name\"),$q->td(\"$title\"),\"<td>\";\r\n    my @roles=split(/\\,/,$g->{my_roles});\r\n    foreach $role(@roles){\r\n      print $q->a({-href=>\"$g->{scriptname}?action=$role&name=$name&title=$title\"},\"$role\"),\"&nbsp;\";\r\n    }  \r\n    print \"</td></tr>\";\r\n  }\r\n}\r\n\r\nsub head{\r\n  #connectsql();\r\n  if($g->{my_roles}=~m/add/){\r\n    print \"&nbsp;&#149;&nbsp;\",\r\n    $q->a({-href=>\"$g->{scriptname}?action=new\"},\"Add a new Module\");\r\n  }\r\n  unless($g->{action} eq \"\"){\r\n    print \"&nbsp;&#149;&nbsp;\",\r\n    $q->a({-href=>\"$g->{scriptname}\"},\"Back\");\r\n  }\r\n  print $q->h2({-align=>\"center\"},\"$script_title\");\r\n}\r\n\r\nsub tail{\r\n  print $q->end_table();\r\n  $g->{dbh}->disconnect();\r\n}\r\n\r\nsub connectsql{\r\n  open(FIL,\"</$g->{sql_powernet}\")|| die\"cannot open $g->{sqlconf} : $!\";\r\n  my ($d,$u,$p); while(my $line=<FIL>){chomp($line); if($line ne \"\"){($d,$u,$p)=split(/\\,/,$line); next;}}\r\n  $dbh=DBI->connect(\"DBI:mysql:$d\",\"$u\",\"$p\",{PrintError=>1,RaiseError=>1}) or \r\n    die\"Can not connect to database: $DBI::errstr\\n\";\r\n}\r\n\r\nsub skeleton{\r\n  my($grp,$opt,$scr)=@_;\r\n  print \"in skeleton...<br />\";\r\n  system(\"webp\");\r\n  if(-e \"$mod/$grp/$opt/$scr.pl\"){}\r\n  if(open(NEW,\">>modules/$grp/$opt/$scr.pl\")){\r\n    print NEW \"#!/usr/bin/perl\\n\";\r\n    print NEW \"# Interface Module Skeleton\\n\";\r\n    print NEW \"# This is an automatically generated skeleton module for Interface -BCIV\\n\\n\";\r\n    print NEW \"use DBI; my \\$dbh; my \\$sth; my \\$rv; # This is for database connectivity\\n\\n\";\r\n    print NEW \"use CGI; my \\$q=new CGI;              # This is for writting object oriented modules\\n\\n\";\r\n    print NEW \"my \\%v=\\@ARGV;                        # This is how http vars are passed a to module\\n\";\r\n    print NEW \"                                      #(as arguments into a hash).\\n\\n\";\r\n    print NEW \"# i.e., if you have a post/get variable called fred it will be seen as \\$v{fred} to\\n\";\r\n    print NEW \"# the module.\\n\\n\";\r\n    print NEW \"my \\$script_title=\\\"$v{title}\\\";\\n\\n\";\r\n    print NEW \"head();\\nbody();\\ntail();\\n\\n\";\r\n    print NEW \"sub body{\\n\";\r\n    print NEW \"  # this is the function that decides what the module is supposed to do when it is called\\n\";\r\n    print NEW \"  # what it does is determined by the \\$v{action} variable which is set through forms like\\n\";\r\n    print NEW \"  # the one called view shown below...\\n\";\r\n    print NEW \"  if(defined(\\$g->{action})){\\n\";\r\n    print NEW \"    if(\\$g->{action} eq \\\"someaction\\\"){\\n\";\r\n    print NEW \"      # an action is typically database modification routines or a call to a function\\n\";\r\n    print NEW \"      # view();\\n\";\r\n    print NEW \"      print \\$q->h2({-align=>\\\"center\\\",-bgcolor=>\\\"#dddddd\\\"},\\\"\\message: \\$g->{popup}\\\"),\\n\";\r\n    print NEW \"    }\\n\";\r\n    print NEW \"    else{print\\\"the action you have chosen doesn\\\'t exist<br />\\\";}\\n\";\r\n    print NEW \"  }else{view();}\\n\";\r\n    print NEW \"}\\n\\n\";\r\n    print NEW \"sub view{\\n\";\r\n    print NEW \"  print \\$q->start_table({-cols=>\\\"1\\\",-border=>\\\"0\\\",-width=>\\\"100%\\\",-align=>\\\"center\\\",-cellspacing=>\\\"0\\\"}),\\n\";\r\n    print NEW \"  \\$q->Tr(\\$q->td(\\n\";\r\n    print NEW \"    \\$q->start_form({-action=>\\\"\\$g->{scriptname}\\\",-method=>\\\"POST\\\"}),\\n\";\r\n    print NEW \"    \\$q->hidden({-name=>\\\"sid\\\",-value=>\\\"\\$g->{sid}\\\",-override=>\\\"1\\\"}),\\n\";\r\n    print NEW \"    \\$q->hidden({-name=>\\\"action\\\",-value=>\\\"someaction\\\",-override=>\\\"1\\\"}),\\n\";\r\n    print NEW \"    \\$q->textfield({-name=>\\\"example\\\",-value=>\\\"\\$g->{example}\\\",-override=>\\\"1\\\"}),\\n\";\r\n    print NEW \"    \\$q->popup_menu({-name=>\\\"popup\\\",-value=>[\\\"click me\\\",\\\"whoopie!\\\"],-default=>\\\"\\$g->{popup}\\\",-size=>\\\"10\\\",-override=>\\\"1\\\"}),\\n\";\r\n    print NEW \"    \\$q->submit(\\\"button text\\\"),\\n\";\r\n    print NEW \"    \\$q->end_form(),\\n\";\r\n    print NEW \"  ),),\\n\";\r\n    print NEW \"  \\$q->end_table(),\\n\";\r\n    print NEW \"  \\$q->hr(\\\"This is a skeleton module automatically generated by Interface.\\\");\\n\";\r\n    print NEW \"}\\n\\n\";\r\n    print NEW \"sub head{\\n\";\r\n    print NEW \"  # \\$dbh=DBI->connect(\\\"DBI:mysql:database\\\",\\\"user\\\",\\\"password\\\",{PrintError=>1,RaiseError=>1}) or\\n\";\r\n    print NEW \"  #   die \\\"Cannot connect to database : \\$DBI::errstr\\\";\\n\";\r\n    print NEW \"  print \\\"&nbsp;&#149;&nbsp;\\\",\\n\";\r\n    print NEW \"  \\$q->a({-href=>\\\"\\$g->{scriptname}?sid=\\$g->{sid}&action=YourAction\\\"},\\\"Add a new thingy\\\");\\n\";\r\n    print NEW \"  unless(\\$g->{action} eq \\\"\\\"){\\n\";\r\n    print NEW \"    print \\\"&nbsp;&#149;&nbsp;\\\",\\n\";\r\n    print NEW \"    \\$q->a({-href=>\\\"\\$g->{scriptname}?sid=\\$g->{sid}\\\"},\\\"Back\\\");\\n\";\r\n    print NEW \"  }\\n\";\r\n    print NEW \"  print \\$q->h1({-align=>\\\"center\\\"},\\\"\\$script_title\\\");\\n\";\r\n    print NEW \"}\\n\\n\";\r\n    print NEW \"sub tail{\\n  print \\$q->end_table();\\n  #\\$g->{dbh}->disconnect(); # This will close your database session\\n}\\n\\n\";\r\n    print NEW \"sub connectsql{\\n\";\r\n    print NEW \"  open(FIL,\\\"</\\$g->{sql_jahvastat}\\\")|| die\\\"cannot open \\$g->{sql_jahvastat} : \\$!\\\";\\n\";\r\n  	print NEW \"  my (\\$d,\\$u,\\$p); while(my \\$line=<FIL>){chomp(\\$line); if(\\$line ne \\\"\\\"){(\\$d,\\$u,\\$p)=split(/\\,/,\\$line); next;}}\\n\";\r\n    print NEW \"  \\$dbh=DBI->connect(\\\"DBI:mysql:\\$d\\\",\\\"\\$u\\\",\\\"\\$p\\\",\\n\";\r\n    print NEW \"      {PrintError=>1,RaiseError=>1}) or die\\\"Can not connect to database: \\$DBI::errstr\\n\\\";\\n\";\r\n    print NEW \"}\\n\\n\";\r\n\r\n\r\n\r\n    close(NEW);\r\n    system(\"webp\"); # fix permissions on script\r\n    print \"finished creating script\\n<br />\";\r\n  }else{print\"could not open : modules/$grp/$opt/$scr for writing : $!<br />\";}\r\n}\r\n','active','2010-11-24 14:12:35','dev'),('interface_sessions','0.0.0001','#!/usr/bin/perl\nmy $script_title=\"Modules\";\n\n# top menu items\nif($g->{my_roles}=~m/add/){\n  print $g->{CGI}->a({-href=>\"$g->{scriptname}?action=new\"},\"Add a new Module\");\n}\nunless($g->{action} eq \"\"){\n  print \"&nbsp;&#149;&nbsp;\", $g->{CGI}->a({-href=>\"$g->{scriptname}\"},\"Back\");\n}\nprint $g->{CGI}->h2({-align=>\"center\"},\"$script_title\");\n\n# run function for selected action\nunless(defined($g->{action}) ){view();}\n  elsif($g->{action} eq \"assign\"){access_editor();}\n  elsif($g->{action} eq \"modify_access\"){modify_group_access();}\n  elsif($g->{action} eq \"new\"){new();}\n  elsif($g->{action} eq \"add\"){add();}\n  elsif($g->{action} eq \"edit\"){edit();}\n  elsif($g->{action} eq \"properties\"){properties();}\n  elsif($g->{action} eq \"update\"){update();}\n  elsif($g->{action}=~m/role/){roles();}\n  elsif($g->{action}=~m/group/){groups();}\n  # elsif($g->{action} eq \"del\"){del();}\n  else{\n    print $g->{CGI}->h2({-align=>\"center\"},\n    \"The action you have selected, $v{action}, does not exist\");\n}\n\n1; # end module\n\nsub groups{\n  print $g->{CGI}->h3({-align=>\"center\"},\"groups for $g->{name} module\");\n  my $total_groups=$g->{dbh}->selectrow_array(\"select groups from interface_modules where name=\'$g->{name}\'\");\n  if($v{action} eq \"delete_group\"){\n    print \"deleting \'$g->{group}\' group from $g->{name} module...<br />\";\n    $total_groups=~s/$g->{group}//; \n    $total_groups=~s/\\,\\,/\\,/; \n    $total_groups=~s/^\\,+//g; $total_groups=~s/\\,+$//g;\n    $g->{dbh}->do(\"update interface_modules set groups=\\\"$total_groups\\\" where name=\'$g->{name}\'\");\n  }\n  elsif($g->{action} eq \"add_group\"){\n    # add group\n    print \"adding \'$g->{group}\' group to $g->{name} module...<br />\";\n    if($total_groups ne \"\"){$total_groups=$total_groups.\"\\,\";}\n    $total_groups=$total_groups.\"$g->{group}\";\n    $g->{dbh}->do(\"update interface_modules set groups=\\\"$total_groups\\\" where name=\'$g->{name}\'\");\n  }\n  # print \"&nbsp;&#149;&nbsp;\",\n  # $g->{CGI}->a({-href=>\"\"},\"add a new group\");\n  # print \"roles: $total_groups<br />\";\n  my @total_groups=split(/\\,/,$total_groups); my $bg=$g->{bgcolor};\n  print $g->{CGI}->start_table({-cols=>\"2\",-align=>\"center\",-width=>\"70%\"}),\n  $g->{CGI}->Tr({-style=>\"background-color: $bg\"},\n    $g->{CGI}->th({-align=>\"left\"},\"groups\"),\n    $g->{CGI}->th({-align=>\"left\"},\"action\"),\n  );\n  foreach $group(@total_groups){\n    if($bg eq $v{bgcolor}){$bg=\"white\";}elsif($bg eq \"white\"){$bg=$g->{bgcolor};}\n    print $g->{CGI}->Tr({-style=>\"background-color: $bg\"},$g->{CGI}->td(\n      \"$group \"),\n      $g->{CGI}->td($g->{CGI}->a({-href=>\"$g->{scriptname}?action=delete_group&group=$group&name=$g->{name}\"},\"delete\"),\n    ));\n  }\n  print $g->{CGI}->start_form({-method=>\"get\",-action=>\"$g->{scriptname}\",-id=>\"id\"}),\n  $g->{CGI}->hidden({-name=>\"action\",-value=>\"add_group\",-override=>\"1\"}),\n  $g->{CGI}->hidden({-name=>\"name\",-value=>\"$g->{name}\"}),\n  $g->{CGI}->Tr(\n    $g->{CGI}->td(\n      $g->{CGI}->textfield({-name=>\"group\",-id=>\"input-focus\"}),\n    ),\n    $g->{CGI}->td(\n      $g->{CGI}->submit(\"Add Group\"),\n    ),\n  ),\n  $g->{CGI}->end_table();\n}\n\nsub roles{\n  print $g->{CGI}->h3({-align=>\"center\"},\"roles for $g->{name} module\");\n  my $total_roles=$g->{dbh}->selectrow_array(\"select roles from interface_modules where name=\'$g->{name}\'\");\n  if($v{action} eq \"delete_role\"){\n    print \"deleting \'$g->{role}\' role from $g->{name} module...<br />\";\n    $total_roles=~s/$g->{role}//; \n    $total_roles=~s/\\,\\,/\\,/; \n    $total_roles=~s/^\\,+//g; $total_roles=~s/\\,+$//g;\n    $g->{dbh}->do(\"update interface_modules set roles=\\\"$total_roles\\\" where name=\'$g->{name}\'\");\n  }\n  elsif($g->{action} eq \"add_role\"){\n    # add role\n    print \"adding \'$g->{role}\' role to $g->{name} module...<br />\";\n    if($total_roles ne \"\"){$total_roles=$total_roles.\"\\,\";}\n    $total_roles=$total_roles.\"$g->{role}\";\n    $g->{dbh}->do(\"update interface_modules set roles=\\\"$total_roles\\\" where name=\'$g->{name}\'\");\n  }\n  # print \"&nbsp;&#149;&nbsp;\",\n  # $g->{CGI}->a({-href=>\"\"},\"add a new role\");\n  # print \"roles: $total_roles<br />\";\n  my @total_roles=split(/\\,/,$total_roles); my $bg=$g->{bgcolor};\n  print $g->{CGI}->start_table({-cols=>\"2\",-align=>\"center\",-width=>\"70%\"}),\n  $g->{CGI}->Tr({-style=>\"background-color: $bg\"},\n    $g->{CGI}->th({-align=>\"left\"},\"roles\"),\n    $g->{CGI}->th({-align=>\"left\"},\"action\"),\n  );\n  foreach $role(@total_roles){\n    if($bg eq $g->{bgcolor}){$bg=\"white\";}elsif($bg eq \"white\"){$bg=$g->{bgcolor};}\n    print $g->{CGI}->Tr({-style=>\"background-color: $bg\"},$g->{CGI}->td(\n      \"$role \"),\n      $g->{CGI}->td($g->{CGI}->a({-href=>\"$g->{scriptname}?action=delete_role&role=$role&name=$g->{name}\"},\"delete\"),\n    ));\n  }\n  print $g->{CGI}->start_form({-method=>\"get\",-action=>\"$g->{scriptname}\",-id=>\"id\"}),\n  $g->{CGI}->hidden({-name=>\"action\",-value=>\"add_role\",-override=>\"1\"}),\n  $g->{CGI}->hidden({-name=>\"name\",-value=>\"$g->{name}\"}),\n  $g->{CGI}->Tr(\n    $g->{CGI}->td(\n      $g->{CGI}->textfield({-name=>\"role\",-id=>\"input-focus\"}),\n    ),\n    $g->{CGI}->td(\n      $g->{CGI}->submit(\"Add Role\"),\n    ),\n  ),\n  $g->{CGI}->end_table();\n}\n\nsub modify_group_access{\n  $sth=$g->{dbh}->do(\"update interface_module_users set $g->{name}=\\\"false\\\"\");\n  print \"<br />$g->{name} adding users: \";\n  for $usertoadd (sort keys %v){\n  if($usertoadd=~m/^u_/){\n      $usertoadd=substr($usertoadd,2);\n      print \"$usertoadd \";\n      # sql to add each iterated user to group\n      $sth=$g->{dbh}->do(\"update interface_module_users set $g->{name}=\\\"true\\\" where username=\\\"$usertoadd\\\"\");\n    }\n  }\n  print \"<br />\";\n  access_editor();\n}\n\nsub access_editor{\n  $sth=$g->{dbh}->prepare(\"select username,lname,fname,mi,suffix,service from interface_users order by username\"); $sth->execute();\n  my $modtitle=$v{name}; $modtitle=~s/\\_/ /; $modtitle=~s/\\_/ /;\n  print $g->{CGI}->h4(\"Checked users have access to the \'$modtitle\' module.\"),\n  \"<div style=\\\"top: 140; left: 0; width: 50%; height: 300px; overflow: scroll;\\\">\",\n  $g->{CGI}->start_form({-method=>\"post\",-action=>\"$g->{scriptname}\"}),\n  $g->{CGI}->hidden({-name=>\"action\",-value=>\"modify_access\",-override=>\"1\"}),\n  $g->{CGI}->hidden({-name=>\"name\",-value=>\"$g->{name}\",-override=>1}),\n  $g->{CGI}->start_table({-align=>\"right\",-cols=>2,-cellspacing=>0,-cellpadding=>0,-border=>0,-width=>\"100%\"});\n  my $grey=0;\n  while(my($u,$last,$first,$mi,$suffix,$service)=$sth->fetchrow_array()){\n    my $access=$g->{dbh}->selectrow_array(\"select $g->{name} from interface_module_users where username=\\\"$u\\\"\");\n    if($grey==0){print \"<Tr bgcolor=\\\"#fff0ff\\\">\"; ++$grey;}else{print \"<Tr>\"; --$grey;}\n    if($access eq \"true\"){\n      print \n      $g->{CGI}->td({-width=>\"20%\"},\"&nbsp;\"),\n      $g->{CGI}->td(\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=checkbox name=\\\"u_$u\\\" checked>   \",\n        $g->{CGI}->a({-href=>\"$g->{scriptname}?chmod=powernet_dev_users&action=edit&euname=$u\"},\"$last, $first $mi $suffix\"),\n      ); # $u\"),\n        # $g->{CGI}->td(\"&nbsp;$last, $first $mi $suffix\"),\n	# $g->{CGI}->td(\"$service\");\n    }\n    else{\n      print \n      $g->{CGI}->td(\"&nbsp;\"),\n      $g->{CGI}->td(\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=checkbox name=\\\"u_$u\\\" unchecked>   \",\n        $g->{CGI}->a({-href=>\"$g->{scriptname}?chmod=powernet_dev_users&action=edit&euname=$u\"},\"$last, $first $mi $suffix\"),\n      ); # $u\"),\n            # $g->{CGI}->td(\"&nbsp;$last, $first $mi $suffix\"),\n	    # $g->{CGI}->td(\"$service\");\n    }\n    print \"</Tr>\\n\";\n  }\n  print $g->{CGI}->end_table(),\n  \"&nbsp;<br /><br /><center>\",\"</div>\",\n  \"<div style=\\\"position: absolute; top: 140; left: 50%; width: 50%; padding-left: 4px; padding-right: 4px; height: 300px;\\\">\",\n  $g->{CGI}->h4({-align=>\"left\"},\"To grant/deny user module access, select a user and then click the \'Update Access List\' button.\"),\n  $g->{CGI}->submit(\"Update Access List\"),\"</center>\",\n  $g->{CGI}->end_table(),$g->{CGI}->end_form(),\n  \"</div>\";\n  # print \"<div style=\\\"position: absolute; top: 140; left: 50%; width: 50%; height: 300px;\\\">\",\n  # $g->{CGI}->h3({-align=>\"center\"},\"To enter a specific user enter username here:\"),\n  # $g->{CGI}->start_table({-align=>\"center\",-cols=>1,-cellspacing=>0,-cellpadding=>0,-border=>1}),\n  # $g->{CGI}->start_form({-method=>\"post\",-action=>\"$v{scriptname}\"}),\n  # $g->{CGI}->hidden({-name=>\"name\",-value=>\"$v{name}\",-override=>1}),\n  # $g->{CGI}->hidden({-name=>\"action\",-value=>\"finduser\"}),\n  # $g->{CGI}->Tr($g->{CGI}->td(\n  #  $g->{CGI}->textfield({-name=>\"eusername\",-value=>\"$v{eusername}\",-override=>\"1\"}),\n  #  $g->{CGI}->submit(\"search\"),\n  #),),\n  #$g->{CGI}->end_form(),\n  #$g->{CGI}->end_table(),\n  #\"</div>\";\n}\n\nsub add{\n  print \"adding $g->{name} $g->{title}<br />\";\n  my($grp,$scr)=split(/\\_/,lc($v{name}));\n  unless(-d \"modules/$grp\"){\n    print \"creating path: modules/$grp<br />\";\n    mkdir \"modules/$grp\";\n  }\n  unless(-e \"modules/$grp/$scr\\.pl\"){\n    print \"creating empty module: modules/$grp/$scr\\.pl<br />\";\n    skeleton($grp,$scr);\n  }\n  else{\n    print \"I see your $scr\\.pl already exists...<br />\";\n  }\n  $v{name}=lc($v{name});\n  $g->{dbh}->do(\"insert into interface_modules values(\'$g->{name}\',\'$g->{title}\',NULL,NULL)\");\n  $g->{dbh}->do(\"alter table interface_module_users add column $g->{name} varchar(50)\");\n  $g->{dbh}->do(\"update interface_module_users set $g->{name}=\'true\' where username=\'$g->{username}\'\");\n  view();\n}\n\nsub update{\n  # actually move module to it\'s new home...\n  if($v{name} ne $v{oldname}){\n    my ($grp,$opt,$scr)=split(/\\_/,lc($v{oldname}));\n    if(-d \"modules/$grp/$opt\"){\n      if(-e \"modules/$grp/$opt/$scr\\.pl\"){\n        print \"modules/$grp/$opt/$scr\\.pl exists...<br />\";\n        my($ngrp,$nopt,$nscr)=split(/\\_/,lc($v{name}));\n        system(\"mkdir modules/$ngrp/$nopt/\");\n        system(\"mv modules/$grp/$opt/$scr\\.pl modules/$ngrp/$nopt/$nscr\\.pl\");\n        if(-e \"modules/$ngrp/$nopt/$nscr\\.pl\"){\n          print \"move to $ngrp/$nopt/$nscr successful! :)<br />\";\n        }\n        else{\n          print \"moving $grp/$opt/$scr to $ngrp/$nopt/$nscr failed! :(<br />\";\n        }\n      }else{print\"modules/$grp/$opt/$scr doesn\\\'t exist...<br />\";}\n    }else{print\"modules/$grp/$opt doesn\\\'t exist<br />\";}\n  }\n  $g->{dbh}->do(\"alter table interface_module_users drop column $g->{oldname}\");\n  $g->{dbh}->do(\"delete from interface_modules where name=\\\"$g->{oldname}\\\"\");\n  add();\n}\n\n# sub del{\n  # my($grp,$opt,$scr)=split(/\\_/,lc($v{name}));\n  # print \"deleting modules/$grp/$opt/$scr\\.pl...\";\n  # system(\"rm modules/$grp/$opt/$scr\\.pl\");\n  # unless(-e \"modules/$grp/$opt/$scr\\.pl\"){print \"successful.\";}\n  # else{print\"failed.<br />\";}\n  # $g->{dbh}->do(\"alter table module_users drop column $v{name}\");\n  # $g->{dbh}->do(\"delete from modules where name=\\\"$v{name}\\\"\");\n  # view();\n# }\n\nsub edit{\n  print \"\\n<!-- edit start -->\\n\";\n  my($name,$version,$source,$state); my $filepath=$g->{name}.\"\\.pl\"; $filepath=~s/\\_/\\//g;\n  if($g->{function} eq \"\"){$g->{function}=\"update\";\n    print \"<!-- function was not set.  Set function to \'update\' -->\\n\";\n	# initially entering the editor $g->{name} has been passed with the $g->{action} set to \'edit\'\n	# change \'edit\' to \'save\' and then get the latest code from the database and load it into the editor.\n	($name,$version,$source,$state)=$g->{dbh}->selectrow_array(\"select name,version,source,state from interface_module_source where name=\'$g->{name}\' and state=\'active\'\");\n	unless($name eq \"$g->{name}\"){\n      print \"<!-- name ($name) did not match passed name var: \'$g->{name}\' -->\\n\";\n	  # there is no database entry for the module chosen.  Create one on the fly for existing modules.\n	  $name=\"$g->{name}\"; $version=\"0.0.0001\"; $stamp=$g->{dbh}->selectrow_array(\"select now()\"); $state=\'active\';\n	  print $g->{CGI}->p(\"No source was present in database.  I am importing $name from $g->{modulepath}.\"),\"\\n\";\n	  if(-e \"$g->{modulepath}\"){\n		print $g->{CGI}->p(\"$g->{modulepath} exist... importing source...\"),\"\\n\";\n        open(IN,\"<$g->{modulepath}\") or die \"I cannot open $name : $!\";\n		  while(my $line=<IN>){$source.=$line;} close(IN);\n	    $sth=$g->{dbh}->prepare(\"insert into interface_module_source values(?,?,?,?,\'now()\',\'$g->{username}\')\");\n	    $sth->execute($name,$version,$source,$state) || die $g->{dbh}->errstr;\n	    $g->{function}=\"update\";\n	  }\n	  else{print $g->{CGI}->p(\"I cannot load the source from the database, and the module source does not exist.\"),\"\\n\"; exit;}\n	}\n  }\n  elsif($g->{function} eq \"update\"){\n	# update the datebase based on the modified form that passed data here.\n	$sth=$g->{dbh}->prepare(\"update interface_module_source set version=?,source=?,state=?,stamp=\'now()\',modifiedby=\'$g->{username}\' where name=\'$g->{name}\'\");\n	$sth->execute($g->{version},$g->{source},$g->{state});\n	# update actual file to reflect changes\n    my $filepath=$g->{name}.\"\\.pl\"; $filepath=~s/\\_/\\//g;\n    open(OUT,\">$g->{modulepath}\") || die \"Cannot open module, $g->{modulepath} for writing :$!\";\n    print OUT \"$g->{source}\";\n    close(OUT);\n  }\n  elsif($g->{function} eq \"upload\"){upload();}\n  else{print $g->{CGI}->p(\"The function you have selected does not exist.\"); exit;}\n\n  # set webvars from what we get elsewhere if need be.\n  if($g->{name} eq \"\"){$g->{name}=$name;}\n  if($g->{version} eq \"\"){$g->{version}=$version;}\n  if($g->{source} eq \"\"){$g->{source}=$source;}\n  if($g->{state} eq \"\"){$g->{state}=$state;}\n  if($g->{stamp} eq \"\"){$g->{stamp}=$stamp;}\n  if($g->{published} eq \"\"){$g->{published}=$published;}\n  if($g->{lastmodified} eq \"\"){$g->{lastmodified}=$lastmodified;}\n  if($g->{modifiedby} eq \"\"){$g->{modifiedby}=$modifiedby;}\n\n  # put editor up on screen with the latest data...\n  print $g->{CGI}->start_form({-method=>\"post\",-action=>\"$g->{scriptname}\"}),\n    \"\\n<table comment=\\\"table for module editor\\\">\\n<tr>\\n\",\n    \"<td>\",$g->{CGI}->label({-for=>\"name\"},\"name of module\"),\"<br />\\n\",\n    $g->{CGI}->textfield({-name=>\"name\",-value=>\"$g->{name}\",-size=>\"20\",-override=>\"1\"}),\"</td>\\n\",\n    $g->{CGI}->hidden({-name=>\"action\",-value=>\"$g->{action}\",-override=>\"1\"}),\n    $g->{CGI}->hidden({-name=>\"function\",-value=>\"$g->{function}\",-override=>\"1\"}),\n    \"<td>\",$g->{CGI}->label({-for=>\"version\"},\"module version\"),\"<br />\\n\",\n    $g->{CGI}->textfield({-name=>\"version\",-value=>\"$g->{version}\",-override=>\"1\"}),\"</td>\\n\",\n    \"<td>\",$g->{CGI}->label({-for=>\"state\"},\"state of module\"),\"<br />\\n\",\n    $g->{CGI}->popup_menu({-name=>\"state\",-size=>\"1\",-value=>[\"\",\"active\",\"debug\"],-default=>\"$g->{state}\",-override=>\"1\"}),\"</td>\\n\",\n    # stamp & modifiedby are automatically updated without any interaction...\n    \"<td>\",$g->{CGI}->submit(\"$g->{function}\"),\"</td>\\n</tr>\\n</table>\\n\",\n    $g->{CGI}->textarea({-name=>\"source\",value=>\"$g->{source}\",-override=>\"1\"}),\n  $g->{CGI}->end_form(),\"\\n\";\n  #print \"\\nfunction: \'$g->{function}\' action: \'$g->{action}\' title: \'$g->{title}\' \\n\";\n\n  #sub upload{\n  #  if($g->{id} eq \"\"){print \"Upload parameters where in an unacceptible format.<hr />\\n\"; return;}\n#	  my $textdata;\n#	  unless(-d \"$docs_upload/$g->{id}\"){system(\"mkdir $docs_upload/$g->{id}\"); print \"\\ncreating $docs_upload/$g->{id} folder...<br />\\n\";}\n#	  my($fn,$ext)=split(/\\./,$g->{uploadfilename}); $ext=lc($ext);\n#	  if($ext=~m/jpg/ or $ext=~m/jpeg/ or $ext=~m/gif/ or $ext=~m/png/){\n#	    system(\"mv $g->{uploaddir}/$g->{uploadfilename} $docs_upload/$g->{id}/$g->{uploadfilename}\");\n #     print \"<b>$g->{uploadfilename}</b> has been uploaded to <b>$docs_upload/$g->{id}/$g->{uploadfilename}</b> directory.<br />\\n\";\n  #    if($g->{type} eq \"text\"){\n   #     print \"prepared text image insertion token.<br />\\n\"; $g->{data}.=\"\\n\\[image\\: \\\"$g->{uploadfilename}\\\" caption: \\\"\\\" location: \\\"\\\" \\]\\n\";\n    #  }\n     # elsif($g->{type} eq \"html\"){\n#        print \"prepared html image insertion token.<br />\\n\"; $g->{data}.=\"\\n<img src=\\\"/docs/$g->{id}/$g->{uploadfilename}\\\" /><br \\/>\\n\";\n#      }\n#      elsif($g->{type} eq \"xml\"){\n#        print \"prepared xml image insertion token.<br />\\n\";\n#        print \"<p> There is currently no XML tag for this upload type </p>\"; $g->{data}.=\"\\n<imagetag><name>$g->{uploadfilename}</name></imagetag>\\n\";\n#      }\n#      print \"inserting image insertion token into database record<br />\\n\";\n#      $sth=$g->{dbh}->prepare(\"update system set data=? where id=$g->{id}\") || die $g->{dbh}->errstr;\n#      $sth->execute($g->{data}) || die $g->{dbh}->errstr;\n#    }\n#    elsif($ext=~m/txt/){ # uploading a txt file into the editor...\n#      print \"inserting text data into database record<br />\\n\";\n#	    open(IN,\"<$g->{uploaddir}/$g->{uploadfilename}\")||die\"cannot open file for reading : $!\";\n#	    while(my $line=<IN>){chomp $line; $textdata.=\"$line\\n\";}\n#	    close(IN);\n#	    $g->{data}.=$textdata;\n#	    system(\"rm $g->{uploaddir}/$g->{uploadfilename}\");\n#      # print \"$g->{data}<br />\\n\";\n#      $sth=$g->{dbh}->prepare(\"update system set data=? where id=$g->{id}\") || die $g->{dbh}->errstr;\n#      $sth->execute($g->{data}) || die $g->{dbh}->errstr;\n#    }\n#    else{\n#	    system(\"rm $g->{uploaddir}/$g->{uploadfilename}\");\n#	    print $g->{CGI}->font({-face=>\"Arial\",-size=>\"4\",-color=>\"red\"},\"You can only upload .jpeg, .gif, .png image and .txt files.\");\n#  } }\n  print \"\\n<!-- edit end -->\\n\";\n}\n\nsub properties{\n  print\n  $g->{CGI}->h3({-align=>\"center\"},\"Editing properties of \\\"$g->{name}\\\" module.\"),\n  $g->{CGI}->start_form({-action=>\"$g->{scriptname}\",-method=>\"post\"}),\n  $g->{CGI}->hidden({-name=>\"action\",-value=>\"update\",-override=>\"1\"}),\n  $g->{CGI}->hidden({-name=>\"oldname\",-value=>\"$g->{name}\"}),\n  $g->{CGI}->start_table({-cols=>\"3\",-cellspacing=>0,-cellpadding=>0,-border=>0,-width=>\"50%\",-align=>\"center\"}),\n  $g->{CGI}->Tr({-bgcolor=>\"#fff9ff\"},\n    $g->{CGI}->td({-align=>\"right\"},\"Module Title&nbsp;&nbsp;\"),\n    $g->{CGI}->td($g->{CGI}->textfield({-name=>\"title\",-value=>\"$g->{title}\",-override=>\"1\"}),),\n  ),\n  $g->{CGI}->Tr({-bgcolor=>\"#fff9ff\"},\n    $g->{CGI}->td({-align=>\"right\"},\"Group_Option_Module&nbsp;&nbsp;\"),\n    $g->{CGI}->td($g->{CGI}->textfield({-name=>\"name\",-value=>\"$g->{name}\",-override=>\"1\"}),),\n  ),\n  $g->{CGI}->Tr({-bgcolor=>\"#fff9ff\"},$g->{CGI}->td(\" \"),$g->{CGI}->td($g->{CGI}->submit(\"Save\"),),),\n  $g->{CGI}->end_form,\n  $g->{CGI}->end_table();\n}\n\nsub new{\n  print\n  $g->{CGI}->p(\"To add a new module to DIFR you must define two things; what application group it belongs to and \",\n        \"the name of the new module.\"\n  ),\n  $g->{CGI}->p(\"<font size=+2>Group:</font> <b><em>interface</em></b> would be the group you would use for a module that would be available to core DIFR administrators while \",\n        \"<b><em>rcs</em></b> would be the name of the group for existing and new <b><em>rcs</em></b> application modules.\",\n  ),\n  $g->{CGI}->p(\"<font size=+2>Module:</font> The name of the module is the actual executable name and does not require any extension {i.e., \'.pl\'}.\",\n        \"The group and name do not contain spaces and are seperated by an underscore character, \'_\'\",\n  ),\n  $g->{CGI}->start_form({-action=>\"$g->{scriptname}\",-method=>\"get\"}),\n  $g->{CGI}->hidden({-name=>\"action\",-value=>\"add\",-override=>\"1\"}),\n  $g->{CGI}->start_table({-cols=>\"3\",-cellspacing=>0,-cellpadding=>0,-border=>0,-width=>\"50%\",-align=>\"center\"}),\n  $g->{CGI}->Tr({-bgcolor=>\"$g->{bgcolor}\"},\n    $g->{CGI}->td({-align=>\"right\"},\"Module Title&nbsp;&nbsp;\"),\n    $g->{CGI}->td($g->{CGI}->textfield({-name=>\"title\",-value=>\"$g->{title}\",-override=>\"1\"}),),\n  ),\n  $g->{CGI}->Tr({-bgcolor=>\"$g->{bgcolor}\"},\n    $g->{CGI}->td({-align=>\"right\"},\"group_module&nbsp;&nbsp;\"),\n    $g->{CGI}->td($g->{CGI}->textfield({-name=>\"name\",-value=>\"$g->{name}\",-override=>\"1\"}),),\n  ),\n  $g->{CGI}->Tr({-bgcolor=>\"$g->{bgcolor}\"},$g->{CGI}->td(\" \"),$g->{CGI}->td($g->{CGI}->submit(\"Save\"),),),\n  $g->{CGI}->end_form,\n  $g->{CGI}->end_table();\n}\n\nsub view{\n  #print \"roles: $g->{my_roles}<br />\";\n  print \n  $g->{CGI}->start_table({-cols=>\"3\",-cellspacing=>0,-cellpadding=>0,-border=>0,-width=>\"80%\",-align=>\"center\"}),\n    $g->{CGI}->Tr({-style=>\"background-color: $g->{bgcolor}\"},\n      $g->{CGI}->th(\"Group_ModuleName\"),\n      $g->{CGI}->th(\"Module Title\"),\n      $g->{CGI}->th(\"Action\"),\n    );\n  #$sth=$g->{dbh}->prepare(\"select name,title from modules where name not regexp \\\"^PowerNet_Dev\\\" order by name\"); $sth->execute();\n  $sth=$g->{dbh}->prepare(\"select name,title from interface_modules order by name\"); $sth->execute();\n  my $bg=$g->{bgcolor};\n  while(my($name,$title)=$sth->fetchrow_array()){\n    if($bg eq $g->{bgcolor}){$bg=\"white\";}elsif($bg eq \"white\"){$bg=$g->{bgcolor};}\n    print \"<tr style=\\\"background-color: $bg\\\">\",\n    $g->{CGI}->td(\"$name\"),$g->{CGI}->td(\"$title\"),\"<td>\";\n    my @roles=split(/\\,/,$g->{my_roles});\n    foreach $role(@roles){\n      print $g->{CGI}->a({-href=>\"$g->{scriptname}?action=$role&name=$name&title=$title\"},\"$role\"),\"&nbsp;\";\n    }  \n    print \"</td></tr>\";\n  }\n  print $g->{CGI}->end_table();\n}\n\nsub tail{\n  #print $g->{CGI}->end_table();\n  #$g->{dbh}->disconnect();\n}\n\nsub connectsql{\n  open(FIL,\"</$g->{sql_powernet}\")|| die\"cannot open $g->{sqlconf} : $!\";\n  my ($d,$u,$p); while(my $line=<FIL>){chomp($line); if($line ne \"\"){($d,$u,$p)=split(/\\,/,$line); next;}}\n  $dbh=DBI->connect(\"DBI:mysql:$d\",\"$u\",\"$p\",{PrintError=>1,RaiseError=>1}) or \n    die\"Can not connect to database: $DBI::errstr\\n\";\n}\n\nsub skeleton{\n  my($grp,$opt,$scr)=@_;\n  print \"in skeleton...<br />\";\n  system(\"webp\");\n  if(-e \"$mod/$grp/$opt/$scr.pl\"){}\n  if(open(NEW,\">>modules/$grp/$opt/$scr.pl\")){\n    print NEW \"#!/usr/bin/perl\\n\";\n    print NEW \"# Interface Module Skeleton\\n\";\n    print NEW \"# This is an automatically generated skeleton module for Interface -BCIV\\n\\n\";\n    print NEW \"use DBI; my \\$dbh; my \\$sth; my \\$rv; # This is for database connectivity\\n\\n\";\n    print NEW \"use CGI; my \\$g->{CGI}=new CGI;              # This is for writting object oriented modules\\n\\n\";\n    print NEW \"my \\%v=\\@ARGV;                        # This is how http vars are passed a to module\\n\";\n    print NEW \"                                      #(as arguments into a hash).\\n\\n\";\n    print NEW \"# i.e., if you have a post/get variable called fred it will be seen as \\$v{fred} to\\n\";\n    print NEW \"# the module.\\n\\n\";\n    print NEW \"my \\$script_title=\\\"$v{title}\\\";\\n\\n\";\n    print NEW \"head();\\nbody();\\ntail();\\n\\n\";\n    print NEW \"sub body{\\n\";\n    print NEW \"  # this is the function that decides what the module is supposed to do when it is called\\n\";\n    print NEW \"  # what it does is determined by the \\$v{action} variable which is set through forms like\\n\";\n    print NEW \"  # the one called view shown below...\\n\";\n    print NEW \"  if(defined(\\$g->{action})){\\n\";\n    print NEW \"    if(\\$g->{action} eq \\\"someaction\\\"){\\n\";\n    print NEW \"      # an action is typically database modification routines or a call to a function\\n\";\n    print NEW \"      # view();\\n\";\n    print NEW \"      print \\$g->{CGI}->h2({-align=>\\\"center\\\",-bgcolor=>\\\"#dddddd\\\"},\\\"\\message: \\$g->{popup}\\\"),\\n\";\n    print NEW \"    }\\n\";\n    print NEW \"    else{print\\\"the action you have chosen doesn\\\'t exist<br />\\\";}\\n\";\n    print NEW \"  }else{view();}\\n\";\n    print NEW \"}\\n\\n\";\n    print NEW \"sub view{\\n\";\n    print NEW \"  print \\$g->{CGI}->start_table({-cols=>\\\"1\\\",-border=>\\\"0\\\",-width=>\\\"100%\\\",-align=>\\\"center\\\",-cellspacing=>\\\"0\\\"}),\\n\";\n    print NEW \"  \\$g->{CGI}->Tr(\\$g->{CGI}->td(\\n\";\n    print NEW \"    \\$g->{CGI}->start_form({-action=>\\\"\\$g->{scriptname}\\\",-method=>\\\"POST\\\"}),\\n\";\n    print NEW \"    \\$g->{CGI}->hidden({-name=>\\\"sid\\\",-value=>\\\"\\$g->{sid}\\\",-override=>\\\"1\\\"}),\\n\";\n    print NEW \"    \\$g->{CGI}->hidden({-name=>\\\"action\\\",-value=>\\\"someaction\\\",-override=>\\\"1\\\"}),\\n\";\n    print NEW \"    \\$g->{CGI}->textfield({-name=>\\\"example\\\",-value=>\\\"\\$g->{example}\\\",-override=>\\\"1\\\"}),\\n\";\n    print NEW \"    \\$g->{CGI}->popup_menu({-name=>\\\"popup\\\",-value=>[\\\"click me\\\",\\\"whoopie!\\\"],-default=>\\\"\\$g->{popup}\\\",-size=>\\\"10\\\",-override=>\\\"1\\\"}),\\n\";\n    print NEW \"    \\$g->{CGI}->submit(\\\"button text\\\"),\\n\";\n    print NEW \"    \\$g->{CGI}->end_form(),\\n\";\n    print NEW \"  ),),\\n\";\n    print NEW \"  \\$g->{CGI}->end_table(),\\n\";\n    print NEW \"  \\$g->{CGI}->hr(\\\"This is a skeleton module automatically generated by Interface.\\\");\\n\";\n    print NEW \"}\\n\\n\";\n    print NEW \"sub head{\\n\";\n    print NEW \"  # \\$dbh=DBI->connect(\\\"DBI:mysql:database\\\",\\\"user\\\",\\\"password\\\",{PrintError=>1,RaiseError=>1}) or\\n\";\n    print NEW \"  #   die \\\"Cannot connect to database : \\$DBI::errstr\\\";\\n\";\n    print NEW \"  print \\\"&nbsp;&#149;&nbsp;\\\",\\n\";\n    print NEW \"  \\$g->{CGI}->a({-href=>\\\"\\$g->{scriptname}?sid=\\$g->{sid}&action=YourAction\\\"},\\\"Add a new thingy\\\");\\n\";\n    print NEW \"  unless(\\$g->{action} eq \\\"\\\"){\\n\";\n    print NEW \"    print \\\"&nbsp;&#149;&nbsp;\\\",\\n\";\n    print NEW \"    \\$g->{CGI}->a({-href=>\\\"\\$g->{scriptname}?sid=\\$g->{sid}\\\"},\\\"Back\\\");\\n\";\n    print NEW \"  }\\n\";\n    print NEW \"  print \\$g->{CGI}->h1({-align=>\\\"center\\\"},\\\"\\$script_title\\\");\\n\";\n    print NEW \"}\\n\\n\";\n    print NEW \"sub tail{\\n  print \\$g->{CGI}->end_table();\\n  #\\$g->{dbh}->disconnect(); # This will close your database session\\n}\\n\\n\";\n    print NEW \"sub connectsql{\\n\";\n    print NEW \"  open(FIL,\\\"</\\$g->{sql_jahvastat}\\\")|| die\\\"cannot open \\$g->{sql_jahvastat} : \\$!\\\";\\n\";\n  	print NEW \"  my (\\$d,\\$u,\\$p); while(my \\$line=<FIL>){chomp(\\$line); if(\\$line ne \\\"\\\"){(\\$d,\\$u,\\$p)=split(/\\,/,\\$line); next;}}\\n\";\n    print NEW \"  \\$dbh=DBI->connect(\\\"DBI:mysql:\\$d\\\",\\\"\\$u\\\",\\\"\\$p\\\",\\n\";\n    print NEW \"      {PrintError=>1,RaiseError=>1}) or die\\\"Can not connect to database: \\$DBI::errstr\\n\\\";\\n\";\n    print NEW \"}\\n\\n\";\n\n    close(NEW);\n    system(\"webp\"); # fix permissions on script\n    print \"finished creating script\\n<br />\";\n  }else{print\"could not open : modules/$grp/$opt/$scr for writing : $!<br />\";}\n}\n','active','0000-00-00 00:00:00','dev'),('rcs_personnel','0.0.0001','#!/usr/bin/perl\r\n# asdf\r\nmy $script_title=\"Modules\";\r\n\r\n# top menu items\r\nif($g->{my_roles}=~m/add/){\r\n  print $g->{CGI}->a({-href=>\"$g->{scriptname}?action=new\"},\"Add a new Module\");\r\n}\r\nunless($g->{action} eq \"\"){\r\n  print \"&nbsp;&#149;&nbsp;\", $g->{CGI}->a({-href=>\"$g->{scriptname}\"},\"Back\");\r\n}\r\nprint $g->{CGI}->h2({-align=>\"center\"},\"$script_title\");\r\n\r\n# run function for selected action\r\nunless(defined($g->{action}) ){view();}\r\n  elsif($g->{action} eq \"assign\"){access_editor();}\r\n  elsif($g->{action} eq \"modify_access\"){modify_group_access();}\r\n  elsif($g->{action} eq \"new\"){new();}\r\n  elsif($g->{action} eq \"add\"){add();}\r\n  elsif($g->{action} eq \"edit\"){edit();}\r\n  elsif($g->{action} eq \"properties\"){properties();}\r\n  elsif($g->{action} eq \"update\"){update();}\r\n  elsif($g->{action}=~m/role/){roles();}\r\n  elsif($g->{action}=~m/group/){groups();}\r\n  elsif($g->{action} eq \"delete\"){del();}\r\n  else{\r\n    print $g->{CGI}->h2({-align=>\"center\"},\r\n    \"The action you have selected, $g->{action}, does not exist\");\r\n}\r\n\r\n1; # end module\r\n\r\nsub groups{\r\n  print $g->{CGI}->h3({-align=>\"center\"},\"groups for $g->{name} module\");\r\n  my $total_groups=$g->{dbh}->selectrow_array(\"select groups from interface_modules where name=\'$g->{name}\'\");\r\n  if($v{action} eq \"delete_group\"){\r\n    print \"deleting \'$g->{group}\' group from $g->{name} module...<br />\";\r\n    $total_groups=~s/$g->{group}//; \r\n    $total_groups=~s/\\,\\,/\\,/; \r\n    $total_groups=~s/^\\,+//g; $total_groups=~s/\\,+$//g;\r\n    $g->{dbh}->do(\"update interface_modules set groups=\\\"$total_groups\\\" where name=\'$g->{name}\'\");\r\n  }\r\n  elsif($g->{action} eq \"add_group\"){\r\n    # add group\r\n    print \"adding \'$g->{group}\' group to $g->{name} module...<br />\";\r\n    if($total_groups ne \"\"){$total_groups=$total_groups.\"\\,\";}\r\n    $total_groups=$total_groups.\"$g->{group}\";\r\n    $g->{dbh}->do(\"update interface_modules set groups=\\\"$total_groups\\\" where name=\'$g->{name}\'\");\r\n  }\r\n  # print \"&nbsp;&#149;&nbsp;\",\r\n  # $g->{CGI}->a({-href=>\"\"},\"add a new group\");\r\n  # print \"roles: $total_groups<br />\";\r\n  my @total_groups=split(/\\,/,$total_groups); my $bg=$g->{bgcolor};\r\n  print $g->{CGI}->start_table({-cols=>\"2\",-align=>\"center\",-width=>\"70%\"}),\r\n  $g->{CGI}->Tr({-style=>\"background-color: $bg\"},\r\n    $g->{CGI}->th({-align=>\"left\"},\"groups\"),\r\n    $g->{CGI}->th({-align=>\"left\"},\"action\"),\r\n  );\r\n  foreach $group(@total_groups){\r\n    if($bg eq $v{bgcolor}){$bg=\"white\";}elsif($bg eq \"white\"){$bg=$g->{bgcolor};}\r\n    print $g->{CGI}->Tr({-style=>\"background-color: $bg\"},$g->{CGI}->td(\r\n      \"$group \"),\r\n      $g->{CGI}->td($g->{CGI}->a({-href=>\"$g->{scriptname}?action=delete_group&group=$group&name=$g->{name}\"},\"delete\"),\r\n    ));\r\n  }\r\n  print $g->{CGI}->start_form({-method=>\"get\",-action=>\"$g->{scriptname}\",-id=>\"id\"}),\r\n  $g->{CGI}->hidden({-name=>\"action\",-value=>\"add_group\",-override=>\"1\"}),\r\n  $g->{CGI}->hidden({-name=>\"name\",-value=>\"$g->{name}\"}),\r\n  $g->{CGI}->Tr(\r\n    $g->{CGI}->td(\r\n      $g->{CGI}->textfield({-name=>\"group\",-id=>\"input-focus\"}),\r\n    ),\r\n    $g->{CGI}->td(\r\n      $g->{CGI}->submit(\"Add Group\"),\r\n    ),\r\n  ),\r\n  $g->{CGI}->end_table();\r\n}\r\n\r\nsub roles{\r\n  print $g->{CGI}->h3({-align=>\"center\"},\"roles for $g->{name} module\");\r\n  my $total_roles=$g->{dbh}->selectrow_array(\"select roles from interface_modules where name=\'$g->{name}\'\");\r\n  if($v{action} eq \"delete_role\"){\r\n    print \"deleting \'$g->{role}\' role from $g->{name} module...<br />\";\r\n    $total_roles=~s/$g->{role}//; \r\n    $total_roles=~s/\\,\\,/\\,/; \r\n    $total_roles=~s/^\\,+//g; $total_roles=~s/\\,+$//g;\r\n    $g->{dbh}->do(\"update interface_modules set roles=\\\"$total_roles\\\" where name=\'$g->{name}\'\");\r\n  }\r\n  elsif($g->{action} eq \"add_role\"){\r\n    # add role\r\n    print \"adding \'$g->{role}\' role to $g->{name} module...<br />\";\r\n    if($total_roles ne \"\"){$total_roles=$total_roles.\"\\,\";}\r\n    $total_roles=$total_roles.\"$g->{role}\";\r\n    $g->{dbh}->do(\"update interface_modules set roles=\\\"$total_roles\\\" where name=\'$g->{name}\'\");\r\n  }\r\n  # print \"&nbsp;&#149;&nbsp;\",\r\n  # $g->{CGI}->a({-href=>\"\"},\"add a new role\");\r\n  # print \"roles: $total_roles<br />\";\r\n  my @total_roles=split(/\\,/,$total_roles); my $bg=$g->{bgcolor};\r\n  print $g->{CGI}->start_table({-cols=>\"2\",-align=>\"center\",-width=>\"70%\"}),\r\n  $g->{CGI}->Tr({-style=>\"background-color: $bg\"},\r\n    $g->{CGI}->th({-align=>\"left\"},\"roles\"),\r\n    $g->{CGI}->th({-align=>\"left\"},\"action\"),\r\n  );\r\n  foreach $role(@total_roles){\r\n    if($bg eq $g->{bgcolor}){$bg=\"white\";}elsif($bg eq \"white\"){$bg=$g->{bgcolor};}\r\n    print $g->{CGI}->Tr({-style=>\"background-color: $bg\"},$g->{CGI}->td(\r\n      \"$role \"),\r\n      $g->{CGI}->td($g->{CGI}->a({-href=>\"$g->{scriptname}?action=delete_role&role=$role&name=$g->{name}\"},\"delete\"),\r\n    ));\r\n  }\r\n  print $g->{CGI}->start_form({-method=>\"get\",-action=>\"$g->{scriptname}\",-id=>\"id\"}),\r\n  $g->{CGI}->hidden({-name=>\"action\",-value=>\"add_role\",-override=>\"1\"}),\r\n  $g->{CGI}->hidden({-name=>\"name\",-value=>\"$g->{name}\"}),\r\n  $g->{CGI}->Tr(\r\n    $g->{CGI}->td(\r\n      $g->{CGI}->textfield({-name=>\"role\",-id=>\"input-focus\"}),\r\n    ),\r\n    $g->{CGI}->td(\r\n      $g->{CGI}->submit(\"Add Role\"),\r\n    ),\r\n  ),\r\n  $g->{CGI}->end_table();\r\n}\r\n\r\nsub modify_group_access{\r\n  $sth=$g->{dbh}->do(\"update interface_module_users set $g->{name}=\\\"false\\\"\");\r\n  print \"<br />$g->{name} adding users: \";\r\n  for $usertoadd (sort keys %v){\r\n  if($usertoadd=~m/^u_/){\r\n      $usertoadd=substr($usertoadd,2);\r\n      print \"$usertoadd \";\r\n      # sql to add each iterated user to group\r\n      $sth=$g->{dbh}->do(\"update interface_module_users set $g->{name}=\\\"true\\\" where username=\\\"$usertoadd\\\"\");\r\n    }\r\n  }\r\n  print \"<br />\";\r\n  access_editor();\r\n}\r\n\r\nsub access_editor{\r\n  $sth=$g->{dbh}->prepare(\"select username,lname,fname,mi,suffix,service from interface_users order by username\"); $sth->execute();\r\n  my $modtitle=$v{name}; $modtitle=~s/\\_/ /; $modtitle=~s/\\_/ /;\r\n  print $g->{CGI}->h4(\"Checked users have access to the \'$modtitle\' module.\"),\r\n  \"<div style=\\\"top: 140; left: 0; width: 50%; height: 300px; overflow: scroll;\\\">\",\r\n  $g->{CGI}->start_form({-method=>\"post\",-action=>\"$g->{scriptname}\"}),\r\n  $g->{CGI}->hidden({-name=>\"action\",-value=>\"modify_access\",-override=>\"1\"}),\r\n  $g->{CGI}->hidden({-name=>\"name\",-value=>\"$g->{name}\",-override=>1}),\r\n  $g->{CGI}->start_table({-align=>\"right\",-cols=>2,-cellspacing=>0,-cellpadding=>0,-border=>0,-width=>\"100%\"});\r\n  my $grey=0;\r\n  while(my($u,$last,$first,$mi,$suffix,$service)=$sth->fetchrow_array()){\r\n    my $access=$g->{dbh}->selectrow_array(\"select $g->{name} from interface_module_users where username=\\\"$u\\\"\");\r\n    if($grey==0){print \"<Tr bgcolor=\\\"#fff0ff\\\">\"; ++$grey;}else{print \"<Tr>\"; --$grey;}\r\n    if($access eq \"true\"){\r\n      print \r\n      $g->{CGI}->td({-width=>\"20%\"},\"&nbsp;\"),\r\n      $g->{CGI}->td(\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=checkbox name=\\\"u_$u\\\" checked>   \",\r\n        $g->{CGI}->a({-href=>\"$g->{scriptname}?chmod=interface_users&action=edit&euname=$u\"},\"$last, $first $mi $suffix\"),\r\n      ); # $u\"),\r\n        # $g->{CGI}->td(\"&nbsp;$last, $first $mi $suffix\"),\r\n	# $g->{CGI}->td(\"$service\");\r\n    }\r\n    else{\r\n      print \r\n      $g->{CGI}->td(\"&nbsp;\"),\r\n      $g->{CGI}->td(\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=checkbox name=\\\"u_$u\\\" unchecked>   \",\r\n        $g->{CGI}->a({-href=>\"$g->{scriptname}?chmod=powernet_dev_users&action=edit&euname=$u\"},\"$last, $first $mi $suffix\"),\r\n      ); # $u\"),\r\n            # $g->{CGI}->td(\"&nbsp;$last, $first $mi $suffix\"),\r\n	    # $g->{CGI}->td(\"$service\");\r\n    }\r\n    print \"</Tr>\\n\";\r\n  }\r\n  print $g->{CGI}->end_table(),\r\n  \"&nbsp;<br /><br /><center>\",\"</div>\",\r\n  \"<div style=\\\"position: absolute; top: 140; left: 50%; width: 50%; padding-left: 4px; padding-right: 4px; height: 300px;\\\">\",\r\n  $g->{CGI}->h4({-align=>\"left\"},\"To grant/deny user module access, select a user and then click the \'Update Access List\' button.\"),\r\n  $g->{CGI}->submit(\"Update Access List\"),\"</center>\",\r\n  $g->{CGI}->end_table(),$g->{CGI}->end_form(),\r\n  \"</div>\";\r\n  # print \"<div style=\\\"position: absolute; top: 140; left: 50%; width: 50%; height: 300px;\\\">\",\r\n  # $g->{CGI}->h3({-align=>\"center\"},\"To enter a specific user enter username here:\"),\r\n  # $g->{CGI}->start_table({-align=>\"center\",-cols=>1,-cellspacing=>0,-cellpadding=>0,-border=>1}),\r\n  # $g->{CGI}->start_form({-method=>\"post\",-action=>\"$v{scriptname}\"}),\r\n  # $g->{CGI}->hidden({-name=>\"name\",-value=>\"$v{name}\",-override=>1}),\r\n  # $g->{CGI}->hidden({-name=>\"action\",-value=>\"finduser\"}),\r\n  # $g->{CGI}->Tr($g->{CGI}->td(\r\n  #  $g->{CGI}->textfield({-name=>\"eusername\",-value=>\"$v{eusername}\",-override=>\"1\"}),\r\n  #  $g->{CGI}->submit(\"search\"),\r\n  #),),\r\n  #$g->{CGI}->end_form(),\r\n  #$g->{CGI}->end_table(),\r\n  #\"</div>\";\r\n}\r\n\r\nsub add{\r\n  print \"adding $g->{name} $g->{title}<br />\";\r\n  my($grp,$scr)=split(/\\_/,lc($g->{name}));\r\n  unless(-d \"modules/$grp\"){\r\n    print \"creating path: modules/$grp<br />\";\r\n    mkdir \"modules/$grp\";\r\n  }\r\n  unless(-e \"modules/$grp/$scr\\.pl\"){\r\n    print \"creating empty module: modules/$grp/$scr\\.pl<br />\";\r\n    skeleton($grp,$scr);\r\n  }\r\n  else{\r\n    print \"I see your $scr\\.pl already exists...<br />\";\r\n  }\r\n  $g->{name}=lc($g->{name});\r\n  $g->{dbh}->do(\"insert into interface_modules values(\'$g->{name}\',\'$g->{title}\',NULL,NULL)\");\r\n  $g->{dbh}->do(\"alter table interface_module_users add column $g->{name} varchar(50)\");\r\n  $g->{dbh}->do(\"update interface_module_users set $g->{name}=\'true\' where username=\'$g->{sys_username}\'\");\r\n  view();\r\n}\r\n\r\nsub update{\r\n  # actually move module to it\'s new home...\r\n  if($g->{name} ne $g->{oldname}){\r\n    my ($grp,$opt,$scr)=split(/\\_/,lc($g->{oldname}));\r\n    if(-d \"modules/$grp/$opt\"){\r\n      if(-e \"modules/$grp/$opt/$scr\\.pl\"){\r\n        print \"modules/$grp/$opt/$scr\\.pl exists...<br />\";\r\n        my($ngrp,$nopt,$nscr)=split(/\\_/,lc($v{name}));\r\n        system(\"mkdir modules/$ngrp/$nopt/\");\r\n        system(\"mv modules/$grp/$opt/$scr\\.pl modules/$ngrp/$nopt/$nscr\\.pl\");\r\n        if(-e \"modules/$ngrp/$nopt/$nscr\\.pl\"){\r\n          print \"move to $ngrp/$nopt/$nscr successful! :)<br />\";\r\n        }\r\n        else{\r\n          print \"moving $grp/$opt/$scr to $ngrp/$nopt/$nscr failed! :(<br />\";\r\n        }\r\n      }else{print\"modules/$grp/$opt/$scr doesn\\\'t exist...<br />\";}\r\n    }else{print\"modules/$grp/$opt doesn\\\'t exist<br />\";}\r\n  }\r\n  $g->{dbh}->do(\"alter table interface_module_users drop column $g->{oldname}\");\r\n  $g->{dbh}->do(\"delete from interface_modules where name=\\\"$g->{oldname}\\\"\");\r\n  add();\r\n}\r\n\r\nsub del{\r\n  unless($g->{confirmation} eq \"true\"){\r\n    $g->msg(\"Module Deletion Confirmation\");\r\n    print $g->{CGI}->p(\"Are you sure you want to delete the \'<b><em>$g->{name}</em></b>\' module?\"),\r\n    $g->{CGI}->br,\r\n    $g->{CGI}->p(\"If you click \'Yes\', the module will be expunged and will no longer be present on this system.\"),\r\n    $g->{CGI}->br,\r\n    $g->{CGI}->start_form(),\r\n    $g->{CGI}->hidden({-name=>\"action\", -value=>\"delete\",-override=>\"1\"}),\r\n    $g->{CGI}->hidden({-name=>\"confirmation\", -value=>\"true\",-override=>\"1\"}),\r\n    $g->{CGI}->hidden({-name=>\"name\", -value=>\"$g->{name}\",-override=>\"1\"}),\r\n    $g->{CGI}->h2({-align=>\"center\"},\r\n      $g->{CGI}->submit(\"Delete \'$g->{name}\' module\"),\r\n      $g->{CGI}->button({-value=>\"Cancel\",-onClick=>\"history.go(-2);\"}),\r\n    ),\r\n    $g->{CGI}->end_form;\r\n  }\r\n  else{\r\n    msg(\"Module Deletion Confirmed\");\r\n    my($grp,$scr)=split(/\\_/,lc($g->{name}));\r\n    msg(\"deleting modules/$grp/$scr\\.pl...\");\r\n    system(\"rm modules/$grp/$scr\\.pl\");\r\n    unless(-e \"modules/$grp/$scr\\.pl\"){print \"successful.\";}\r\n    else{print\"failed.<br />\";}\r\n    $sth=$g->{dbh}->do(\"delete from interface_modules where name=\\\"$g->{name}\\\"\");\r\n    $sth=$g->{dbh}->do(\"alter table interface_module_users drop column $g->{name}\");\r\n    $sth=$g->{dbh}->do(\"delete from interface_module_access where module=\\\"$g->{name}\\\"\");\r\n    \r\n    print $g->{CGI}->p(\"The \'<b><em>$g->{name}</em></b>\' module has been deleted from this system.\"),\r\n    $g->{CGI}->br,\r\n    $g->{CGI}->p(\"All of the associated database entries relating to this module have been expunged and it will no longer be available.\"),\r\n    $g->{CGI}->h2({-align=>\"center\"},\r\n      $g->{CGI}->button({-value=>\"Continue\",-onClick=>\"location.href=\'$g->{scriptname}\'\"}),\r\n    );        \r\n  }\r\n}\r\n\r\n\r\nsub edit{\r\n  print \"\\n<!-- edit start -->\\n\";\r\n  my($name,$version,$source,$state); my $filepath=$g->{name}.\"\\.pl\"; $filepath=~s/\\_/\\//g;\r\n  if($g->{function} eq \"\"){$g->{function}=\"update\";\r\n    print \"<!-- function was not set.  Set function to \'update\' -->\\n\";\r\n	# initially entering the editor $g->{name} has been passed with the $g->{action} set to \'edit\'\r\n	# change \'edit\' to \'save\' and then get the latest code from the database and load it into the editor.\r\n	($name,$version,$source,$state)=$g->{dbh}->selectrow_array(\"select name,version,source,state from interface_module_source where name=\'$g->{name}\' and state=\'active\'\");\r\n	unless($name eq \"$g->{name}\"){\r\n      print \"<!-- name ($name) did not match passed name var: \'$g->{name}\' -->\\n\";\r\n	  # there is no database entry for the module chosen.  Create one on the fly for existing modules.\r\n	  $name=\"$g->{name}\"; $version=\"0.0.0001\"; $stamp=$g->{dbh}->selectrow_array(\"select now()\"); $state=\'active\';\r\n	  print $g->{CGI}->p(\"No source was present in database.  I am importing $name from $g->{modulepath}.\"),\"\\n\";\r\n	  if(-e \"$g->{modulepath}\"){\r\n		print $g->{CGI}->p(\"$g->{modulepath} exist... importing source...\"),\"\\n\";\r\n        open(IN,\"<$g->{modulepath}\") or die \"I cannot open $name : $!\";\r\n		  while(my $line=<IN>){$source.=$line;} close(IN);\r\n	    $sth=$g->{dbh}->prepare(\"insert into interface_module_source values(?,?,?,?,\'now()\',\'$g->{username}\')\");\r\n	    $sth->execute($name,$version,$source,$state) || die $g->{dbh}->errstr;\r\n	    $g->{function}=\"update\";\r\n	  }\r\n	  else{print $g->{CGI}->p(\"I cannot load the source from the database, and the module source does not exist.\"),\"\\n\"; exit;}\r\n	}\r\n  }\r\n  elsif($g->{function} eq \"update\"){\r\n	# update the datebase based on the modified form that passed data here.\r\n	$sth=$g->{dbh}->prepare(\"update interface_module_source set version=?,source=?,state=?,stamp=\'now()\',modifiedby=\'$g->{username}\' where name=\'$g->{name}\'\");\r\n	$sth->execute($g->{version},$g->{source},$g->{state});\r\n	# update actual file to reflect changes\r\n    my $filepath=$g->{name}.\"\\.pl\"; $filepath=~s/\\_/\\//g;\r\n    open(OUT,\">$g->{modulepath}\") || die \"Cannot open module, $g->{modulepath} for writing :$!\";\r\n    print OUT \"$g->{source}\";\r\n    close(OUT);\r\n  }\r\n  elsif($g->{function} eq \"upload\"){upload();}\r\n  else{print $g->{CGI}->p(\"The function you have selected does not exist.\"); exit;}\r\n\r\n  # set webvars from what we get elsewhere if need be.\r\n  if($g->{name} eq \"\"){$g->{name}=$name;}\r\n  if($g->{version} eq \"\"){$g->{version}=$version;}\r\n  if($g->{source} eq \"\"){$g->{source}=$source;}\r\n  if($g->{state} eq \"\"){$g->{state}=$state;}\r\n  if($g->{stamp} eq \"\"){$g->{stamp}=$stamp;}\r\n  if($g->{published} eq \"\"){$g->{published}=$published;}\r\n  if($g->{lastmodified} eq \"\"){$g->{lastmodified}=$lastmodified;}\r\n  if($g->{modifiedby} eq \"\"){$g->{modifiedby}=$modifiedby;}\r\n\r\n  # put editor up on screen with the latest data...\r\n  print $g->{CGI}->start_form({-method=>\"post\",-action=>\"$g->{scriptname}\"}),\r\n    \"\\n<table comment=\\\"table for module editor\\\">\\n<tr>\\n\",\r\n    \"<td>\",$g->{CGI}->label({-for=>\"name\"},\"name of module\"),\"<br />\\n\",\r\n    $g->{CGI}->textfield({-name=>\"name\",-value=>\"$g->{name}\",-size=>\"20\",-override=>\"1\"}),\"</td>\\n\",\r\n    $g->{CGI}->hidden({-name=>\"action\",-value=>\"$g->{action}\",-override=>\"1\"}),\r\n    $g->{CGI}->hidden({-name=>\"function\",-value=>\"$g->{function}\",-override=>\"1\"}),\r\n    \"<td>\",$g->{CGI}->label({-for=>\"version\"},\"module version\"),\"<br />\\n\",\r\n    $g->{CGI}->textfield({-name=>\"version\",-value=>\"$g->{version}\",-override=>\"1\"}),\"</td>\\n\",\r\n    \"<td>\",$g->{CGI}->label({-for=>\"state\"},\"state of module\"),\"<br />\\n\",\r\n    $g->{CGI}->popup_menu({-name=>\"state\",-size=>\"1\",-value=>[\"\",\"active\",\"debug\"],-default=>\"$g->{state}\",-override=>\"1\"}),\"</td>\\n\",\r\n    # stamp & modifiedby are automatically updated without any interaction...\r\n    \"<td>\",$g->{CGI}->submit(\"$g->{function}\"),\"</td>\\n</tr>\\n</table>\\n\",\r\n    $g->{CGI}->textarea({-name=>\"source\",value=>\"$g->{source}\",-override=>\"1\"}),\r\n  $g->{CGI}->end_form(),\"\\n\";\r\n  #print \"\\nfunction: \'$g->{function}\' action: \'$g->{action}\' title: \'$g->{title}\' \\n\";\r\n\r\n  #sub upload{\r\n  #  if($g->{id} eq \"\"){print \"Upload parameters where in an unacceptible format.<hr />\\n\"; return;}\r\n#	  my $textdata;\r\n#	  unless(-d \"$docs_upload/$g->{id}\"){system(\"mkdir $docs_upload/$g->{id}\"); print \"\\ncreating $docs_upload/$g->{id} folder...<br />\\n\";}\r\n#	  my($fn,$ext)=split(/\\./,$g->{uploadfilename}); $ext=lc($ext);\r\n#	  if($ext=~m/jpg/ or $ext=~m/jpeg/ or $ext=~m/gif/ or $ext=~m/png/){\r\n#	    system(\"mv $g->{uploaddir}/$g->{uploadfilename} $docs_upload/$g->{id}/$g->{uploadfilename}\");\r\n #     print \"<b>$g->{uploadfilename}</b> has been uploaded to <b>$docs_upload/$g->{id}/$g->{uploadfilename}</b> directory.<br />\\n\";\r\n  #    if($g->{type} eq \"text\"){\r\n   #     print \"prepared text image insertion token.<br />\\n\"; $g->{data}.=\"\\n\\[image\\: \\\"$g->{uploadfilename}\\\" caption: \\\"\\\" location: \\\"\\\" \\]\\n\";\r\n    #  }\r\n     # elsif($g->{type} eq \"html\"){\r\n#        print \"prepared html image insertion token.<br />\\n\"; $g->{data}.=\"\\n<img src=\\\"/docs/$g->{id}/$g->{uploadfilename}\\\" /><br \\/>\\n\";\r\n#      }\r\n#      elsif($g->{type} eq \"xml\"){\r\n#        print \"prepared xml image insertion token.<br />\\n\";\r\n#        print \"<p> There is currently no XML tag for this upload type </p>\"; $g->{data}.=\"\\n<imagetag><name>$g->{uploadfilename}</name></imagetag>\\n\";\r\n#      }\r\n#      print \"inserting image insertion token into database record<br />\\n\";\r\n#      $sth=$g->{dbh}->prepare(\"update system set data=? where id=$g->{id}\") || die $g->{dbh}->errstr;\r\n#      $sth->execute($g->{data}) || die $g->{dbh}->errstr;\r\n#    }\r\n#    elsif($ext=~m/txt/){ # uploading a txt file into the editor...\r\n#      print \"inserting text data into database record<br />\\n\";\r\n#	    open(IN,\"<$g->{uploaddir}/$g->{uploadfilename}\")||die\"cannot open file for reading : $!\";\r\n#	    while(my $line=<IN>){chomp $line; $textdata.=\"$line\\n\";}\r\n#	    close(IN);\r\n#	    $g->{data}.=$textdata;\r\n#	    system(\"rm $g->{uploaddir}/$g->{uploadfilename}\");\r\n#      # print \"$g->{data}<br />\\n\";\r\n#      $sth=$g->{dbh}->prepare(\"update system set data=? where id=$g->{id}\") || die $g->{dbh}->errstr;\r\n#      $sth->execute($g->{data}) || die $g->{dbh}->errstr;\r\n#    }\r\n#    else{\r\n#	    system(\"rm $g->{uploaddir}/$g->{uploadfilename}\");\r\n#	    print $g->{CGI}->font({-face=>\"Arial\",-size=>\"4\",-color=>\"red\"},\"You can only upload .jpeg, .gif, .png image and .txt files.\");\r\n#  } }\r\n  print \"\\n<!-- edit end -->\\n\";\r\n}\r\n\r\nsub properties{\r\n  print\r\n  $g->{CGI}->h3({-align=>\"center\"},\"Editing properties of \\\"$g->{name}\\\" module.\"),\r\n  $g->{CGI}->start_form({-action=>\"$g->{scriptname}\",-method=>\"post\"}),\r\n  $g->{CGI}->hidden({-name=>\"action\",-value=>\"update\",-override=>\"1\"}),\r\n  $g->{CGI}->hidden({-name=>\"oldname\",-value=>\"$g->{name}\"}),\r\n  $g->{CGI}->start_table({-cols=>\"3\",-cellspacing=>0,-cellpadding=>0,-border=>0,-width=>\"50%\",-align=>\"center\"}),\r\n  $g->{CGI}->Tr({-bgcolor=>\"#fff9ff\"},\r\n    $g->{CGI}->td({-align=>\"right\"},\"Module Title&nbsp;&nbsp;\"),\r\n    $g->{CGI}->td($g->{CGI}->textfield({-name=>\"title\",-value=>\"$g->{title}\",-override=>\"1\"}),),\r\n  ),\r\n  $g->{CGI}->Tr({-bgcolor=>\"#fff9ff\"},\r\n    $g->{CGI}->td({-align=>\"right\"},\"Group_Option_Module&nbsp;&nbsp;\"),\r\n    $g->{CGI}->td($g->{CGI}->textfield({-name=>\"name\",-value=>\"$g->{name}\",-override=>\"1\"}),),\r\n  ),\r\n  $g->{CGI}->Tr({-bgcolor=>\"#fff9ff\"},$g->{CGI}->td(\" \"),$g->{CGI}->td($g->{CGI}->submit(\"Save\"),),),\r\n  $g->{CGI}->end_form,\r\n  $g->{CGI}->end_table();\r\n}\r\n\r\nsub new{\r\n  print\r\n  $g->{CGI}->p(\"To add a new module to DIFR you must define two things; what application group it belongs to and \",\r\n        \"the name of the new module.\"\r\n  ),\r\n  $g->{CGI}->p(\"<font size=+2>Group:</font> <b><em>interface</em></b> would be the group you would use for a module that would be available to core DIFR administrators while \",\r\n        \"<b><em>rcs</em></b> would be the name of the group for existing and new <b><em>rcs</em></b> application modules.\",\r\n  ),\r\n  $g->{CGI}->p(\"<font size=+2>Module:</font> The name of the module is the actual executable name and does not require any extension {i.e., \'.pl\'}.\",\r\n        \"The group and name do not contain spaces and are seperated by an underscore character, \'_\'\",\r\n  ),\r\n  $g->{CGI}->start_form({-action=>\"$g->{scriptname}\",-method=>\"get\"}),\r\n  $g->{CGI}->hidden({-name=>\"action\",-value=>\"add\",-override=>\"1\"}),\r\n  $g->{CGI}->start_table({-cols=>\"3\",-cellspacing=>0,-cellpadding=>0,-border=>0,-width=>\"50%\",-align=>\"center\"}),\r\n  $g->{CGI}->Tr({-bgcolor=>\"$g->{bgcolor}\"},\r\n    $g->{CGI}->td({-align=>\"right\"},\"Module Title&nbsp;&nbsp;\"),\r\n    $g->{CGI}->td($g->{CGI}->textfield({-name=>\"title\",-value=>\"$g->{title}\",-override=>\"1\"}),),\r\n  ),\r\n  $g->{CGI}->Tr({-bgcolor=>\"$g->{bgcolor}\"},\r\n    $g->{CGI}->td({-align=>\"right\"},\"group_module&nbsp;&nbsp;\"),\r\n    $g->{CGI}->td($g->{CGI}->textfield({-name=>\"name\",-value=>\"$g->{name}\",-override=>\"1\"}),),\r\n  ),\r\n  $g->{CGI}->Tr({-bgcolor=>\"$g->{bgcolor}\"},$g->{CGI}->td(\" \"),$g->{CGI}->td($g->{CGI}->submit(\"Save\"),),),\r\n  $g->{CGI}->end_form,\r\n  $g->{CGI}->end_table();\r\n}\r\n\r\nsub view{\r\n  #print \"roles: $g->{my_roles}<br />\";\r\n  print \r\n  $g->{CGI}->start_table({-cols=>\"3\",-cellspacing=>0,-cellpadding=>0,-border=>0,-width=>\"80%\",-align=>\"center\"}),\r\n    $g->{CGI}->Tr({-style=>\"background-color: $g->{bgcolor}\"},\r\n      $g->{CGI}->th(\"Group_ModuleName\"),\r\n      $g->{CGI}->th(\"Module Title\"),\r\n      $g->{CGI}->th(\"Action\"),\r\n    );\r\n  #$sth=$g->{dbh}->prepare(\"select name,title from modules where name not regexp \\\"^PowerNet_Dev\\\" order by name\"); $sth->execute();\r\n  $sth=$g->{dbh}->prepare(\"select name,title from interface_modules order by name\"); $sth->execute();\r\n  my $bg=$g->{bgcolor};\r\n  while(my($name,$title)=$sth->fetchrow_array()){\r\n    if($bg eq $g->{bgcolor}){$bg=\"white\";}elsif($bg eq \"white\"){$bg=$g->{bgcolor};}\r\n    print \"<tr style=\\\"background-color: $bg\\\">\",\r\n    $g->{CGI}->td(\"$name\"),$g->{CGI}->td(\"$title\"),\"<td>\";\r\n    my @roles=split(/\\,/,$g->{my_roles});\r\n    foreach $role(@roles){\r\n      print $g->{CGI}->a({-href=>\"$g->{scriptname}?action=$role&name=$name&title=$title\"},\"$role\"),\"&nbsp;\";\r\n    }  \r\n    print \"</td></tr>\";\r\n  }\r\n  print $g->{CGI}->end_table();\r\n}\r\n\r\nsub tail{\r\n  #print $g->{CGI}->end_table();\r\n  #$g->{dbh}->disconnect();\r\n}\r\n\r\nsub connectsql{\r\n  open(FIL,\"</$g->{sql_powernet}\")|| die\"cannot open $g->{sqlconf} : $!\";\r\n  my ($d,$u,$p); while(my $line=<FIL>){chomp($line); if($line ne \"\"){($d,$u,$p)=split(/\\,/,$line); next;}}\r\n  $dbh=DBI->connect(\"DBI:mysql:$d\",\"$u\",\"$p\",{PrintError=>1,RaiseError=>1}) or \r\n    die\"Can not connect to database: $DBI::errstr\\n\";\r\n}\r\n\r\nsub skeleton{\r\n  my($grp,$opt,$scr)=@_;\r\n  print \"in skeleton...<br />\";\r\n  system(\"webp\");\r\n  if(-e \"$mod/$grp/$opt/$scr.pl\"){}\r\n  if(open(NEW,\">>modules/$grp/$opt/$scr.pl\")){\r\n    print NEW \"#!/usr/bin/perl\\n\";\r\n    print NEW \"# Interface Module Skeleton\\n\";\r\n    print NEW \"# This is an automatically generated skeleton module for Interface -BCIV\\n\\n\";\r\n    print NEW \"use DBI; my \\$dbh; my \\$sth; my \\$rv; # This is for database connectivity\\n\\n\";\r\n    print NEW \"use CGI; my \\$g->{CGI}=new CGI;              # This is for writting object oriented modules\\n\\n\";\r\n    print NEW \"my \\%v=\\@ARGV;                        # This is how http vars are passed a to module\\n\";\r\n    print NEW \"                                      #(as arguments into a hash).\\n\\n\";\r\n    print NEW \"# i.e., if you have a post/get variable called fred it will be seen as \\$v{fred} to\\n\";\r\n    print NEW \"# the module.\\n\\n\";\r\n    print NEW \"my \\$script_title=\\\"$v{title}\\\";\\n\\n\";\r\n    print NEW \"head();\\nbody();\\ntail();\\n\\n\";\r\n    print NEW \"sub body{\\n\";\r\n    print NEW \"  # this is the function that decides what the module is supposed to do when it is called\\n\";\r\n    print NEW \"  # what it does is determined by the \\$v{action} variable which is set through forms like\\n\";\r\n    print NEW \"  # the one called view shown below...\\n\";\r\n    print NEW \"  if(defined(\\$g->{action})){\\n\";\r\n    print NEW \"    if(\\$g->{action} eq \\\"someaction\\\"){\\n\";\r\n    print NEW \"      # an action is typically database modification routines or a call to a function\\n\";\r\n    print NEW \"      # view();\\n\";\r\n    print NEW \"      print \\$g->{CGI}->h2({-align=>\\\"center\\\",-bgcolor=>\\\"#dddddd\\\"},\\\"\\message: \\$g->{popup}\\\"),\\n\";\r\n    print NEW \"    }\\n\";\r\n    print NEW \"    else{print\\\"the action you have chosen doesn\\\'t exist<br />\\\";}\\n\";\r\n    print NEW \"  }else{view();}\\n\";\r\n    print NEW \"}\\n\\n\";\r\n    print NEW \"sub view{\\n\";\r\n    print NEW \"  print \\$g->{CGI}->start_table({-cols=>\\\"1\\\",-border=>\\\"0\\\",-width=>\\\"100%\\\",-align=>\\\"center\\\",-cellspacing=>\\\"0\\\"}),\\n\";\r\n    print NEW \"  \\$g->{CGI}->Tr(\\$g->{CGI}->td(\\n\";\r\n    print NEW \"    \\$g->{CGI}->start_form({-action=>\\\"\\$g->{scriptname}\\\",-method=>\\\"POST\\\"}),\\n\";\r\n    print NEW \"    \\$g->{CGI}->hidden({-name=>\\\"sid\\\",-value=>\\\"\\$g->{sid}\\\",-override=>\\\"1\\\"}),\\n\";\r\n    print NEW \"    \\$g->{CGI}->hidden({-name=>\\\"action\\\",-value=>\\\"someaction\\\",-override=>\\\"1\\\"}),\\n\";\r\n    print NEW \"    \\$g->{CGI}->textfield({-name=>\\\"example\\\",-value=>\\\"\\$g->{example}\\\",-override=>\\\"1\\\"}),\\n\";\r\n    print NEW \"    \\$g->{CGI}->popup_menu({-name=>\\\"popup\\\",-value=>[\\\"click me\\\",\\\"whoopie!\\\"],-default=>\\\"\\$g->{popup}\\\",-size=>\\\"10\\\",-override=>\\\"1\\\"}),\\n\";\r\n    print NEW \"    \\$g->{CGI}->submit(\\\"button text\\\"),\\n\";\r\n    print NEW \"    \\$g->{CGI}->end_form(),\\n\";\r\n    print NEW \"  ),),\\n\";\r\n    print NEW \"  \\$g->{CGI}->end_table(),\\n\";\r\n    print NEW \"  \\$g->{CGI}->hr(\\\"This is a skeleton module automatically generated by Interface.\\\");\\n\";\r\n    print NEW \"}\\n\\n\";\r\n    print NEW \"sub head{\\n\";\r\n    print NEW \"  # \\$dbh=DBI->connect(\\\"DBI:mysql:database\\\",\\\"user\\\",\\\"password\\\",{PrintError=>1,RaiseError=>1}) or\\n\";\r\n    print NEW \"  #   die \\\"Cannot connect to database : \\$DBI::errstr\\\";\\n\";\r\n    print NEW \"  print \\\"&nbsp;&#149;&nbsp;\\\",\\n\";\r\n    print NEW \"  \\$g->{CGI}->a({-href=>\\\"\\$g->{scriptname}?sid=\\$g->{sid}&action=YourAction\\\"},\\\"Add a new thingy\\\");\\n\";\r\n    print NEW \"  unless(\\$g->{action} eq \\\"\\\"){\\n\";\r\n    print NEW \"    print \\\"&nbsp;&#149;&nbsp;\\\",\\n\";\r\n    print NEW \"    \\$g->{CGI}->a({-href=>\\\"\\$g->{scriptname}?sid=\\$g->{sid}\\\"},\\\"Back\\\");\\n\";\r\n    print NEW \"  }\\n\";\r\n    print NEW \"  print \\$g->{CGI}->h1({-align=>\\\"center\\\"},\\\"\\$script_title\\\");\\n\";\r\n    print NEW \"}\\n\\n\";\r\n    print NEW \"sub tail{\\n  print \\$g->{CGI}->end_table();\\n  #\\$g->{dbh}->disconnect(); # This will close your database session\\n}\\n\\n\";\r\n    print NEW \"sub connectsql{\\n\";\r\n    print NEW \"  open(FIL,\\\"</\\$g->{sql_jahvastat}\\\")|| die\\\"cannot open \\$g->{sql_jahvastat} : \\$!\\\";\\n\";\r\n  	print NEW \"  my (\\$d,\\$u,\\$p); while(my \\$line=<FIL>){chomp(\\$line); if(\\$line ne \\\"\\\"){(\\$d,\\$u,\\$p)=split(/\\,/,\\$line); next;}}\\n\";\r\n    print NEW \"  \\$dbh=DBI->connect(\\\"DBI:mysql:\\$d\\\",\\\"\\$u\\\",\\\"\\$p\\\",\\n\";\r\n    print NEW \"      {PrintError=>1,RaiseError=>1}) or die\\\"Can not connect to database: \\$DBI::errstr\\n\\\";\\n\";\r\n    print NEW \"}\\n\\n\";\r\n\r\n    close(NEW);\r\n    system(\"webp\"); # fix permissions on script\r\n    print \"finished creating script\\n<br />\";\r\n  }else{print\"could not open : modules/$grp/$opt/$scr for writing : $!<br />\";}\r\n}\r\n\r\nsub msg{ my ($msg)=@_; print $g->{CGI}->h2({-align=>\"center\"},\"$msg\");}\r\n','active','0000-00-00 00:00:00',''),('rcs_projects','0.0.0001','#!/usr/bin/perl\r\n# asdf\r\nmy $script_title=\"Modules\";\r\n\r\n# top menu items\r\nif($g->{my_roles}=~m/add/){\r\n  print $g->{CGI}->a({-href=>\"$g->{scriptname}?action=new\"},\"Add a new Module\");\r\n}\r\nunless($g->{action} eq \"\"){\r\n  print \"&nbsp;&#149;&nbsp;\", $g->{CGI}->a({-href=>\"$g->{scriptname}\"},\"Back\");\r\n}\r\nprint $g->{CGI}->h2({-align=>\"center\"},\"$script_title\");\r\n\r\n# run function for selected action\r\nunless(defined($g->{action}) ){view();}\r\n  elsif($g->{action} eq \"assign\"){access_editor();}\r\n  elsif($g->{action} eq \"modify_access\"){modify_group_access();}\r\n  elsif($g->{action} eq \"new\"){new();}\r\n  elsif($g->{action} eq \"add\"){add();}\r\n  elsif($g->{action} eq \"edit\"){edit();}\r\n  elsif($g->{action} eq \"properties\"){properties();}\r\n  elsif($g->{action} eq \"update\"){update();}\r\n  elsif($g->{action}=~m/role/){roles();}\r\n  elsif($g->{action}=~m/group/){groups();}\r\n  elsif($g->{action} eq \"delete\"){del();}\r\n  else{\r\n    print $g->{CGI}->h2({-align=>\"center\"},\r\n    \"The action you have selected, $g->{action}, does not exist\");\r\n}\r\n\r\n1; # end module\r\n\r\nsub groups{\r\n  print $g->{CGI}->h3({-align=>\"center\"},\"groups for $g->{name} module\");\r\n  my $total_groups=$g->{dbh}->selectrow_array(\"select groups from interface_modules where name=\'$g->{name}\'\");\r\n  if($v{action} eq \"delete_group\"){\r\n    print \"deleting \'$g->{group}\' group from $g->{name} module...<br />\";\r\n    $total_groups=~s/$g->{group}//; \r\n    $total_groups=~s/\\,\\,/\\,/; \r\n    $total_groups=~s/^\\,+//g; $total_groups=~s/\\,+$//g;\r\n    $g->{dbh}->do(\"update interface_modules set groups=\\\"$total_groups\\\" where name=\'$g->{name}\'\");\r\n  }\r\n  elsif($g->{action} eq \"add_group\"){\r\n    # add group\r\n    print \"adding \'$g->{group}\' group to $g->{name} module...<br />\";\r\n    if($total_groups ne \"\"){$total_groups=$total_groups.\"\\,\";}\r\n    $total_groups=$total_groups.\"$g->{group}\";\r\n    $g->{dbh}->do(\"update interface_modules set groups=\\\"$total_groups\\\" where name=\'$g->{name}\'\");\r\n  }\r\n  # print \"&nbsp;&#149;&nbsp;\",\r\n  # $g->{CGI}->a({-href=>\"\"},\"add a new group\");\r\n  # print \"roles: $total_groups<br />\";\r\n  my @total_groups=split(/\\,/,$total_groups); my $bg=$g->{bgcolor};\r\n  print $g->{CGI}->start_table({-cols=>\"2\",-align=>\"center\",-width=>\"70%\"}),\r\n  $g->{CGI}->Tr({-style=>\"background-color: $bg\"},\r\n    $g->{CGI}->th({-align=>\"left\"},\"groups\"),\r\n    $g->{CGI}->th({-align=>\"left\"},\"action\"),\r\n  );\r\n  foreach $group(@total_groups){\r\n    if($bg eq $v{bgcolor}){$bg=\"white\";}elsif($bg eq \"white\"){$bg=$g->{bgcolor};}\r\n    print $g->{CGI}->Tr({-style=>\"background-color: $bg\"},$g->{CGI}->td(\r\n      \"$group \"),\r\n      $g->{CGI}->td($g->{CGI}->a({-href=>\"$g->{scriptname}?action=delete_group&group=$group&name=$g->{name}\"},\"delete\"),\r\n    ));\r\n  }\r\n  print $g->{CGI}->start_form({-method=>\"get\",-action=>\"$g->{scriptname}\",-id=>\"id\"}),\r\n  $g->{CGI}->hidden({-name=>\"action\",-value=>\"add_group\",-override=>\"1\"}),\r\n  $g->{CGI}->hidden({-name=>\"name\",-value=>\"$g->{name}\"}),\r\n  $g->{CGI}->Tr(\r\n    $g->{CGI}->td(\r\n      $g->{CGI}->textfield({-name=>\"group\",-id=>\"input-focus\"}),\r\n    ),\r\n    $g->{CGI}->td(\r\n      $g->{CGI}->submit(\"Add Group\"),\r\n    ),\r\n  ),\r\n  $g->{CGI}->end_table();\r\n}\r\n\r\nsub roles{\r\n  print $g->{CGI}->h3({-align=>\"center\"},\"roles for $g->{name} module\");\r\n  my $total_roles=$g->{dbh}->selectrow_array(\"select roles from interface_modules where name=\'$g->{name}\'\");\r\n  if($v{action} eq \"delete_role\"){\r\n    print \"deleting \'$g->{role}\' role from $g->{name} module...<br />\";\r\n    $total_roles=~s/$g->{role}//; \r\n    $total_roles=~s/\\,\\,/\\,/; \r\n    $total_roles=~s/^\\,+//g; $total_roles=~s/\\,+$//g;\r\n    $g->{dbh}->do(\"update interface_modules set roles=\\\"$total_roles\\\" where name=\'$g->{name}\'\");\r\n  }\r\n  elsif($g->{action} eq \"add_role\"){\r\n    # add role\r\n    print \"adding \'$g->{role}\' role to $g->{name} module...<br />\";\r\n    if($total_roles ne \"\"){$total_roles=$total_roles.\"\\,\";}\r\n    $total_roles=$total_roles.\"$g->{role}\";\r\n    $g->{dbh}->do(\"update interface_modules set roles=\\\"$total_roles\\\" where name=\'$g->{name}\'\");\r\n  }\r\n  # print \"&nbsp;&#149;&nbsp;\",\r\n  # $g->{CGI}->a({-href=>\"\"},\"add a new role\");\r\n  # print \"roles: $total_roles<br />\";\r\n  my @total_roles=split(/\\,/,$total_roles); my $bg=$g->{bgcolor};\r\n  print $g->{CGI}->start_table({-cols=>\"2\",-align=>\"center\",-width=>\"70%\"}),\r\n  $g->{CGI}->Tr({-style=>\"background-color: $bg\"},\r\n    $g->{CGI}->th({-align=>\"left\"},\"roles\"),\r\n    $g->{CGI}->th({-align=>\"left\"},\"action\"),\r\n  );\r\n  foreach $role(@total_roles){\r\n    if($bg eq $g->{bgcolor}){$bg=\"white\";}elsif($bg eq \"white\"){$bg=$g->{bgcolor};}\r\n    print $g->{CGI}->Tr({-style=>\"background-color: $bg\"},$g->{CGI}->td(\r\n      \"$role \"),\r\n      $g->{CGI}->td($g->{CGI}->a({-href=>\"$g->{scriptname}?action=delete_role&role=$role&name=$g->{name}\"},\"delete\"),\r\n    ));\r\n  }\r\n  print $g->{CGI}->start_form({-method=>\"get\",-action=>\"$g->{scriptname}\",-id=>\"id\"}),\r\n  $g->{CGI}->hidden({-name=>\"action\",-value=>\"add_role\",-override=>\"1\"}),\r\n  $g->{CGI}->hidden({-name=>\"name\",-value=>\"$g->{name}\"}),\r\n  $g->{CGI}->Tr(\r\n    $g->{CGI}->td(\r\n      $g->{CGI}->textfield({-name=>\"role\",-id=>\"input-focus\"}),\r\n    ),\r\n    $g->{CGI}->td(\r\n      $g->{CGI}->submit(\"Add Role\"),\r\n    ),\r\n  ),\r\n  $g->{CGI}->end_table();\r\n}\r\n\r\nsub modify_group_access{\r\n  $sth=$g->{dbh}->do(\"update interface_module_users set $g->{name}=\\\"false\\\"\");\r\n  print \"<br />$g->{name} adding users: \";\r\n  for $usertoadd (sort keys %v){\r\n  if($usertoadd=~m/^u_/){\r\n      $usertoadd=substr($usertoadd,2);\r\n      print \"$usertoadd \";\r\n      # sql to add each iterated user to group\r\n      $sth=$g->{dbh}->do(\"update interface_module_users set $g->{name}=\\\"true\\\" where username=\\\"$usertoadd\\\"\");\r\n    }\r\n  }\r\n  print \"<br />\";\r\n  access_editor();\r\n}\r\n\r\nsub access_editor{\r\n  $sth=$g->{dbh}->prepare(\"select username,lname,fname,mi,suffix,service from interface_users order by username\"); $sth->execute();\r\n  my $modtitle=$v{name}; $modtitle=~s/\\_/ /; $modtitle=~s/\\_/ /;\r\n  print $g->{CGI}->h4(\"Checked users have access to the \'$modtitle\' module.\"),\r\n  \"<div style=\\\"top: 140; left: 0; width: 50%; height: 300px; overflow: scroll;\\\">\",\r\n  $g->{CGI}->start_form({-method=>\"post\",-action=>\"$g->{scriptname}\"}),\r\n  $g->{CGI}->hidden({-name=>\"action\",-value=>\"modify_access\",-override=>\"1\"}),\r\n  $g->{CGI}->hidden({-name=>\"name\",-value=>\"$g->{name}\",-override=>1}),\r\n  $g->{CGI}->start_table({-align=>\"right\",-cols=>2,-cellspacing=>0,-cellpadding=>0,-border=>0,-width=>\"100%\"});\r\n  my $grey=0;\r\n  while(my($u,$last,$first,$mi,$suffix,$service)=$sth->fetchrow_array()){\r\n    my $access=$g->{dbh}->selectrow_array(\"select $g->{name} from interface_module_users where username=\\\"$u\\\"\");\r\n    if($grey==0){print \"<Tr bgcolor=\\\"#fff0ff\\\">\"; ++$grey;}else{print \"<Tr>\"; --$grey;}\r\n    if($access eq \"true\"){\r\n      print \r\n      $g->{CGI}->td({-width=>\"20%\"},\"&nbsp;\"),\r\n      $g->{CGI}->td(\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=checkbox name=\\\"u_$u\\\" checked>   \",\r\n        $g->{CGI}->a({-href=>\"$g->{scriptname}?chmod=interface_users&action=edit&euname=$u\"},\"$last, $first $mi $suffix\"),\r\n      ); # $u\"),\r\n        # $g->{CGI}->td(\"&nbsp;$last, $first $mi $suffix\"),\r\n	# $g->{CGI}->td(\"$service\");\r\n    }\r\n    else{\r\n      print \r\n      $g->{CGI}->td(\"&nbsp;\"),\r\n      $g->{CGI}->td(\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=checkbox name=\\\"u_$u\\\" unchecked>   \",\r\n        $g->{CGI}->a({-href=>\"$g->{scriptname}?chmod=powernet_dev_users&action=edit&euname=$u\"},\"$last, $first $mi $suffix\"),\r\n      ); # $u\"),\r\n            # $g->{CGI}->td(\"&nbsp;$last, $first $mi $suffix\"),\r\n	    # $g->{CGI}->td(\"$service\");\r\n    }\r\n    print \"</Tr>\\n\";\r\n  }\r\n  print $g->{CGI}->end_table(),\r\n  \"&nbsp;<br /><br /><center>\",\"</div>\",\r\n  \"<div style=\\\"position: absolute; top: 140; left: 50%; width: 50%; padding-left: 4px; padding-right: 4px; height: 300px;\\\">\",\r\n  $g->{CGI}->h4({-align=>\"left\"},\"To grant/deny user module access, select a user and then click the \'Update Access List\' button.\"),\r\n  $g->{CGI}->submit(\"Update Access List\"),\"</center>\",\r\n  $g->{CGI}->end_table(),$g->{CGI}->end_form(),\r\n  \"</div>\";\r\n  # print \"<div style=\\\"position: absolute; top: 140; left: 50%; width: 50%; height: 300px;\\\">\",\r\n  # $g->{CGI}->h3({-align=>\"center\"},\"To enter a specific user enter username here:\"),\r\n  # $g->{CGI}->start_table({-align=>\"center\",-cols=>1,-cellspacing=>0,-cellpadding=>0,-border=>1}),\r\n  # $g->{CGI}->start_form({-method=>\"post\",-action=>\"$v{scriptname}\"}),\r\n  # $g->{CGI}->hidden({-name=>\"name\",-value=>\"$v{name}\",-override=>1}),\r\n  # $g->{CGI}->hidden({-name=>\"action\",-value=>\"finduser\"}),\r\n  # $g->{CGI}->Tr($g->{CGI}->td(\r\n  #  $g->{CGI}->textfield({-name=>\"eusername\",-value=>\"$v{eusername}\",-override=>\"1\"}),\r\n  #  $g->{CGI}->submit(\"search\"),\r\n  #),),\r\n  #$g->{CGI}->end_form(),\r\n  #$g->{CGI}->end_table(),\r\n  #\"</div>\";\r\n}\r\n\r\nsub add{\r\n  print \"adding $g->{name} $g->{title}<br />\";\r\n  my($grp,$scr)=split(/\\_/,lc($g->{name}));\r\n  unless(-d \"modules/$grp\"){\r\n    print \"creating path: modules/$grp<br />\";\r\n    mkdir \"modules/$grp\";\r\n  }\r\n  unless(-e \"modules/$grp/$scr\\.pl\"){\r\n    print \"creating empty module: modules/$grp/$scr\\.pl<br />\";\r\n    skeleton($grp,$scr);\r\n  }\r\n  else{\r\n    print \"I see your $scr\\.pl already exists...<br />\";\r\n  }\r\n  $g->{name}=lc($g->{name});\r\n  $g->{dbh}->do(\"insert into interface_modules values(\'$g->{name}\',\'$g->{title}\',NULL,NULL)\");\r\n  $g->{dbh}->do(\"alter table interface_module_users add column $g->{name} varchar(50)\");\r\n  $g->{dbh}->do(\"update interface_module_users set $g->{name}=\'true\' where username=\'$g->{sys_username}\'\");\r\n  view();\r\n}\r\n\r\nsub update{\r\n  # actually move module to it\'s new home...\r\n  if($g->{name} ne $g->{oldname}){\r\n    my ($grp,$opt,$scr)=split(/\\_/,lc($g->{oldname}));\r\n    if(-d \"modules/$grp/$opt\"){\r\n      if(-e \"modules/$grp/$opt/$scr\\.pl\"){\r\n        print \"modules/$grp/$opt/$scr\\.pl exists...<br />\";\r\n        my($ngrp,$nopt,$nscr)=split(/\\_/,lc($v{name}));\r\n        system(\"mkdir modules/$ngrp/$nopt/\");\r\n        system(\"mv modules/$grp/$opt/$scr\\.pl modules/$ngrp/$nopt/$nscr\\.pl\");\r\n        if(-e \"modules/$ngrp/$nopt/$nscr\\.pl\"){\r\n          print \"move to $ngrp/$nopt/$nscr successful! :)<br />\";\r\n        }\r\n        else{\r\n          print \"moving $grp/$opt/$scr to $ngrp/$nopt/$nscr failed! :(<br />\";\r\n        }\r\n      }else{print\"modules/$grp/$opt/$scr doesn\\\'t exist...<br />\";}\r\n    }else{print\"modules/$grp/$opt doesn\\\'t exist<br />\";}\r\n  }\r\n  $g->{dbh}->do(\"alter table interface_module_users drop column $g->{oldname}\");\r\n  $g->{dbh}->do(\"delete from interface_modules where name=\\\"$g->{oldname}\\\"\");\r\n  add();\r\n}\r\n\r\nsub del{\r\n  unless($g->{confirmation} eq \"true\"){\r\n    $g->msg(\"Module Deletion Confirmation\");\r\n    print $g->{CGI}->p(\"Are you sure you want to delete the \'<b><em>$g->{name}</em></b>\' module?\"),\r\n    $g->{CGI}->br,\r\n    $g->{CGI}->p(\"If you click \'Yes\', the module will be expunged and will no longer be present on this system.\"),\r\n    $g->{CGI}->br,\r\n    $g->{CGI}->start_form(),\r\n    $g->{CGI}->hidden({-name=>\"action\", -value=>\"delete\",-override=>\"1\"}),\r\n    $g->{CGI}->hidden({-name=>\"confirmation\", -value=>\"true\",-override=>\"1\"}),\r\n    $g->{CGI}->hidden({-name=>\"name\", -value=>\"$g->{name}\",-override=>\"1\"}),\r\n    $g->{CGI}->h2({-align=>\"center\"},\r\n      $g->{CGI}->submit(\"Delete \'$g->{name}\' module\"),\r\n      $g->{CGI}->button({-value=>\"Cancel\",-onClick=>\"history.go(-2);\"}),\r\n    ),\r\n    $g->{CGI}->end_form;\r\n  }\r\n  else{\r\n    msg(\"Module Deletion Confirmed\");\r\n    my($grp,$scr)=split(/\\_/,lc($g->{name}));\r\n    msg(\"deleting modules/$grp/$scr\\.pl...\");\r\n    system(\"rm modules/$grp/$scr\\.pl\");\r\n    unless(-e \"modules/$grp/$scr\\.pl\"){print \"successful.\";}\r\n    else{print\"failed.<br />\";}\r\n    $sth=$g->{dbh}->do(\"delete from interface_modules where name=\\\"$g->{name}\\\"\");\r\n    $sth=$g->{dbh}->do(\"alter table interface_module_users drop column $g->{name}\");\r\n    $sth=$g->{dbh}->do(\"delete from interface_module_access where module=\\\"$g->{name}\\\"\");\r\n    \r\n    print $g->{CGI}->p(\"The \'<b><em>$g->{name}</em></b>\' module has been deleted from this system.\"),\r\n    $g->{CGI}->br,\r\n    $g->{CGI}->p(\"All of the associated database entries relating to this module have been expunged and it will no longer be available.\"),\r\n    $g->{CGI}->h2({-align=>\"center\"},\r\n      $g->{CGI}->button({-value=>\"Continue\",-onClick=>\"location.href=\'$g->{scriptname}\'\"}),\r\n    );        \r\n  }\r\n}\r\n\r\n\r\nsub edit{\r\n  print \"\\n<!-- edit start -->\\n\";\r\n  my($name,$version,$source,$state); my $filepath=$g->{name}.\"\\.pl\"; $filepath=~s/\\_/\\//g;\r\n  if($g->{function} eq \"\"){$g->{function}=\"update\";\r\n    print \"<!-- function was not set.  Set function to \'update\' -->\\n\";\r\n	# initially entering the editor $g->{name} has been passed with the $g->{action} set to \'edit\'\r\n	# change \'edit\' to \'save\' and then get the latest code from the database and load it into the editor.\r\n	($name,$version,$source,$state)=$g->{dbh}->selectrow_array(\"select name,version,source,state from interface_module_source where name=\'$g->{name}\' and state=\'active\'\");\r\n	unless($name eq \"$g->{name}\"){\r\n      print \"<!-- name ($name) did not match passed name var: \'$g->{name}\' -->\\n\";\r\n	  # there is no database entry for the module chosen.  Create one on the fly for existing modules.\r\n	  $name=\"$g->{name}\"; $version=\"0.0.0001\"; $stamp=$g->{dbh}->selectrow_array(\"select now()\"); $state=\'active\';\r\n	  print $g->{CGI}->p(\"No source was present in database.  I am importing $name from $g->{modulepath}.\"),\"\\n\";\r\n	  if(-e \"$g->{modulepath}\"){\r\n		print $g->{CGI}->p(\"$g->{modulepath} exist... importing source...\"),\"\\n\";\r\n        open(IN,\"<$g->{modulepath}\") or die \"I cannot open $name : $!\";\r\n		  while(my $line=<IN>){$source.=$line;} close(IN);\r\n	    $sth=$g->{dbh}->prepare(\"insert into interface_module_source values(?,?,?,?,\'now()\',\'$g->{username}\')\");\r\n	    $sth->execute($name,$version,$source,$state) || die $g->{dbh}->errstr;\r\n	    $g->{function}=\"update\";\r\n	  }\r\n	  else{print $g->{CGI}->p(\"I cannot load the source from the database, and the module source does not exist.\"),\"\\n\"; exit;}\r\n	}\r\n  }\r\n  elsif($g->{function} eq \"update\"){\r\n	# update the datebase based on the modified form that passed data here.\r\n	$sth=$g->{dbh}->prepare(\"update interface_module_source set version=?,source=?,state=?,stamp=\'now()\',modifiedby=\'$g->{username}\' where name=\'$g->{name}\'\");\r\n	$sth->execute($g->{version},$g->{source},$g->{state});\r\n	# update actual file to reflect changes\r\n    my $filepath=$g->{name}.\"\\.pl\"; $filepath=~s/\\_/\\//g;\r\n    open(OUT,\">$g->{modulepath}\") || die \"Cannot open module, $g->{modulepath} for writing :$!\";\r\n    print OUT \"$g->{source}\";\r\n    close(OUT);\r\n  }\r\n  elsif($g->{function} eq \"upload\"){upload();}\r\n  else{print $g->{CGI}->p(\"The function you have selected does not exist.\"); exit;}\r\n\r\n  # set webvars from what we get elsewhere if need be.\r\n  if($g->{name} eq \"\"){$g->{name}=$name;}\r\n  if($g->{version} eq \"\"){$g->{version}=$version;}\r\n  if($g->{source} eq \"\"){$g->{source}=$source;}\r\n  if($g->{state} eq \"\"){$g->{state}=$state;}\r\n  if($g->{stamp} eq \"\"){$g->{stamp}=$stamp;}\r\n  if($g->{published} eq \"\"){$g->{published}=$published;}\r\n  if($g->{lastmodified} eq \"\"){$g->{lastmodified}=$lastmodified;}\r\n  if($g->{modifiedby} eq \"\"){$g->{modifiedby}=$modifiedby;}\r\n\r\n  # put editor up on screen with the latest data...\r\n  print $g->{CGI}->start_form({-method=>\"post\",-action=>\"$g->{scriptname}\"}),\r\n    \"\\n<table comment=\\\"table for module editor\\\">\\n<tr>\\n\",\r\n    \"<td>\",$g->{CGI}->label({-for=>\"name\"},\"name of module\"),\"<br />\\n\",\r\n    $g->{CGI}->textfield({-name=>\"name\",-value=>\"$g->{name}\",-size=>\"20\",-override=>\"1\"}),\"</td>\\n\",\r\n    $g->{CGI}->hidden({-name=>\"action\",-value=>\"$g->{action}\",-override=>\"1\"}),\r\n    $g->{CGI}->hidden({-name=>\"function\",-value=>\"$g->{function}\",-override=>\"1\"}),\r\n    \"<td>\",$g->{CGI}->label({-for=>\"version\"},\"module version\"),\"<br />\\n\",\r\n    $g->{CGI}->textfield({-name=>\"version\",-value=>\"$g->{version}\",-override=>\"1\"}),\"</td>\\n\",\r\n    \"<td>\",$g->{CGI}->label({-for=>\"state\"},\"state of module\"),\"<br />\\n\",\r\n    $g->{CGI}->popup_menu({-name=>\"state\",-size=>\"1\",-value=>[\"\",\"active\",\"debug\"],-default=>\"$g->{state}\",-override=>\"1\"}),\"</td>\\n\",\r\n    # stamp & modifiedby are automatically updated without any interaction...\r\n    \"<td>\",$g->{CGI}->submit(\"$g->{function}\"),\"</td>\\n</tr>\\n</table>\\n\",\r\n    $g->{CGI}->textarea({-name=>\"source\",value=>\"$g->{source}\",-override=>\"1\"}),\r\n  $g->{CGI}->end_form(),\"\\n\";\r\n  #print \"\\nfunction: \'$g->{function}\' action: \'$g->{action}\' title: \'$g->{title}\' \\n\";\r\n\r\n  #sub upload{\r\n  #  if($g->{id} eq \"\"){print \"Upload parameters where in an unacceptible format.<hr />\\n\"; return;}\r\n#	  my $textdata;\r\n#	  unless(-d \"$docs_upload/$g->{id}\"){system(\"mkdir $docs_upload/$g->{id}\"); print \"\\ncreating $docs_upload/$g->{id} folder...<br />\\n\";}\r\n#	  my($fn,$ext)=split(/\\./,$g->{uploadfilename}); $ext=lc($ext);\r\n#	  if($ext=~m/jpg/ or $ext=~m/jpeg/ or $ext=~m/gif/ or $ext=~m/png/){\r\n#	    system(\"mv $g->{uploaddir}/$g->{uploadfilename} $docs_upload/$g->{id}/$g->{uploadfilename}\");\r\n #     print \"<b>$g->{uploadfilename}</b> has been uploaded to <b>$docs_upload/$g->{id}/$g->{uploadfilename}</b> directory.<br />\\n\";\r\n  #    if($g->{type} eq \"text\"){\r\n   #     print \"prepared text image insertion token.<br />\\n\"; $g->{data}.=\"\\n\\[image\\: \\\"$g->{uploadfilename}\\\" caption: \\\"\\\" location: \\\"\\\" \\]\\n\";\r\n    #  }\r\n     # elsif($g->{type} eq \"html\"){\r\n#        print \"prepared html image insertion token.<br />\\n\"; $g->{data}.=\"\\n<img src=\\\"/docs/$g->{id}/$g->{uploadfilename}\\\" /><br \\/>\\n\";\r\n#      }\r\n#      elsif($g->{type} eq \"xml\"){\r\n#        print \"prepared xml image insertion token.<br />\\n\";\r\n#        print \"<p> There is currently no XML tag for this upload type </p>\"; $g->{data}.=\"\\n<imagetag><name>$g->{uploadfilename}</name></imagetag>\\n\";\r\n#      }\r\n#      print \"inserting image insertion token into database record<br />\\n\";\r\n#      $sth=$g->{dbh}->prepare(\"update system set data=? where id=$g->{id}\") || die $g->{dbh}->errstr;\r\n#      $sth->execute($g->{data}) || die $g->{dbh}->errstr;\r\n#    }\r\n#    elsif($ext=~m/txt/){ # uploading a txt file into the editor...\r\n#      print \"inserting text data into database record<br />\\n\";\r\n#	    open(IN,\"<$g->{uploaddir}/$g->{uploadfilename}\")||die\"cannot open file for reading : $!\";\r\n#	    while(my $line=<IN>){chomp $line; $textdata.=\"$line\\n\";}\r\n#	    close(IN);\r\n#	    $g->{data}.=$textdata;\r\n#	    system(\"rm $g->{uploaddir}/$g->{uploadfilename}\");\r\n#      # print \"$g->{data}<br />\\n\";\r\n#      $sth=$g->{dbh}->prepare(\"update system set data=? where id=$g->{id}\") || die $g->{dbh}->errstr;\r\n#      $sth->execute($g->{data}) || die $g->{dbh}->errstr;\r\n#    }\r\n#    else{\r\n#	    system(\"rm $g->{uploaddir}/$g->{uploadfilename}\");\r\n#	    print $g->{CGI}->font({-face=>\"Arial\",-size=>\"4\",-color=>\"red\"},\"You can only upload .jpeg, .gif, .png image and .txt files.\");\r\n#  } }\r\n  print \"\\n<!-- edit end -->\\n\";\r\n}\r\n\r\nsub properties{\r\n  print\r\n  $g->{CGI}->h3({-align=>\"center\"},\"Editing properties of \\\"$g->{name}\\\" module.\"),\r\n  $g->{CGI}->start_form({-action=>\"$g->{scriptname}\",-method=>\"post\"}),\r\n  $g->{CGI}->hidden({-name=>\"action\",-value=>\"update\",-override=>\"1\"}),\r\n  $g->{CGI}->hidden({-name=>\"oldname\",-value=>\"$g->{name}\"}),\r\n  $g->{CGI}->start_table({-cols=>\"3\",-cellspacing=>0,-cellpadding=>0,-border=>0,-width=>\"50%\",-align=>\"center\"}),\r\n  $g->{CGI}->Tr({-bgcolor=>\"#fff9ff\"},\r\n    $g->{CGI}->td({-align=>\"right\"},\"Module Title&nbsp;&nbsp;\"),\r\n    $g->{CGI}->td($g->{CGI}->textfield({-name=>\"title\",-value=>\"$g->{title}\",-override=>\"1\"}),),\r\n  ),\r\n  $g->{CGI}->Tr({-bgcolor=>\"#fff9ff\"},\r\n    $g->{CGI}->td({-align=>\"right\"},\"Group_Option_Module&nbsp;&nbsp;\"),\r\n    $g->{CGI}->td($g->{CGI}->textfield({-name=>\"name\",-value=>\"$g->{name}\",-override=>\"1\"}),),\r\n  ),\r\n  $g->{CGI}->Tr({-bgcolor=>\"#fff9ff\"},$g->{CGI}->td(\" \"),$g->{CGI}->td($g->{CGI}->submit(\"Save\"),),),\r\n  $g->{CGI}->end_form,\r\n  $g->{CGI}->end_table();\r\n}\r\n\r\nsub new{\r\n  print\r\n  $g->{CGI}->p(\"To add a new module to DIFR you must define two things; what application group it belongs to and \",\r\n        \"the name of the new module.\"\r\n  ),\r\n  $g->{CGI}->p(\"<font size=+2>Group:</font> <b><em>interface</em></b> would be the group you would use for a module that would be available to core DIFR administrators while \",\r\n        \"<b><em>rcs</em></b> would be the name of the group for existing and new <b><em>rcs</em></b> application modules.\",\r\n  ),\r\n  $g->{CGI}->p(\"<font size=+2>Module:</font> The name of the module is the actual executable name and does not require any extension {i.e., \'.pl\'}.\",\r\n        \"The group and name do not contain spaces and are seperated by an underscore character, \'_\'\",\r\n  ),\r\n  $g->{CGI}->start_form({-action=>\"$g->{scriptname}\",-method=>\"get\"}),\r\n  $g->{CGI}->hidden({-name=>\"action\",-value=>\"add\",-override=>\"1\"}),\r\n  $g->{CGI}->start_table({-cols=>\"3\",-cellspacing=>0,-cellpadding=>0,-border=>0,-width=>\"50%\",-align=>\"center\"}),\r\n  $g->{CGI}->Tr({-bgcolor=>\"$g->{bgcolor}\"},\r\n    $g->{CGI}->td({-align=>\"right\"},\"Module Title&nbsp;&nbsp;\"),\r\n    $g->{CGI}->td($g->{CGI}->textfield({-name=>\"title\",-value=>\"$g->{title}\",-override=>\"1\"}),),\r\n  ),\r\n  $g->{CGI}->Tr({-bgcolor=>\"$g->{bgcolor}\"},\r\n    $g->{CGI}->td({-align=>\"right\"},\"group_module&nbsp;&nbsp;\"),\r\n    $g->{CGI}->td($g->{CGI}->textfield({-name=>\"name\",-value=>\"$g->{name}\",-override=>\"1\"}),),\r\n  ),\r\n  $g->{CGI}->Tr({-bgcolor=>\"$g->{bgcolor}\"},$g->{CGI}->td(\" \"),$g->{CGI}->td($g->{CGI}->submit(\"Save\"),),),\r\n  $g->{CGI}->end_form,\r\n  $g->{CGI}->end_table();\r\n}\r\n\r\nsub view{\r\n  #print \"roles: $g->{my_roles}<br />\";\r\n  print \r\n  $g->{CGI}->start_table({-cols=>\"3\",-cellspacing=>0,-cellpadding=>0,-border=>0,-width=>\"80%\",-align=>\"center\"}),\r\n    $g->{CGI}->Tr({-style=>\"background-color: $g->{bgcolor}\"},\r\n      $g->{CGI}->th(\"Group_ModuleName\"),\r\n      $g->{CGI}->th(\"Module Title\"),\r\n      $g->{CGI}->th(\"Action\"),\r\n    );\r\n  #$sth=$g->{dbh}->prepare(\"select name,title from modules where name not regexp \\\"^PowerNet_Dev\\\" order by name\"); $sth->execute();\r\n  $sth=$g->{dbh}->prepare(\"select name,title from interface_modules order by name\"); $sth->execute();\r\n  my $bg=$g->{bgcolor};\r\n  while(my($name,$title)=$sth->fetchrow_array()){\r\n    if($bg eq $g->{bgcolor}){$bg=\"white\";}elsif($bg eq \"white\"){$bg=$g->{bgcolor};}\r\n    print \"<tr style=\\\"background-color: $bg\\\">\",\r\n    $g->{CGI}->td(\"$name\"),$g->{CGI}->td(\"$title\"),\"<td>\";\r\n    my @roles=split(/\\,/,$g->{my_roles});\r\n    foreach $role(@roles){\r\n      print $g->{CGI}->a({-href=>\"$g->{scriptname}?action=$role&name=$name&title=$title\"},\"$role\"),\"&nbsp;\";\r\n    }  \r\n    print \"</td></tr>\";\r\n  }\r\n  print $g->{CGI}->end_table();\r\n}\r\n\r\nsub tail{\r\n  #print $g->{CGI}->end_table();\r\n  #$g->{dbh}->disconnect();\r\n}\r\n\r\nsub connectsql{\r\n  open(FIL,\"</$g->{sql_powernet}\")|| die\"cannot open $g->{sqlconf} : $!\";\r\n  my ($d,$u,$p); while(my $line=<FIL>){chomp($line); if($line ne \"\"){($d,$u,$p)=split(/\\,/,$line); next;}}\r\n  $dbh=DBI->connect(\"DBI:mysql:$d\",\"$u\",\"$p\",{PrintError=>1,RaiseError=>1}) or \r\n    die\"Can not connect to database: $DBI::errstr\\n\";\r\n}\r\n\r\nsub skeleton{\r\n  my($grp,$opt,$scr)=@_;\r\n  print \"in skeleton...<br />\";\r\n  system(\"webp\");\r\n  if(-e \"$mod/$grp/$opt/$scr.pl\"){}\r\n  if(open(NEW,\">>modules/$grp/$opt/$scr.pl\")){\r\n    print NEW \"#!/usr/bin/perl\\n\";\r\n    print NEW \"# Interface Module Skeleton\\n\";\r\n    print NEW \"# This is an automatically generated skeleton module for Interface -BCIV\\n\\n\";\r\n    print NEW \"use DBI; my \\$dbh; my \\$sth; my \\$rv; # This is for database connectivity\\n\\n\";\r\n    print NEW \"use CGI; my \\$g->{CGI}=new CGI;              # This is for writting object oriented modules\\n\\n\";\r\n    print NEW \"my \\%v=\\@ARGV;                        # This is how http vars are passed a to module\\n\";\r\n    print NEW \"                                      #(as arguments into a hash).\\n\\n\";\r\n    print NEW \"# i.e., if you have a post/get variable called fred it will be seen as \\$v{fred} to\\n\";\r\n    print NEW \"# the module.\\n\\n\";\r\n    print NEW \"my \\$script_title=\\\"$v{title}\\\";\\n\\n\";\r\n    print NEW \"head();\\nbody();\\ntail();\\n\\n\";\r\n    print NEW \"sub body{\\n\";\r\n    print NEW \"  # this is the function that decides what the module is supposed to do when it is called\\n\";\r\n    print NEW \"  # what it does is determined by the \\$v{action} variable which is set through forms like\\n\";\r\n    print NEW \"  # the one called view shown below...\\n\";\r\n    print NEW \"  if(defined(\\$g->{action})){\\n\";\r\n    print NEW \"    if(\\$g->{action} eq \\\"someaction\\\"){\\n\";\r\n    print NEW \"      # an action is typically database modification routines or a call to a function\\n\";\r\n    print NEW \"      # view();\\n\";\r\n    print NEW \"      print \\$g->{CGI}->h2({-align=>\\\"center\\\",-bgcolor=>\\\"#dddddd\\\"},\\\"\\message: \\$g->{popup}\\\"),\\n\";\r\n    print NEW \"    }\\n\";\r\n    print NEW \"    else{print\\\"the action you have chosen doesn\\\'t exist<br />\\\";}\\n\";\r\n    print NEW \"  }else{view();}\\n\";\r\n    print NEW \"}\\n\\n\";\r\n    print NEW \"sub view{\\n\";\r\n    print NEW \"  print \\$g->{CGI}->start_table({-cols=>\\\"1\\\",-border=>\\\"0\\\",-width=>\\\"100%\\\",-align=>\\\"center\\\",-cellspacing=>\\\"0\\\"}),\\n\";\r\n    print NEW \"  \\$g->{CGI}->Tr(\\$g->{CGI}->td(\\n\";\r\n    print NEW \"    \\$g->{CGI}->start_form({-action=>\\\"\\$g->{scriptname}\\\",-method=>\\\"POST\\\"}),\\n\";\r\n    print NEW \"    \\$g->{CGI}->hidden({-name=>\\\"sid\\\",-value=>\\\"\\$g->{sid}\\\",-override=>\\\"1\\\"}),\\n\";\r\n    print NEW \"    \\$g->{CGI}->hidden({-name=>\\\"action\\\",-value=>\\\"someaction\\\",-override=>\\\"1\\\"}),\\n\";\r\n    print NEW \"    \\$g->{CGI}->textfield({-name=>\\\"example\\\",-value=>\\\"\\$g->{example}\\\",-override=>\\\"1\\\"}),\\n\";\r\n    print NEW \"    \\$g->{CGI}->popup_menu({-name=>\\\"popup\\\",-value=>[\\\"click me\\\",\\\"whoopie!\\\"],-default=>\\\"\\$g->{popup}\\\",-size=>\\\"10\\\",-override=>\\\"1\\\"}),\\n\";\r\n    print NEW \"    \\$g->{CGI}->submit(\\\"button text\\\"),\\n\";\r\n    print NEW \"    \\$g->{CGI}->end_form(),\\n\";\r\n    print NEW \"  ),),\\n\";\r\n    print NEW \"  \\$g->{CGI}->end_table(),\\n\";\r\n    print NEW \"  \\$g->{CGI}->hr(\\\"This is a skeleton module automatically generated by Interface.\\\");\\n\";\r\n    print NEW \"}\\n\\n\";\r\n    print NEW \"sub head{\\n\";\r\n    print NEW \"  # \\$dbh=DBI->connect(\\\"DBI:mysql:database\\\",\\\"user\\\",\\\"password\\\",{PrintError=>1,RaiseError=>1}) or\\n\";\r\n    print NEW \"  #   die \\\"Cannot connect to database : \\$DBI::errstr\\\";\\n\";\r\n    print NEW \"  print \\\"&nbsp;&#149;&nbsp;\\\",\\n\";\r\n    print NEW \"  \\$g->{CGI}->a({-href=>\\\"\\$g->{scriptname}?sid=\\$g->{sid}&action=YourAction\\\"},\\\"Add a new thingy\\\");\\n\";\r\n    print NEW \"  unless(\\$g->{action} eq \\\"\\\"){\\n\";\r\n    print NEW \"    print \\\"&nbsp;&#149;&nbsp;\\\",\\n\";\r\n    print NEW \"    \\$g->{CGI}->a({-href=>\\\"\\$g->{scriptname}?sid=\\$g->{sid}\\\"},\\\"Back\\\");\\n\";\r\n    print NEW \"  }\\n\";\r\n    print NEW \"  print \\$g->{CGI}->h1({-align=>\\\"center\\\"},\\\"\\$script_title\\\");\\n\";\r\n    print NEW \"}\\n\\n\";\r\n    print NEW \"sub tail{\\n  print \\$g->{CGI}->end_table();\\n  #\\$g->{dbh}->disconnect(); # This will close your database session\\n}\\n\\n\";\r\n    print NEW \"sub connectsql{\\n\";\r\n    print NEW \"  open(FIL,\\\"</\\$g->{sql_jahvastat}\\\")|| die\\\"cannot open \\$g->{sql_jahvastat} : \\$!\\\";\\n\";\r\n  	print NEW \"  my (\\$d,\\$u,\\$p); while(my \\$line=<FIL>){chomp(\\$line); if(\\$line ne \\\"\\\"){(\\$d,\\$u,\\$p)=split(/\\,/,\\$line); next;}}\\n\";\r\n    print NEW \"  \\$dbh=DBI->connect(\\\"DBI:mysql:\\$d\\\",\\\"\\$u\\\",\\\"\\$p\\\",\\n\";\r\n    print NEW \"      {PrintError=>1,RaiseError=>1}) or die\\\"Can not connect to database: \\$DBI::errstr\\n\\\";\\n\";\r\n    print NEW \"}\\n\\n\";\r\n\r\n    close(NEW);\r\n    system(\"webp\"); # fix permissions on script\r\n    print \"finished creating script\\n<br />\";\r\n  }else{print\"could not open : modules/$grp/$opt/$scr for writing : $!<br />\";}\r\n}\r\n\r\nsub msg{ my ($msg)=@_; print $g->{CGI}->h2({-align=>\"center\"},\"$msg\");}\r\n','active','0000-00-00 00:00:00',''),('interface_modules','0.0.0001','#!/usr/bin/perl\nmy $script_title=\"Modules\";\n\n# top menu items\nif($g->{my_roles}=~m/add/){\n  print $g->{CGI}->a({-href=>\"$g->{scriptname}?action=new\"},\"Add a new Module\");\n}\nunless($g->{action} eq \"\"){\n  print \"&nbsp;&#149;&nbsp;\", $g->{CGI}->a({-href=>\"$g->{scriptname}\"},\"Back\");\n}\nprint $g->{CGI}->h2({-align=>\"center\"},\"$script_title\");\n\n# run function for selected action\nunless(defined($g->{action}) ){view();}\n  elsif($g->{action} eq \"assign\"){access_editor();}\n  elsif($g->{action} eq \"modify_access\"){modify_group_access();}\n  elsif($g->{action} eq \"new\"){new();}\n  elsif($g->{action} eq \"add\"){add();}\n  elsif($g->{action} eq \"edit\"){edit();}\n  elsif($g->{action} eq \"properties\"){properties();}\n  elsif($g->{action} eq \"update\"){update();}\n  elsif($g->{action}=~m/role/){roles();}\n  elsif($g->{action}=~m/group/){groups();}\n  elsif($g->{action} eq \"delete\"){del();}\n  else{\n    print $g->{CGI}->h2({-align=>\"center\"},\n    \"The action you have selected, $g->{action}, does not exist\");\n}\n\n1; # end module\n\nsub groups{\n  print $g->{CGI}->h3({-align=>\"center\"},\"groups for $g->{name} module\");\n  my $total_groups=$g->{dbh}->selectrow_array(\"select groups from interface_modules where name=\'$g->{name}\'\");\n  if($v{action} eq \"delete_group\"){\n    print \"deleting \'$g->{group}\' group from $g->{name} module...<br />\";\n    $total_groups=~s/$g->{group}//; \n    $total_groups=~s/\\,\\,/\\,/; \n    $total_groups=~s/^\\,+//g; $total_groups=~s/\\,+$//g;\n    $g->{dbh}->do(\"update interface_modules set groups=\\\"$total_groups\\\" where name=\'$g->{name}\'\");\n  }\n  elsif($g->{action} eq \"add_group\"){\n    # add group\n    print \"adding \'$g->{group}\' group to $g->{name} module...<br />\";\n    if($total_groups ne \"\"){$total_groups=$total_groups.\"\\,\";}\n    $total_groups=$total_groups.\"$g->{group}\";\n    $g->{dbh}->do(\"update interface_modules set groups=\\\"$total_groups\\\" where name=\'$g->{name}\'\");\n  }\n  # print \"&nbsp;&#149;&nbsp;\",\n  # $g->{CGI}->a({-href=>\"\"},\"add a new group\");\n  # print \"roles: $total_groups<br />\";\n  my @total_groups=split(/\\,/,$total_groups); my $bg=$g->{bgcolor};\n  print $g->{CGI}->start_table({-cols=>\"2\",-align=>\"center\",-width=>\"70%\"}),\n  $g->{CGI}->Tr({-style=>\"background-color: $bg\"},\n    $g->{CGI}->th({-align=>\"left\"},\"groups\"),\n    $g->{CGI}->th({-align=>\"left\"},\"action\"),\n  );\n  foreach $group(@total_groups){\n    if($bg eq $v{bgcolor}){$bg=\"white\";}elsif($bg eq \"white\"){$bg=$g->{bgcolor};}\n    print $g->{CGI}->Tr({-style=>\"background-color: $bg\"},$g->{CGI}->td(\n      \"$group \"),\n      $g->{CGI}->td($g->{CGI}->a({-href=>\"$g->{scriptname}?action=delete_group&group=$group&name=$g->{name}\"},\"delete\"),\n    ));\n  }\n  print $g->{CGI}->start_form({-method=>\"get\",-action=>\"$g->{scriptname}\",-id=>\"id\"}),\n  $g->{CGI}->hidden({-name=>\"action\",-value=>\"add_group\",-override=>\"1\"}),\n  $g->{CGI}->hidden({-name=>\"name\",-value=>\"$g->{name}\"}),\n  $g->{CGI}->Tr(\n    $g->{CGI}->td(\n      $g->{CGI}->textfield({-name=>\"group\",-id=>\"input-focus\"}),\n    ),\n    $g->{CGI}->td(\n      $g->{CGI}->submit(\"Add Group\"),\n    ),\n  ),\n  $g->{CGI}->end_table();\n}\n\nsub roles{\n  print $g->{CGI}->h3({-align=>\"center\"},\"roles for $g->{name} module\");\n  my $total_roles=$g->{dbh}->selectrow_array(\"select roles from interface_modules where name=\'$g->{name}\'\");\n  if($v{action} eq \"delete_role\"){\n    print \"deleting \'$g->{role}\' role from $g->{name} module...<br />\";\n    $total_roles=~s/$g->{role}//; \n    $total_roles=~s/\\,\\,/\\,/; \n    $total_roles=~s/^\\,+//g; $total_roles=~s/\\,+$//g;\n    $g->{dbh}->do(\"update interface_modules set roles=\\\"$total_roles\\\" where name=\'$g->{name}\'\");\n  }\n  elsif($g->{action} eq \"add_role\"){\n    # add role\n    print \"adding \'$g->{role}\' role to $g->{name} module...<br />\";\n    if($total_roles ne \"\"){$total_roles=$total_roles.\"\\,\";}\n    $total_roles=$total_roles.\"$g->{role}\";\n    $g->{dbh}->do(\"update interface_modules set roles=\\\"$total_roles\\\" where name=\'$g->{name}\'\");\n  }\n  # print \"&nbsp;&#149;&nbsp;\",\n  # $g->{CGI}->a({-href=>\"\"},\"add a new role\");\n  # print \"roles: $total_roles<br />\";\n  my @total_roles=split(/\\,/,$total_roles); my $bg=$g->{bgcolor};\n  print $g->{CGI}->start_table({-cols=>\"2\",-align=>\"center\",-width=>\"70%\"}),\n  $g->{CGI}->Tr({-style=>\"background-color: $bg\"},\n    $g->{CGI}->th({-align=>\"left\"},\"roles\"),\n    $g->{CGI}->th({-align=>\"left\"},\"action\"),\n  );\n  foreach $role(@total_roles){\n    if($bg eq $g->{bgcolor}){$bg=\"white\";}elsif($bg eq \"white\"){$bg=$g->{bgcolor};}\n    print $g->{CGI}->Tr({-style=>\"background-color: $bg\"},$g->{CGI}->td(\n      \"$role \"),\n      $g->{CGI}->td($g->{CGI}->a({-href=>\"$g->{scriptname}?action=delete_role&role=$role&name=$g->{name}\"},\"delete\"),\n    ));\n  }\n  print $g->{CGI}->start_form({-method=>\"get\",-action=>\"$g->{scriptname}\",-id=>\"id\"}),\n  $g->{CGI}->hidden({-name=>\"action\",-value=>\"add_role\",-override=>\"1\"}),\n  $g->{CGI}->hidden({-name=>\"name\",-value=>\"$g->{name}\"}),\n  $g->{CGI}->Tr(\n    $g->{CGI}->td(\n      $g->{CGI}->textfield({-name=>\"role\",-id=>\"input-focus\"}),\n    ),\n    $g->{CGI}->td(\n      $g->{CGI}->submit(\"Add Role\"),\n    ),\n  ),\n  $g->{CGI}->end_table();\n}\n\nsub modify_group_access{\n  $sth=$g->{dbh}->do(\"update interface_module_users set $g->{name}=\\\"false\\\"\");\n  print \"<br />$g->{name} adding users: \";\n  for $usertoadd (sort keys %v){\n  if($usertoadd=~m/^u_/){\n      $usertoadd=substr($usertoadd,2);\n      print \"$usertoadd \";\n      # sql to add each iterated user to group\n      $sth=$g->{dbh}->do(\"update interface_module_users set $g->{name}=\\\"true\\\" where username=\\\"$usertoadd\\\"\");\n    }\n  }\n  print \"<br />\";\n  access_editor();\n}\n\nsub access_editor{\n  $sth=$g->{dbh}->prepare(\"select username,lname,fname,mi,suffix,service from interface_users order by username\"); $sth->execute();\n  my $modtitle=$v{name}; $modtitle=~s/\\_/ /; $modtitle=~s/\\_/ /;\n  print $g->{CGI}->h4(\"Checked users have access to the \'$modtitle\' module.\"),\n  \"<div style=\\\"top: 140; left: 0; width: 50%; height: 300px; overflow: scroll;\\\">\",\n  $g->{CGI}->start_form({-method=>\"post\",-action=>\"$g->{scriptname}\"}),\n  $g->{CGI}->hidden({-name=>\"action\",-value=>\"modify_access\",-override=>\"1\"}),\n  $g->{CGI}->hidden({-name=>\"name\",-value=>\"$g->{name}\",-override=>1}),\n  $g->{CGI}->start_table({-align=>\"right\",-cols=>2,-cellspacing=>0,-cellpadding=>0,-border=>0,-width=>\"100%\"});\n  my $grey=0;\n  while(my($u,$last,$first,$mi,$suffix,$service)=$sth->fetchrow_array()){\n    my $access=$g->{dbh}->selectrow_array(\"select $g->{name} from interface_module_users where username=\\\"$u\\\"\");\n    if($grey==0){print \"<Tr bgcolor=\\\"#fff0ff\\\">\"; ++$grey;}else{print \"<Tr>\"; --$grey;}\n    if($access eq \"true\"){\n      print \n      $g->{CGI}->td({-width=>\"20%\"},\"&nbsp;\"),\n      $g->{CGI}->td(\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=checkbox name=\\\"u_$u\\\" checked>   \",\n        $g->{CGI}->a({-href=>\"$g->{scriptname}?chmod=interface_users&action=edit&euname=$u\"},\"$last, $first $mi $suffix\"),\n      ); # $u\"),\n        # $g->{CGI}->td(\"&nbsp;$last, $first $mi $suffix\"),\n	# $g->{CGI}->td(\"$service\");\n    }\n    else{\n      print \n      $g->{CGI}->td(\"&nbsp;\"),\n      $g->{CGI}->td(\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=checkbox name=\\\"u_$u\\\" unchecked>   \",\n        $g->{CGI}->a({-href=>\"$g->{scriptname}?chmod=powernet_dev_users&action=edit&euname=$u\"},\"$last, $first $mi $suffix\"),\n      ); # $u\"),\n            # $g->{CGI}->td(\"&nbsp;$last, $first $mi $suffix\"),\n	    # $g->{CGI}->td(\"$service\");\n    }\n    print \"</Tr>\\n\";\n  }\n  print $g->{CGI}->end_table(),\n  \"&nbsp;<br /><br /><center>\",\"</div>\",\n  \"<div style=\\\"position: absolute; top: 140; left: 50%; width: 50%; padding-left: 4px; padding-right: 4px; height: 300px;\\\">\",\n  $g->{CGI}->h4({-align=>\"left\"},\"To grant/deny user module access, select a user and then click the \'Update Access List\' button.\"),\n  $g->{CGI}->submit(\"Update Access List\"),\"</center>\",\n  $g->{CGI}->end_table(),$g->{CGI}->end_form(),\n  \"</div>\";\n  # print \"<div style=\\\"position: absolute; top: 140; left: 50%; width: 50%; height: 300px;\\\">\",\n  # $g->{CGI}->h3({-align=>\"center\"},\"To enter a specific user enter username here:\"),\n  # $g->{CGI}->start_table({-align=>\"center\",-cols=>1,-cellspacing=>0,-cellpadding=>0,-border=>1}),\n  # $g->{CGI}->start_form({-method=>\"post\",-action=>\"$v{scriptname}\"}),\n  # $g->{CGI}->hidden({-name=>\"name\",-value=>\"$v{name}\",-override=>1}),\n  # $g->{CGI}->hidden({-name=>\"action\",-value=>\"finduser\"}),\n  # $g->{CGI}->Tr($g->{CGI}->td(\n  #  $g->{CGI}->textfield({-name=>\"eusername\",-value=>\"$v{eusername}\",-override=>\"1\"}),\n  #  $g->{CGI}->submit(\"search\"),\n  #),),\n  #$g->{CGI}->end_form(),\n  #$g->{CGI}->end_table(),\n  #\"</div>\";\n}\n\nsub add{\n  print \"adding $g->{name} $g->{title}<br />\";\n  my($grp,$scr)=split(/\\_/,lc($g->{name}));\n  unless(-d \"modules/$grp\"){\n    print \"creating path: modules/$grp<br />\";\n    mkdir \"modules/$grp\";\n  }\n  unless(-e \"modules/$grp/$scr\\.pl\"){\n    print \"creating empty module: modules/$grp/$scr\\.pl<br />\";\n    skeleton($grp,$scr);\n  }\n  else{\n    print \"I see your $scr\\.pl already exists...<br />\";\n  }\n  $g->{name}=lc($g->{name});\n  $g->{dbh}->do(\"insert into interface_modules values(\'$g->{name}\',\'$g->{title}\',NULL,NULL)\");\n  $g->{dbh}->do(\"alter table interface_module_users add column $g->{name} varchar(50)\");\n  $g->{dbh}->do(\"update interface_module_users set $g->{name}=\'true\' where username=\'$g->{sys_username}\'\");\n  view();\n}\n\nsub update{\n  # actually move module to it\'s new home...\n  if($g->{name} ne $g->{oldname}){\n    my ($grp,$opt,$scr)=split(/\\_/,lc($g->{oldname}));\n    if(-d \"modules/$grp/$opt\"){\n      if(-e \"modules/$grp/$opt/$scr\\.pl\"){\n        print \"modules/$grp/$opt/$scr\\.pl exists...<br />\";\n        my($ngrp,$nopt,$nscr)=split(/\\_/,lc($v{name}));\n        system(\"mkdir modules/$ngrp/$nopt/\");\n        system(\"mv modules/$grp/$opt/$scr\\.pl modules/$ngrp/$nopt/$nscr\\.pl\");\n        if(-e \"modules/$ngrp/$nopt/$nscr\\.pl\"){\n          print \"move to $ngrp/$nopt/$nscr successful! :)<br />\";\n        }\n        else{\n          print \"moving $grp/$opt/$scr to $ngrp/$nopt/$nscr failed! :(<br />\";\n        }\n      }else{print\"modules/$grp/$opt/$scr doesn\\\'t exist...<br />\";}\n    }else{print\"modules/$grp/$opt doesn\\\'t exist<br />\";}\n  }\n  $g->{dbh}->do(\"alter table interface_module_users drop column $g->{oldname}\");\n  $g->{dbh}->do(\"delete from interface_modules where name=\\\"$g->{oldname}\\\"\");\n  add();\n}\n\nsub del{\n  unless($g->{confirmation} eq \"true\"){\n    $g->msg(\"Module Deletion Confirmation\");\n    print $g->{CGI}->p(\"Are you sure you want to delete the \'<b><em>$g->{name}</em></b>\' module?\"),\n    $g->{CGI}->br,\n    $g->{CGI}->p(\"If you click \'Yes\', the module will be expunged and will no longer be present on this system.\"),\n    $g->{CGI}->br,\n    $g->{CGI}->start_form(),\n    $g->{CGI}->hidden({-name=>\"action\", -value=>\"delete\",-override=>\"1\"}),\n    $g->{CGI}->hidden({-name=>\"confirmation\", -value=>\"true\",-override=>\"1\"}),\n    $g->{CGI}->hidden({-name=>\"name\", -value=>\"$g->{name}\",-override=>\"1\"}),\n    $g->{CGI}->h2({-align=>\"center\"},\n      $g->{CGI}->submit(\"Delete \'$g->{name}\' module\"),\n      $g->{CGI}->button({-value=>\"Cancel\",-onClick=>\"history.go(-2);\"}),\n    ),\n    $g->{CGI}->end_form;\n  }\n  else{\n    msg(\"Module Deletion Confirmed\");\n    my($grp,$scr)=split(/\\_/,lc($g->{name}));\n    msg(\"deleting modules/$grp/$scr\\.pl...\");\n    system(\"rm modules/$grp/$scr\\.pl\");\n    unless(-e \"modules/$grp/$scr\\.pl\"){print \"successful.\";}\n    else{print\"failed.<br />\";}\n    $sth=$g->{dbh}->do(\"delete from interface_modules where name=\\\"$g->{name}\\\"\");\n    $sth=$g->{dbh}->do(\"alter table interface_module_users drop column $g->{name}\");\n    $sth=$g->{dbh}->do(\"delete from interface_module_access where module=\\\"$g->{name}\\\"\");\n    \n    print $g->{CGI}->p(\"The \'<b><em>$g->{name}</em></b>\' module has been deleted from this system.\"),\n    $g->{CGI}->br,\n    $g->{CGI}->p(\"All of the associated database entries relating to this module have been expunged and it will no longer be available.\"),\n    $g->{CGI}->h2({-align=>\"center\"},\n      $g->{CGI}->button({-value=>\"Continue\",-onClick=>\"location.href=\'$g->{scriptname}\'\"}),\n    );        \n  }\n}\n\n\nsub edit{\n  print \"\\n<!-- edit start -->\\n\";\n\n  my($name,$version,$source,$state); my $filepath=$g->{name}.\"\\.pl\"; $filepath=~s/\\_/\\//g;\n  if($g->{function} eq \"\"){\n    $g->{function}=\"update\";\n    print \"<!-- function was not set.  Set function to \'update\' -->\\n\";\n    # initially entering the editor $g->{name} has been passed with the $g->{action} set to \'edit\'\n    # change \'edit\' to \'save\' and then get the latest code from the database and load it into the editor.\n    ($name,$version,$source,$state)=$g->{dbh}->selectrow_array(\"select name,version,source,state from interface_module_source where name=\'$g->{name}\' and state=\'active\'\");\n    print \"here... name: $name version: $version state: $state<br />source: $source<br />\\n\";\n    unless($name eq \"$g->{name}\"){\n      print \"<!-- name ($name) did not match passed name var: \'$g->{name}\' -->\\n\";\n      # there is no database entry for the module chosen.  Create one on the fly for existing modules.\n      $name=\"$g->{name}\"; $version=\"0.0.0001\"; $stamp=$g->{dbh}->selectrow_array(\"select now()\"); $state=\'active\';\n      print $g->{CGI}->p(\"No source was present in database.  I am importing $name from $g->{modulepath}.\"),\"\\n\";\n      if(-e \"$g->{modulepath}\"){\n	print $g->{CGI}->p(\"$g->{modulepath} exist... importing source...\"),\"\\n\";\n        open(IN,\"<$g->{modulepath}\") or die \"I cannot open $name : $!\";\n	while(my $line=<IN>){$source.=$line;} close(IN);\n	  $sth=$g->{dbh}->prepare(\"insert into interface_module_source values(?,?,?,?,\'now()\',\'$g->{username}\')\");\n	  $sth->execute($name,$version,$source,$state) || die $g->{dbh}->errstr;\n	  $g->{function}=\"update\";\n	}\n	else{print $g->{CGI}->p(\"I cannot load the source from the database, and the module source does not exist.\"),\"\\n\"; exit;}\n      }\n    }\n    elsif($g->{function} eq \"update\"){\n      # update the datebase based on the modified form that passed data here.\n      $sth=$g->{dbh}->prepare(\"update interface_module_source set version=?,source=?,state=?,timestamp=\'now()\',modifiedby=\'$g->{username}\' where name=\'$g->{name}\'\");\n      $sth->execute($g->{version},$g->{source},$g->{state});\n      # update actual file to reflect changes\n      my $filepath=$g->{name}.\"\\.pl\"; $filepath=~s/\\_/\\//g;\n      print \"<br />modulepath: $g->{modulepath}<br />\\n\"\n      #open(OUT,\">$g->{modulepath}\") || die \"Cannot open module, $g->{modulepath} for writing :$!\";\n      #print OUT \"$g->{source}\";\n      #close(OUT);\n    }\n    elsif($g->{function} eq \"upload\"){upload();}\n    else{\n      print $g->{CGI}->p(\"The function you have selected does not exist.\"); exit;\n    }\n\n  # set webvars from what we get elsewhere if need be.\n  if($g->{name} eq \"\"){$g->{name}=$name;}\n  if($g->{version} eq \"\"){$g->{version}=$version;}\n  if($g->{source} eq \"\"){$g->{source}=$source;}\n  if($g->{state} eq \"\"){$g->{state}=$state;}\n  if($g->{stamp} eq \"\"){$g->{stamp}=$stamp;}\n  if($g->{published} eq \"\"){$g->{published}=$published;}\n  if($g->{lastmodified} eq \"\"){$g->{lastmodified}=$lastmodified;}\n  if($g->{modifiedby} eq \"\"){$g->{modifiedby}=$modifiedby;}\n\n  # put editor up on screen with the latest data...\n  print $g->{CGI}->start_form({-method=>\"post\",-action=>\"$g->{scriptname}\"}),\n    \"\\n<table comment=\\\"table for module editor\\\">\\n<tr>\\n\",\n    \"<td>\",$g->{CGI}->label({-for=>\"name\"},\"name of module\"),\"<br />\\n\",\n    $g->{CGI}->textfield({-name=>\"name\",-value=>\"$g->{name}\",-size=>\"20\",-override=>\"1\"}),\"</td>\\n\",\n    $g->{CGI}->hidden({-name=>\"action\",-value=>\"$g->{action}\",-override=>\"1\"}),\n    $g->{CGI}->hidden({-name=>\"function\",-value=>\"$g->{function}\",-override=>\"1\"}),\n    \"<td>\",$g->{CGI}->label({-for=>\"version\"},\"module version\"),\"<br />\\n\",\n    $g->{CGI}->textfield({-name=>\"version\",-value=>\"$g->{version}\",-override=>\"1\"}),\"</td>\\n\",\n    \"<td>\",$g->{CGI}->label({-for=>\"state\"},\"state of module\"),\"<br />\\n\",\n    $g->{CGI}->popup_menu({-name=>\"state\",-size=>\"1\",-value=>[\"\",\"active\",\"debug\"],-default=>\"$g->{state}\",-override=>\"1\"}),\"</td>\\n\",\n    # stamp & modifiedby are automatically updated without any interaction...\n    \"<td>\",$g->{CGI}->submit(\"$g->{function}\"),\"</td>\\n</tr>\\n</table>\\n\",\n    $g->{CGI}->textarea({-name=>\"source\",value=>\"$g->{source}\",-rows=>\"20\",-override=>\"1\"}),\n  $g->{CGI}->end_form(),\"\\n\";\n  #print \"\\nfunction: \'$g->{function}\' action: \'$g->{action}\' title: \'$g->{title}\' \\n\";\n\n  #sub upload{\n  #  if($g->{id} eq \"\"){print \"Upload parameters where in an unacceptible format.<hr />\\n\"; return;}\n#	  my $textdata;\n#	  unless(-d \"$docs_upload/$g->{id}\"){system(\"mkdir $docs_upload/$g->{id}\"); print \"\\ncreating $docs_upload/$g->{id} folder...<br />\\n\";}\n#	  my($fn,$ext)=split(/\\./,$g->{uploadfilename}); $ext=lc($ext);\n#	  if($ext=~m/jpg/ or $ext=~m/jpeg/ or $ext=~m/gif/ or $ext=~m/png/){\n#	    system(\"mv $g->{uploaddir}/$g->{uploadfilename} $docs_upload/$g->{id}/$g->{uploadfilename}\");\n #     print \"<b>$g->{uploadfilename}</b> has been uploaded to <b>$docs_upload/$g->{id}/$g->{uploadfilename}</b> directory.<br />\\n\";\n  #    if($g->{type} eq \"text\"){\n   #     print \"prepared text image insertion token.<br />\\n\"; $g->{data}.=\"\\n\\[image\\: \\\"$g->{uploadfilename}\\\" caption: \\\"\\\" location: \\\"\\\" \\]\\n\";\n    #  }\n     # elsif($g->{type} eq \"html\"){\n#        print \"prepared html image insertion token.<br />\\n\"; $g->{data}.=\"\\n<img src=\\\"/docs/$g->{id}/$g->{uploadfilename}\\\" /><br \\/>\\n\";\n#      }\n#      elsif($g->{type} eq \"xml\"){\n#        print \"prepared xml image insertion token.<br />\\n\";\n#        print \"<p> There is currently no XML tag for this upload type </p>\"; $g->{data}.=\"\\n<imagetag><name>$g->{uploadfilename}</name></imagetag>\\n\";\n#      }\n#      print \"inserting image insertion token into database record<br />\\n\";\n#      $sth=$g->{dbh}->prepare(\"update system set data=? where id=$g->{id}\") || die $g->{dbh}->errstr;\n#      $sth->execute($g->{data}) || die $g->{dbh}->errstr;\n#    }\n#    elsif($ext=~m/txt/){ # uploading a txt file into the editor...\n#      print \"inserting text data into database record<br />\\n\";\n#	    open(IN,\"<$g->{uploaddir}/$g->{uploadfilename}\")||die\"cannot open file for reading : $!\";\n#	    while(my $line=<IN>){chomp $line; $textdata.=\"$line\\n\";}\n#	    close(IN);\n#	    $g->{data}.=$textdata;\n#	    system(\"rm $g->{uploaddir}/$g->{uploadfilename}\");\n#      # print \"$g->{data}<br />\\n\";\n#      $sth=$g->{dbh}->prepare(\"update system set data=? where id=$g->{id}\") || die $g->{dbh}->errstr;\n#      $sth->execute($g->{data}) || die $g->{dbh}->errstr;\n#    }\n#    else{\n#	    system(\"rm $g->{uploaddir}/$g->{uploadfilename}\");\n#	    print $g->{CGI}->font({-face=>\"Arial\",-size=>\"4\",-color=>\"red\"},\"You can only upload .jpeg, .gif, .png image and .txt files.\");\n#  } }\n  print \"\\n<!-- edit end -->\\n\";\n}\n\nsub properties{\n  print\n  $g->{CGI}->h3({-align=>\"center\"},\"Editing properties of \\\"$g->{name}\\\" module.\"),\n  $g->{CGI}->start_form({-action=>\"$g->{scriptname}\",-method=>\"post\"}),\n  $g->{CGI}->hidden({-name=>\"action\",-value=>\"update\",-override=>\"1\"}),\n  $g->{CGI}->hidden({-name=>\"oldname\",-value=>\"$g->{name}\"}),\n  $g->{CGI}->start_table({-cols=>\"3\",-cellspacing=>0,-cellpadding=>0,-border=>0,-width=>\"50%\",-align=>\"center\"}),\n  $g->{CGI}->Tr({-bgcolor=>\"#fff9ff\"},\n    $g->{CGI}->td({-align=>\"right\"},\"Module Title&nbsp;&nbsp;\"),\n    $g->{CGI}->td($g->{CGI}->textfield({-name=>\"title\",-value=>\"$g->{title}\",-override=>\"1\"}),),\n  ),\n  $g->{CGI}->Tr({-bgcolor=>\"#fff9ff\"},\n    $g->{CGI}->td({-align=>\"right\"},\"Group_Option_Module&nbsp;&nbsp;\"),\n    $g->{CGI}->td($g->{CGI}->textfield({-name=>\"name\",-value=>\"$g->{name}\",-override=>\"1\"}),),\n  ),\n  $g->{CGI}->Tr({-bgcolor=>\"#fff9ff\"},$g->{CGI}->td(\" \"),$g->{CGI}->td($g->{CGI}->submit(\"Save\"),),),\n  $g->{CGI}->end_form,\n  $g->{CGI}->end_table();\n}\n\nsub new{\n  print\n  $g->{CGI}->p(\"To add a new module to DIFR you must define two things; what application group it belongs to and \",\n        \"the name of the new module.\"\n  ),\n  $g->{CGI}->p(\"<font size=+2>Group:</font> <b><em>interface</em></b> would be the group you would use for a module that would be available to core DIFR administrators while \",\n        \"<b><em>rcs</em></b> would be the name of the group for existing and new <b><em>rcs</em></b> application modules.\",\n  ),\n  $g->{CGI}->p(\"<font size=+2>Module:</font> The name of the module is the actual executable name and does not require any extension {i.e., \'.pl\'}.\",\n        \"The group and name do not contain spaces and are seperated by an underscore character, \'_\'\",\n  ),\n  $g->{CGI}->start_form({-action=>\"$g->{scriptname}\",-method=>\"get\"}),\n  $g->{CGI}->hidden({-name=>\"action\",-value=>\"add\",-override=>\"1\"}),\n  $g->{CGI}->start_table({-cols=>\"3\",-cellspacing=>0,-cellpadding=>0,-border=>0,-width=>\"50%\",-align=>\"center\"}),\n  $g->{CGI}->Tr({-bgcolor=>\"$g->{bgcolor}\"},\n    $g->{CGI}->td({-align=>\"right\"},\"Module Title&nbsp;&nbsp;\"),\n    $g->{CGI}->td($g->{CGI}->textfield({-name=>\"title\",-value=>\"$g->{title}\",-override=>\"1\"}),),\n  ),\n  $g->{CGI}->Tr({-bgcolor=>\"$g->{bgcolor}\"},\n    $g->{CGI}->td({-align=>\"right\"},\"group_module&nbsp;&nbsp;\"),\n    $g->{CGI}->td($g->{CGI}->textfield({-name=>\"name\",-value=>\"$g->{name}\",-override=>\"1\"}),),\n  ),\n  $g->{CGI}->Tr({-bgcolor=>\"$g->{bgcolor}\"},$g->{CGI}->td(\" \"),$g->{CGI}->td($g->{CGI}->submit(\"Save\"),),),\n  $g->{CGI}->end_form,\n  $g->{CGI}->end_table();\n}\n\nsub view{\n  #print \"roles: $g->{my_roles}<br />\";\n  print \n  $g->{CGI}->start_table({-cols=>\"3\",-cellspacing=>0,-cellpadding=>0,-border=>0,-width=>\"80%\",-align=>\"center\"}),\n    $g->{CGI}->Tr({-style=>\"background-color: $g->{bgcolor}\"},\n      $g->{CGI}->th(\"Group_ModuleName\"),\n      $g->{CGI}->th(\"Module Title\"),\n      $g->{CGI}->th(\"Action\"),\n    );\n  #$sth=$g->{dbh}->prepare(\"select name,title from modules where name not regexp \\\"^PowerNet_Dev\\\" order by name\"); $sth->execute();\n  $sth=$g->{dbh}->prepare(\"select name,title from interface_modules order by name\"); $sth->execute();\n  my $bg=$g->{bgcolor};\n  while(my($name,$title)=$sth->fetchrow_array()){\n    if($bg eq $g->{bgcolor}){$bg=\"white\";}elsif($bg eq \"white\"){$bg=$g->{bgcolor};}\n    print \"<tr style=\\\"background-color: $bg\\\">\",\n    $g->{CGI}->td(\"$name\"),$g->{CGI}->td(\"$title\"),\"<td>\";\n    my @roles=split(/\\,/,$g->{my_roles});\n    foreach $role(@roles){\n      print $g->{CGI}->a({-href=>\"$g->{scriptname}?action=$role&name=$name&title=$title\"},\"$role\"),\"&nbsp;\";\n    }  \n    print \"</td></tr>\";\n  }\n  print $g->{CGI}->end_table();\n}\n\nsub tail{\n  #print $g->{CGI}->end_table();\n  #$g->{dbh}->disconnect();\n}\n\nsub connectsql{\n  open(FIL,\"</$g->{sql_powernet}\")|| die\"cannot open $g->{sqlconf} : $!\";\n  my ($d,$u,$p); while(my $line=<FIL>){chomp($line); if($line ne \"\"){($d,$u,$p)=split(/\\,/,$line); next;}}\n  $dbh=DBI->connect(\"DBI:mysql:$d\",\"$u\",\"$p\",{PrintError=>1,RaiseError=>1}) or \n    die\"Can not connect to database: $DBI::errstr\\n\";\n}\n\nsub skeleton{\n  my($grp,$opt,$scr)=@_;\n  print \"in skeleton...<br />\";\n  system(\"webp\");\n  if(-e \"$mod/$grp/$opt/$scr.pl\"){}\n  if(open(NEW,\">>modules/$grp/$opt/$scr.pl\")){\n    print NEW \"#!/usr/bin/perl\\n\";\n    print NEW \"# Interface Module Skeleton\\n\";\n    print NEW \"# This is an automatically generated skeleton module for Interface -BCIV\\n\\n\";\n    print NEW \"use DBI; my \\$dbh; my \\$sth; my \\$rv; # This is for database connectivity\\n\\n\";\n    print NEW \"use CGI; my \\$g->{CGI}=new CGI;              # This is for writting object oriented modules\\n\\n\";\n    print NEW \"my \\%v=\\@ARGV;                        # This is how http vars are passed a to module\\n\";\n    print NEW \"                                      #(as arguments into a hash).\\n\\n\";\n    print NEW \"# i.e., if you have a post/get variable called fred it will be seen as \\$v{fred} to\\n\";\n    print NEW \"# the module.\\n\\n\";\n    print NEW \"my \\$script_title=\\\"$v{title}\\\";\\n\\n\";\n    print NEW \"head();\\nbody();\\ntail();\\n\\n\";\n    print NEW \"sub body{\\n\";\n    print NEW \"  # this is the function that decides what the module is supposed to do when it is called\\n\";\n    print NEW \"  # what it does is determined by the \\$v{action} variable which is set through forms like\\n\";\n    print NEW \"  # the one called view shown below...\\n\";\n    print NEW \"  if(defined(\\$g->{action})){\\n\";\n    print NEW \"    if(\\$g->{action} eq \\\"someaction\\\"){\\n\";\n    print NEW \"      # an action is typically database modification routines or a call to a function\\n\";\n    print NEW \"      # view();\\n\";\n    print NEW \"      print \\$g->{CGI}->h2({-align=>\\\"center\\\",-bgcolor=>\\\"#dddddd\\\"},\\\"\\message: \\$g->{popup}\\\"),\\n\";\n    print NEW \"    }\\n\";\n    print NEW \"    else{print\\\"the action you have chosen doesn\\\'t exist<br />\\\";}\\n\";\n    print NEW \"  }else{view();}\\n\";\n    print NEW \"}\\n\\n\";\n    print NEW \"sub view{\\n\";\n    print NEW \"  print \\$g->{CGI}->start_table({-cols=>\\\"1\\\",-border=>\\\"0\\\",-width=>\\\"100%\\\",-align=>\\\"center\\\",-cellspacing=>\\\"0\\\"}),\\n\";\n    print NEW \"  \\$g->{CGI}->Tr(\\$g->{CGI}->td(\\n\";\n    print NEW \"    \\$g->{CGI}->start_form({-action=>\\\"\\$g->{scriptname}\\\",-method=>\\\"POST\\\"}),\\n\";\n    print NEW \"    \\$g->{CGI}->hidden({-name=>\\\"sid\\\",-value=>\\\"\\$g->{sid}\\\",-override=>\\\"1\\\"}),\\n\";\n    print NEW \"    \\$g->{CGI}->hidden({-name=>\\\"action\\\",-value=>\\\"someaction\\\",-override=>\\\"1\\\"}),\\n\";\n    print NEW \"    \\$g->{CGI}->textfield({-name=>\\\"example\\\",-value=>\\\"\\$g->{example}\\\",-override=>\\\"1\\\"}),\\n\";\n    print NEW \"    \\$g->{CGI}->popup_menu({-name=>\\\"popup\\\",-value=>[\\\"click me\\\",\\\"whoopie!\\\"],-default=>\\\"\\$g->{popup}\\\",-size=>\\\"10\\\",-override=>\\\"1\\\"}),\\n\";\n    print NEW \"    \\$g->{CGI}->submit(\\\"button text\\\"),\\n\";\n    print NEW \"    \\$g->{CGI}->end_form(),\\n\";\n    print NEW \"  ),),\\n\";\n    print NEW \"  \\$g->{CGI}->end_table(),\\n\";\n    print NEW \"  \\$g->{CGI}->hr(\\\"This is a skeleton module automatically generated by Interface.\\\");\\n\";\n    print NEW \"}\\n\\n\";\n    print NEW \"sub head{\\n\";\n    print NEW \"  # \\$dbh=DBI->connect(\\\"DBI:mysql:database\\\",\\\"user\\\",\\\"password\\\",{PrintError=>1,RaiseError=>1}) or\\n\";\n    print NEW \"  #   die \\\"Cannot connect to database : \\$DBI::errstr\\\";\\n\";\n    print NEW \"  print \\\"&nbsp;&#149;&nbsp;\\\",\\n\";\n    print NEW \"  \\$g->{CGI}->a({-href=>\\\"\\$g->{scriptname}?sid=\\$g->{sid}&action=YourAction\\\"},\\\"Add a new thingy\\\");\\n\";\n    print NEW \"  unless(\\$g->{action} eq \\\"\\\"){\\n\";\n    print NEW \"    print \\\"&nbsp;&#149;&nbsp;\\\",\\n\";\n    print NEW \"    \\$g->{CGI}->a({-href=>\\\"\\$g->{scriptname}?sid=\\$g->{sid}\\\"},\\\"Back\\\");\\n\";\n    print NEW \"  }\\n\";\n    print NEW \"  print \\$g->{CGI}->h1({-align=>\\\"center\\\"},\\\"\\$script_title\\\");\\n\";\n    print NEW \"}\\n\\n\";\n    print NEW \"sub tail{\\n  print \\$g->{CGI}->end_table();\\n  #\\$g->{dbh}->disconnect(); # This will close your database session\\n}\\n\\n\";\n    print NEW \"sub connectsql{\\n\";\n    print NEW \"  open(FIL,\\\"</\\$g->{sql_jahvastat}\\\")|| die\\\"cannot open \\$g->{sql_jahvastat} : \\$!\\\";\\n\";\n  	print NEW \"  my (\\$d,\\$u,\\$p); while(my \\$line=<FIL>){chomp(\\$line); if(\\$line ne \\\"\\\"){(\\$d,\\$u,\\$p)=split(/\\,/,\\$line); next;}}\\n\";\n    print NEW \"  \\$dbh=DBI->connect(\\\"DBI:mysql:\\$d\\\",\\\"\\$u\\\",\\\"\\$p\\\",\\n\";\n    print NEW \"      {PrintError=>1,RaiseError=>1}) or die\\\"Can not connect to database: \\$DBI::errstr\\n\\\";\\n\";\n    print NEW \"}\\n\\n\";\n\n    close(NEW);\n    system(\"webp\"); # fix permissions on script\n    print \"finished creating script\\n<br />\";\n  }else{print\"could not open : modules/$grp/$opt/$scr for writing : $!<br />\";}\n}\n\nsub msg{ my ($msg)=@_; print $g->{CGI}->h2({-align=>\"center\"},\"$msg\");}\n','active','0000-00-00 00:00:00',''),('interface_elements','0.0.0001','#!/usr/bin/perl\nmy $script_title=\"Modules\";\n\n# top menu items\nif($g->{my_roles}=~m/add/){\n  print $g->{CGI}->a({-href=>\"$g->{scriptname}?action=new\"},\"Add a new Module\");\n}\nunless($g->{action} eq \"\"){\n  print \"&nbsp;&#149;&nbsp;\", $g->{CGI}->a({-href=>\"$g->{scriptname}\"},\"Back\");\n}\nprint $g->{CGI}->h2({-align=>\"center\"},\"$script_title\");\n\n# run function for selected action\nunless(defined($g->{action}) ){view();}\n  elsif($g->{action} eq \"assign\"){access_editor();}\n  elsif($g->{action} eq \"modify_access\"){modify_group_access();}\n  elsif($g->{action} eq \"new\"){new();}\n  elsif($g->{action} eq \"add\"){add();}\n  elsif($g->{action} eq \"edit\"){edit();}\n  elsif($g->{action} eq \"properties\"){properties();}\n  elsif($g->{action} eq \"update\"){update();}\n  elsif($g->{action}=~m/role/){roles();}\n  elsif($g->{action}=~m/group/){groups();}\n  elsif($g->{action} eq \"delete\"){del();}\n  else{\n    print $g->{CGI}->h2({-align=>\"center\"},\n    \"The action you have selected, $g->{action}, does not exist\");\n}\n\n1; # end module\n\nsub groups{\n  print $g->{CGI}->h3({-align=>\"center\"},\"groups for $g->{name} module\");\n  my $total_groups=$g->{dbh}->selectrow_array(\"select groups from interface_modules where name=\'$g->{name}\'\");\n  if($v{action} eq \"delete_group\"){\n    print \"deleting \'$g->{group}\' group from $g->{name} module...<br />\";\n    $total_groups=~s/$g->{group}//; \n    $total_groups=~s/\\,\\,/\\,/; \n    $total_groups=~s/^\\,+//g; $total_groups=~s/\\,+$//g;\n    $g->{dbh}->do(\"update interface_modules set groups=\\\"$total_groups\\\" where name=\'$g->{name}\'\");\n  }\n  elsif($g->{action} eq \"add_group\"){\n    # add group\n    print \"adding \'$g->{group}\' group to $g->{name} module...<br />\";\n    if($total_groups ne \"\"){$total_groups=$total_groups.\"\\,\";}\n    $total_groups=$total_groups.\"$g->{group}\";\n    $g->{dbh}->do(\"update interface_modules set groups=\\\"$total_groups\\\" where name=\'$g->{name}\'\");\n  }\n  # print \"&nbsp;&#149;&nbsp;\",\n  # $g->{CGI}->a({-href=>\"\"},\"add a new group\");\n  # print \"roles: $total_groups<br />\";\n  my @total_groups=split(/\\,/,$total_groups); my $bg=$g->{bgcolor};\n  print $g->{CGI}->start_table({-cols=>\"2\",-align=>\"center\",-width=>\"70%\"}),\n  $g->{CGI}->Tr({-style=>\"background-color: $bg\"},\n    $g->{CGI}->th({-align=>\"left\"},\"groups\"),\n    $g->{CGI}->th({-align=>\"left\"},\"action\"),\n  );\n  foreach $group(@total_groups){\n    if($bg eq $v{bgcolor}){$bg=\"white\";}elsif($bg eq \"white\"){$bg=$g->{bgcolor};}\n    print $g->{CGI}->Tr({-style=>\"background-color: $bg\"},$g->{CGI}->td(\n      \"$group \"),\n      $g->{CGI}->td($g->{CGI}->a({-href=>\"$g->{scriptname}?action=delete_group&group=$group&name=$g->{name}\"},\"delete\"),\n    ));\n  }\n  print $g->{CGI}->start_form({-method=>\"get\",-action=>\"$g->{scriptname}\",-id=>\"id\"}),\n  $g->{CGI}->hidden({-name=>\"action\",-value=>\"add_group\",-override=>\"1\"}),\n  $g->{CGI}->hidden({-name=>\"name\",-value=>\"$g->{name}\"}),\n  $g->{CGI}->Tr(\n    $g->{CGI}->td(\n      $g->{CGI}->textfield({-name=>\"group\",-id=>\"input-focus\"}),\n    ),\n    $g->{CGI}->td(\n      $g->{CGI}->submit(\"Add Group\"),\n    ),\n  ),\n  $g->{CGI}->end_table();\n}\n\nsub roles{\n  print $g->{CGI}->h3({-align=>\"center\"},\"roles for $g->{name} module\");\n  my $total_roles=$g->{dbh}->selectrow_array(\"select roles from interface_modules where name=\'$g->{name}\'\");\n  if($v{action} eq \"delete_role\"){\n    print \"deleting \'$g->{role}\' role from $g->{name} module...<br />\";\n    $total_roles=~s/$g->{role}//; \n    $total_roles=~s/\\,\\,/\\,/; \n    $total_roles=~s/^\\,+//g; $total_roles=~s/\\,+$//g;\n    $g->{dbh}->do(\"update interface_modules set roles=\\\"$total_roles\\\" where name=\'$g->{name}\'\");\n  }\n  elsif($g->{action} eq \"add_role\"){\n    # add role\n    print \"adding \'$g->{role}\' role to $g->{name} module...<br />\";\n    if($total_roles ne \"\"){$total_roles=$total_roles.\"\\,\";}\n    $total_roles=$total_roles.\"$g->{role}\";\n    $g->{dbh}->do(\"update interface_modules set roles=\\\"$total_roles\\\" where name=\'$g->{name}\'\");\n  }\n  # print \"&nbsp;&#149;&nbsp;\",\n  # $g->{CGI}->a({-href=>\"\"},\"add a new role\");\n  # print \"roles: $total_roles<br />\";\n  my @total_roles=split(/\\,/,$total_roles); my $bg=$g->{bgcolor};\n  print $g->{CGI}->start_table({-cols=>\"2\",-align=>\"center\",-width=>\"70%\"}),\n  $g->{CGI}->Tr({-style=>\"background-color: $bg\"},\n    $g->{CGI}->th({-align=>\"left\"},\"roles\"),\n    $g->{CGI}->th({-align=>\"left\"},\"action\"),\n  );\n  foreach $role(@total_roles){\n    if($bg eq $g->{bgcolor}){$bg=\"white\";}elsif($bg eq \"white\"){$bg=$g->{bgcolor};}\n    print $g->{CGI}->Tr({-style=>\"background-color: $bg\"},$g->{CGI}->td(\n      \"$role \"),\n      $g->{CGI}->td($g->{CGI}->a({-href=>\"$g->{scriptname}?action=delete_role&role=$role&name=$g->{name}\"},\"delete\"),\n    ));\n  }\n  print $g->{CGI}->start_form({-method=>\"get\",-action=>\"$g->{scriptname}\",-id=>\"id\"}),\n  $g->{CGI}->hidden({-name=>\"action\",-value=>\"add_role\",-override=>\"1\"}),\n  $g->{CGI}->hidden({-name=>\"name\",-value=>\"$g->{name}\"}),\n  $g->{CGI}->Tr(\n    $g->{CGI}->td(\n      $g->{CGI}->textfield({-name=>\"role\",-id=>\"input-focus\"}),\n    ),\n    $g->{CGI}->td(\n      $g->{CGI}->submit(\"Add Role\"),\n    ),\n  ),\n  $g->{CGI}->end_table();\n}\n\nsub modify_group_access{\n  $sth=$g->{dbh}->do(\"update interface_module_users set $g->{name}=\\\"false\\\"\");\n  print \"<br />$g->{name} adding users: \";\n  for $usertoadd (sort keys %v){\n  if($usertoadd=~m/^u_/){\n      $usertoadd=substr($usertoadd,2);\n      print \"$usertoadd \";\n      # sql to add each iterated user to group\n      $sth=$g->{dbh}->do(\"update interface_module_users set $g->{name}=\\\"true\\\" where username=\\\"$usertoadd\\\"\");\n    }\n  }\n  print \"<br />\";\n  access_editor();\n}\n\nsub access_editor{\n  $sth=$g->{dbh}->prepare(\"select username,lname,fname,mi,suffix,service from interface_users order by username\"); $sth->execute();\n  my $modtitle=$v{name}; $modtitle=~s/\\_/ /; $modtitle=~s/\\_/ /;\n  print $g->{CGI}->h4(\"Checked users have access to the \'$modtitle\' module.\"),\n  \"<div style=\\\"top: 140; left: 0; width: 50%; height: 300px; overflow: scroll;\\\">\",\n  $g->{CGI}->start_form({-method=>\"post\",-action=>\"$g->{scriptname}\"}),\n  $g->{CGI}->hidden({-name=>\"action\",-value=>\"modify_access\",-override=>\"1\"}),\n  $g->{CGI}->hidden({-name=>\"name\",-value=>\"$g->{name}\",-override=>1}),\n  $g->{CGI}->start_table({-align=>\"right\",-cols=>2,-cellspacing=>0,-cellpadding=>0,-border=>0,-width=>\"100%\"});\n  my $grey=0;\n  while(my($u,$last,$first,$mi,$suffix,$service)=$sth->fetchrow_array()){\n    my $access=$g->{dbh}->selectrow_array(\"select $g->{name} from interface_module_users where username=\\\"$u\\\"\");\n    if($grey==0){print \"<Tr bgcolor=\\\"#fff0ff\\\">\"; ++$grey;}else{print \"<Tr>\"; --$grey;}\n    if($access eq \"true\"){\n      print \n      $g->{CGI}->td({-width=>\"20%\"},\"&nbsp;\"),\n      $g->{CGI}->td(\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=checkbox name=\\\"u_$u\\\" checked>   \",\n        $g->{CGI}->a({-href=>\"$g->{scriptname}?chmod=interface_users&action=edit&euname=$u\"},\"$last, $first $mi $suffix\"),\n      ); # $u\"),\n        # $g->{CGI}->td(\"&nbsp;$last, $first $mi $suffix\"),\n	# $g->{CGI}->td(\"$service\");\n    }\n    else{\n      print \n      $g->{CGI}->td(\"&nbsp;\"),\n      $g->{CGI}->td(\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=checkbox name=\\\"u_$u\\\" unchecked>   \",\n        $g->{CGI}->a({-href=>\"$g->{scriptname}?chmod=powernet_dev_users&action=edit&euname=$u\"},\"$last, $first $mi $suffix\"),\n      ); # $u\"),\n            # $g->{CGI}->td(\"&nbsp;$last, $first $mi $suffix\"),\n	    # $g->{CGI}->td(\"$service\");\n    }\n    print \"</Tr>\\n\";\n  }\n  print $g->{CGI}->end_table(),\n  \"&nbsp;<br /><br /><center>\",\"</div>\",\n  \"<div style=\\\"position: absolute; top: 140; left: 50%; width: 50%; padding-left: 4px; padding-right: 4px; height: 300px;\\\">\",\n  $g->{CGI}->h4({-align=>\"left\"},\"To grant/deny user module access, select a user and then click the \'Update Access List\' button.\"),\n  $g->{CGI}->submit(\"Update Access List\"),\"</center>\",\n  $g->{CGI}->end_table(),$g->{CGI}->end_form(),\n  \"</div>\";\n  # print \"<div style=\\\"position: absolute; top: 140; left: 50%; width: 50%; height: 300px;\\\">\",\n  # $g->{CGI}->h3({-align=>\"center\"},\"To enter a specific user enter username here:\"),\n  # $g->{CGI}->start_table({-align=>\"center\",-cols=>1,-cellspacing=>0,-cellpadding=>0,-border=>1}),\n  # $g->{CGI}->start_form({-method=>\"post\",-action=>\"$v{scriptname}\"}),\n  # $g->{CGI}->hidden({-name=>\"name\",-value=>\"$v{name}\",-override=>1}),\n  # $g->{CGI}->hidden({-name=>\"action\",-value=>\"finduser\"}),\n  # $g->{CGI}->Tr($g->{CGI}->td(\n  #  $g->{CGI}->textfield({-name=>\"eusername\",-value=>\"$v{eusername}\",-override=>\"1\"}),\n  #  $g->{CGI}->submit(\"search\"),\n  #),),\n  #$g->{CGI}->end_form(),\n  #$g->{CGI}->end_table(),\n  #\"</div>\";\n}\n\nsub add{\n  print \"adding $g->{name} $g->{title}<br />\";\n  my($grp,$scr)=split(/\\_/,lc($g->{name}));\n  unless(-d \"modules/$grp\"){\n    print \"creating path: modules/$grp<br />\";\n    mkdir \"modules/$grp\";\n  }\n  unless(-e \"modules/$grp/$scr\\.pl\"){\n    print \"creating empty module: modules/$grp/$scr\\.pl<br />\";\n    skeleton($grp,$scr);\n  }\n  else{\n    print \"I see your $scr\\.pl already exists...<br />\";\n  }\n  $g->{name}=lc($g->{name});\n  $g->{dbh}->do(\"insert into interface_modules values(\'$g->{name}\',\'$g->{title}\',NULL,NULL)\");\n  $g->{dbh}->do(\"alter table interface_module_users add column $g->{name} varchar(50)\");\n  $g->{dbh}->do(\"update interface_module_users set $g->{name}=\'true\' where username=\'$g->{sys_username}\'\");\n  view();\n}\n\nsub update{\n  # actually move module to it\'s new home...\n  if($g->{name} ne $g->{oldname}){\n    my ($grp,$opt,$scr)=split(/\\_/,lc($g->{oldname}));\n    if(-d \"modules/$grp/$opt\"){\n      if(-e \"modules/$grp/$opt/$scr\\.pl\"){\n        print \"modules/$grp/$opt/$scr\\.pl exists...<br />\";\n        my($ngrp,$nopt,$nscr)=split(/\\_/,lc($v{name}));\n        system(\"mkdir modules/$ngrp/$nopt/\");\n        system(\"mv modules/$grp/$opt/$scr\\.pl modules/$ngrp/$nopt/$nscr\\.pl\");\n        if(-e \"modules/$ngrp/$nopt/$nscr\\.pl\"){\n          print \"move to $ngrp/$nopt/$nscr successful! :)<br />\";\n        }\n        else{\n          print \"moving $grp/$opt/$scr to $ngrp/$nopt/$nscr failed! :(<br />\";\n        }\n      }else{print\"modules/$grp/$opt/$scr doesn\\\'t exist...<br />\";}\n    }else{print\"modules/$grp/$opt doesn\\\'t exist<br />\";}\n  }\n  $g->{dbh}->do(\"alter table interface_module_users drop column $g->{oldname}\");\n  $g->{dbh}->do(\"delete from interface_modules where name=\\\"$g->{oldname}\\\"\");\n  add();\n}\n\nsub del{\n  unless($g->{confirmation} eq \"true\"){\n    $g->msg(\"Module Deletion Confirmation\");\n    print $g->{CGI}->p(\"Are you sure you want to delete the \'<b><em>$g->{name}</em></b>\' module?\"),\n    $g->{CGI}->br,\n    $g->{CGI}->p(\"If you click \'Yes\', the module will be expunged and will no longer be present on this system.\"),\n    $g->{CGI}->br,\n    $g->{CGI}->start_form(),\n    $g->{CGI}->hidden({-name=>\"action\", -value=>\"delete\",-override=>\"1\"}),\n    $g->{CGI}->hidden({-name=>\"confirmation\", -value=>\"true\",-override=>\"1\"}),\n    $g->{CGI}->hidden({-name=>\"name\", -value=>\"$g->{name}\",-override=>\"1\"}),\n    $g->{CGI}->h2({-align=>\"center\"},\n      $g->{CGI}->submit(\"Delete \'$g->{name}\' module\"),\n      $g->{CGI}->button({-value=>\"Cancel\",-onClick=>\"history.go(-2);\"}),\n    ),\n    $g->{CGI}->end_form;\n  }\n  else{\n    msg(\"Module Deletion Confirmed\");\n    my($grp,$scr)=split(/\\_/,lc($g->{name}));\n    msg(\"deleting modules/$grp/$scr\\.pl...\");\n    system(\"rm modules/$grp/$scr\\.pl\");\n    unless(-e \"modules/$grp/$scr\\.pl\"){print \"successful.\";}\n    else{print\"failed.<br />\";}\n    $sth=$g->{dbh}->do(\"delete from interface_modules where name=\\\"$g->{name}\\\"\");\n    $sth=$g->{dbh}->do(\"alter table interface_module_users drop column $g->{name}\");\n    $sth=$g->{dbh}->do(\"delete from interface_module_access where module=\\\"$g->{name}\\\"\");\n    \n    print $g->{CGI}->p(\"The \'<b><em>$g->{name}</em></b>\' module has been deleted from this system.\"),\n    $g->{CGI}->br,\n    $g->{CGI}->p(\"All of the associated database entries relating to this module have been expunged and it will no longer be available.\"),\n    $g->{CGI}->h2({-align=>\"center\"},\n      $g->{CGI}->button({-value=>\"Continue\",-onClick=>\"location.href=\'$g->{scriptname}\'\"}),\n    );        \n  }\n}\n\n\nsub edit{\n  print \"\\n<!-- edit start -->\\n\";\n\n  my($name,$version,$source,$state); my $filepath=$g->{name}.\"\\.pl\"; $filepath=~s/\\_/\\//g;\n  if($g->{function} eq \"\"){\n    $g->{function}=\"update\";\n    print \"<!-- function was not set.  Set function to \'update\' -->\\n\";\n    # initially entering the editor $g->{name} has been passed with the $g->{action} set to \'edit\'\n    # change \'edit\' to \'save\' and then get the latest code from the database and load it into the editor.\n    ($name,$version,$source,$state)=$g->{dbh}->selectrow_array(\"select name,version,source,state from interface_module_source where name=\'$g->{name}\' and state=\'active\'\");\n    print \"here... name: $name version: $version state: $state<br />source: $source<br />\\n\";\n    unless($name eq \"$g->{name}\"){\n      print \"<!-- name ($name) did not match passed name var: \'$g->{name}\' -->\\n\";\n      # there is no database entry for the module chosen.  Create one on the fly for existing modules.\n      $name=\"$g->{name}\"; $version=\"0.0.0001\"; $stamp=$g->{dbh}->selectrow_array(\"select now()\"); $state=\'active\';\n      print $g->{CGI}->p(\"No source was present in database.  I am importing $name from $g->{modulepath}.\"),\"\\n\";\n      if(-e \"$g->{modulepath}\"){\n	print $g->{CGI}->p(\"$g->{modulepath} exist... importing source...\"),\"\\n\";\n        open(IN,\"<$g->{modulepath}\") or die \"I cannot open $name : $!\";\n	while(my $line=<IN>){$source.=$line;} close(IN);\n	  $sth=$g->{dbh}->prepare(\"insert into interface_module_source values(?,?,?,?,\'now()\',\'$g->{username}\')\");\n	  $sth->execute($name,$version,$source,$state) || die $g->{dbh}->errstr;\n	  $g->{function}=\"update\";\n	}\n	else{print $g->{CGI}->p(\"I cannot load the source from the database, and the module source does not exist.\"),\"\\n\"; exit;}\n      }\n    }\n    elsif($g->{function} eq \"update\"){\n      # update the datebase based on the modified form that passed data here.\n      $sth=$g->{dbh}->prepare(\"update interface_module_source set version=?,source=?,state=?,timestamp=\'now()\',modifiedby=\'$g->{username}\' where name=\'$g->{name}\'\");\n      $sth->execute($g->{version},$g->{source},$g->{state});\n      # update actual file to reflect changes\n      my $filepath=$g->{name}.\"\\.pl\"; $filepath=~s/\\_/\\//g;\n      print \"<br />modulepath: $g->{modulepath}<br />\\n\"\n      #open(OUT,\">$g->{modulepath}\") || die \"Cannot open module, $g->{modulepath} for writing :$!\";\n      #print OUT \"$g->{source}\";\n      #close(OUT);\n    }\n    elsif($g->{function} eq \"upload\"){upload();}\n    else{\n      print $g->{CGI}->p(\"The function you have selected does not exist.\"); exit;\n    }\n\n  # set webvars from what we get elsewhere if need be.\n  if($g->{name} eq \"\"){$g->{name}=$name;}\n  if($g->{version} eq \"\"){$g->{version}=$version;}\n  if($g->{source} eq \"\"){$g->{source}=$source;}\n  if($g->{state} eq \"\"){$g->{state}=$state;}\n  if($g->{stamp} eq \"\"){$g->{stamp}=$stamp;}\n  if($g->{published} eq \"\"){$g->{published}=$published;}\n  if($g->{lastmodified} eq \"\"){$g->{lastmodified}=$lastmodified;}\n  if($g->{modifiedby} eq \"\"){$g->{modifiedby}=$modifiedby;}\n\n  # put editor up on screen with the latest data...\n  print $g->{CGI}->start_form({-method=>\"post\",-action=>\"$g->{scriptname}\"}),\n    \"\\n<table comment=\\\"table for module editor\\\">\\n<tr>\\n\",\n    \"<td>\",$g->{CGI}->label({-for=>\"name\"},\"name of module\"),\"<br />\\n\",\n    $g->{CGI}->textfield({-name=>\"name\",-value=>\"$g->{name}\",-size=>\"20\",-override=>\"1\"}),\"</td>\\n\",\n    $g->{CGI}->hidden({-name=>\"action\",-value=>\"$g->{action}\",-override=>\"1\"}),\n    $g->{CGI}->hidden({-name=>\"function\",-value=>\"$g->{function}\",-override=>\"1\"}),\n    \"<td>\",$g->{CGI}->label({-for=>\"version\"},\"module version\"),\"<br />\\n\",\n    $g->{CGI}->textfield({-name=>\"version\",-value=>\"$g->{version}\",-override=>\"1\"}),\"</td>\\n\",\n    \"<td>\",$g->{CGI}->label({-for=>\"state\"},\"state of module\"),\"<br />\\n\",\n    $g->{CGI}->popup_menu({-name=>\"state\",-size=>\"1\",-value=>[\"\",\"active\",\"debug\"],-default=>\"$g->{state}\",-override=>\"1\"}),\"</td>\\n\",\n    # stamp & modifiedby are automatically updated without any interaction...\n    \"<td>\",$g->{CGI}->submit(\"$g->{function}\"),\"</td>\\n</tr>\\n</table>\\n\",\n    $g->{CGI}->textarea({-name=>\"source\",value=>\"$g->{source}\",-rows=>\"20\",-override=>\"1\"}),\n  $g->{CGI}->end_form(),\"\\n\";\n  #print \"\\nfunction: \'$g->{function}\' action: \'$g->{action}\' title: \'$g->{title}\' \\n\";\n\n  #sub upload{\n  #  if($g->{id} eq \"\"){print \"Upload parameters where in an unacceptible format.<hr />\\n\"; return;}\n#	  my $textdata;\n#	  unless(-d \"$docs_upload/$g->{id}\"){system(\"mkdir $docs_upload/$g->{id}\"); print \"\\ncreating $docs_upload/$g->{id} folder...<br />\\n\";}\n#	  my($fn,$ext)=split(/\\./,$g->{uploadfilename}); $ext=lc($ext);\n#	  if($ext=~m/jpg/ or $ext=~m/jpeg/ or $ext=~m/gif/ or $ext=~m/png/){\n#	    system(\"mv $g->{uploaddir}/$g->{uploadfilename} $docs_upload/$g->{id}/$g->{uploadfilename}\");\n #     print \"<b>$g->{uploadfilename}</b> has been uploaded to <b>$docs_upload/$g->{id}/$g->{uploadfilename}</b> directory.<br />\\n\";\n  #    if($g->{type} eq \"text\"){\n   #     print \"prepared text image insertion token.<br />\\n\"; $g->{data}.=\"\\n\\[image\\: \\\"$g->{uploadfilename}\\\" caption: \\\"\\\" location: \\\"\\\" \\]\\n\";\n    #  }\n     # elsif($g->{type} eq \"html\"){\n#        print \"prepared html image insertion token.<br />\\n\"; $g->{data}.=\"\\n<img src=\\\"/docs/$g->{id}/$g->{uploadfilename}\\\" /><br \\/>\\n\";\n#      }\n#      elsif($g->{type} eq \"xml\"){\n#        print \"prepared xml image insertion token.<br />\\n\";\n#        print \"<p> There is currently no XML tag for this upload type </p>\"; $g->{data}.=\"\\n<imagetag><name>$g->{uploadfilename}</name></imagetag>\\n\";\n#      }\n#      print \"inserting image insertion token into database record<br />\\n\";\n#      $sth=$g->{dbh}->prepare(\"update system set data=? where id=$g->{id}\") || die $g->{dbh}->errstr;\n#      $sth->execute($g->{data}) || die $g->{dbh}->errstr;\n#    }\n#    elsif($ext=~m/txt/){ # uploading a txt file into the editor...\n#      print \"inserting text data into database record<br />\\n\";\n#	    open(IN,\"<$g->{uploaddir}/$g->{uploadfilename}\")||die\"cannot open file for reading : $!\";\n#	    while(my $line=<IN>){chomp $line; $textdata.=\"$line\\n\";}\n#	    close(IN);\n#	    $g->{data}.=$textdata;\n#	    system(\"rm $g->{uploaddir}/$g->{uploadfilename}\");\n#      # print \"$g->{data}<br />\\n\";\n#      $sth=$g->{dbh}->prepare(\"update system set data=? where id=$g->{id}\") || die $g->{dbh}->errstr;\n#      $sth->execute($g->{data}) || die $g->{dbh}->errstr;\n#    }\n#    else{\n#	    system(\"rm $g->{uploaddir}/$g->{uploadfilename}\");\n#	    print $g->{CGI}->font({-face=>\"Arial\",-size=>\"4\",-color=>\"red\"},\"You can only upload .jpeg, .gif, .png image and .txt files.\");\n#  } }\n  print \"\\n<!-- edit end -->\\n\";\n}\n\nsub properties{\n  print\n  $g->{CGI}->h3({-align=>\"center\"},\"Editing properties of \\\"$g->{name}\\\" module.\"),\n  $g->{CGI}->start_form({-action=>\"$g->{scriptname}\",-method=>\"post\"}),\n  $g->{CGI}->hidden({-name=>\"action\",-value=>\"update\",-override=>\"1\"}),\n  $g->{CGI}->hidden({-name=>\"oldname\",-value=>\"$g->{name}\"}),\n  $g->{CGI}->start_table({-cols=>\"3\",-cellspacing=>0,-cellpadding=>0,-border=>0,-width=>\"50%\",-align=>\"center\"}),\n  $g->{CGI}->Tr({-bgcolor=>\"#fff9ff\"},\n    $g->{CGI}->td({-align=>\"right\"},\"Module Title&nbsp;&nbsp;\"),\n    $g->{CGI}->td($g->{CGI}->textfield({-name=>\"title\",-value=>\"$g->{title}\",-override=>\"1\"}),),\n  ),\n  $g->{CGI}->Tr({-bgcolor=>\"#fff9ff\"},\n    $g->{CGI}->td({-align=>\"right\"},\"Group_Option_Module&nbsp;&nbsp;\"),\n    $g->{CGI}->td($g->{CGI}->textfield({-name=>\"name\",-value=>\"$g->{name}\",-override=>\"1\"}),),\n  ),\n  $g->{CGI}->Tr({-bgcolor=>\"#fff9ff\"},$g->{CGI}->td(\" \"),$g->{CGI}->td($g->{CGI}->submit(\"Save\"),),),\n  $g->{CGI}->end_form,\n  $g->{CGI}->end_table();\n}\n\nsub new{\n  print\n  $g->{CGI}->p(\"To add a new module to DIFR you must define two things; what application group it belongs to and \",\n        \"the name of the new module.\"\n  ),\n  $g->{CGI}->p(\"<font size=+2>Group:</font> <b><em>interface</em></b> would be the group you would use for a module that would be available to core DIFR administrators while \",\n        \"<b><em>rcs</em></b> would be the name of the group for existing and new <b><em>rcs</em></b> application modules.\",\n  ),\n  $g->{CGI}->p(\"<font size=+2>Module:</font> The name of the module is the actual executable name and does not require any extension {i.e., \'.pl\'}.\",\n        \"The group and name do not contain spaces and are seperated by an underscore character, \'_\'\",\n  ),\n  $g->{CGI}->start_form({-action=>\"$g->{scriptname}\",-method=>\"get\"}),\n  $g->{CGI}->hidden({-name=>\"action\",-value=>\"add\",-override=>\"1\"}),\n  $g->{CGI}->start_table({-cols=>\"3\",-cellspacing=>0,-cellpadding=>0,-border=>0,-width=>\"50%\",-align=>\"center\"}),\n  $g->{CGI}->Tr({-bgcolor=>\"$g->{bgcolor}\"},\n    $g->{CGI}->td({-align=>\"right\"},\"Module Title&nbsp;&nbsp;\"),\n    $g->{CGI}->td($g->{CGI}->textfield({-name=>\"title\",-value=>\"$g->{title}\",-override=>\"1\"}),),\n  ),\n  $g->{CGI}->Tr({-bgcolor=>\"$g->{bgcolor}\"},\n    $g->{CGI}->td({-align=>\"right\"},\"group_module&nbsp;&nbsp;\"),\n    $g->{CGI}->td($g->{CGI}->textfield({-name=>\"name\",-value=>\"$g->{name}\",-override=>\"1\"}),),\n  ),\n  $g->{CGI}->Tr({-bgcolor=>\"$g->{bgcolor}\"},$g->{CGI}->td(\" \"),$g->{CGI}->td($g->{CGI}->submit(\"Save\"),),),\n  $g->{CGI}->end_form,\n  $g->{CGI}->end_table();\n}\n\nsub view{\n  #print \"roles: $g->{my_roles}<br />\";\n  print \n  $g->{CGI}->start_table({-cols=>\"3\",-cellspacing=>0,-cellpadding=>0,-border=>0,-width=>\"80%\",-align=>\"center\"}),\n    $g->{CGI}->Tr({-style=>\"background-color: $g->{bgcolor}\"},\n      $g->{CGI}->th(\"Group_ModuleName\"),\n      $g->{CGI}->th(\"Module Title\"),\n      $g->{CGI}->th(\"Action\"),\n    );\n  #$sth=$g->{dbh}->prepare(\"select name,title from modules where name not regexp \\\"^PowerNet_Dev\\\" order by name\"); $sth->execute();\n  $sth=$g->{dbh}->prepare(\"select name,title from interface_modules order by name\"); $sth->execute();\n  my $bg=$g->{bgcolor};\n  while(my($name,$title)=$sth->fetchrow_array()){\n    if($bg eq $g->{bgcolor}){$bg=\"white\";}elsif($bg eq \"white\"){$bg=$g->{bgcolor};}\n    print \"<tr style=\\\"background-color: $bg\\\">\",\n    $g->{CGI}->td(\"$name\"),$g->{CGI}->td(\"$title\"),\"<td>\";\n    my @roles=split(/\\,/,$g->{my_roles});\n    foreach $role(@roles){\n      print $g->{CGI}->a({-href=>\"$g->{scriptname}?action=$role&name=$name&title=$title\"},\"$role\"),\"&nbsp;\";\n    }  \n    print \"</td></tr>\";\n  }\n  print $g->{CGI}->end_table();\n}\n\nsub tail{\n  #print $g->{CGI}->end_table();\n  #$g->{dbh}->disconnect();\n}\n\nsub connectsql{\n  open(FIL,\"</$g->{sql_powernet}\")|| die\"cannot open $g->{sqlconf} : $!\";\n  my ($d,$u,$p); while(my $line=<FIL>){chomp($line); if($line ne \"\"){($d,$u,$p)=split(/\\,/,$line); next;}}\n  $dbh=DBI->connect(\"DBI:mysql:$d\",\"$u\",\"$p\",{PrintError=>1,RaiseError=>1}) or \n    die\"Can not connect to database: $DBI::errstr\\n\";\n}\n\nsub skeleton{\n  my($grp,$opt,$scr)=@_;\n  print \"in skeleton...<br />\";\n  system(\"webp\");\n  if(-e \"$mod/$grp/$opt/$scr.pl\"){}\n  if(open(NEW,\">>modules/$grp/$opt/$scr.pl\")){\n    print NEW \"#!/usr/bin/perl\\n\";\n    print NEW \"# Interface Module Skeleton\\n\";\n    print NEW \"# This is an automatically generated skeleton module for Interface -BCIV\\n\\n\";\n    print NEW \"use DBI; my \\$dbh; my \\$sth; my \\$rv; # This is for database connectivity\\n\\n\";\n    print NEW \"use CGI; my \\$g->{CGI}=new CGI;              # This is for writting object oriented modules\\n\\n\";\n    print NEW \"my \\%v=\\@ARGV;                        # This is how http vars are passed a to module\\n\";\n    print NEW \"                                      #(as arguments into a hash).\\n\\n\";\n    print NEW \"# i.e., if you have a post/get variable called fred it will be seen as \\$v{fred} to\\n\";\n    print NEW \"# the module.\\n\\n\";\n    print NEW \"my \\$script_title=\\\"$v{title}\\\";\\n\\n\";\n    print NEW \"head();\\nbody();\\ntail();\\n\\n\";\n    print NEW \"sub body{\\n\";\n    print NEW \"  # this is the function that decides what the module is supposed to do when it is called\\n\";\n    print NEW \"  # what it does is determined by the \\$v{action} variable which is set through forms like\\n\";\n    print NEW \"  # the one called view shown below...\\n\";\n    print NEW \"  if(defined(\\$g->{action})){\\n\";\n    print NEW \"    if(\\$g->{action} eq \\\"someaction\\\"){\\n\";\n    print NEW \"      # an action is typically database modification routines or a call to a function\\n\";\n    print NEW \"      # view();\\n\";\n    print NEW \"      print \\$g->{CGI}->h2({-align=>\\\"center\\\",-bgcolor=>\\\"#dddddd\\\"},\\\"\\message: \\$g->{popup}\\\"),\\n\";\n    print NEW \"    }\\n\";\n    print NEW \"    else{print\\\"the action you have chosen doesn\\\'t exist<br />\\\";}\\n\";\n    print NEW \"  }else{view();}\\n\";\n    print NEW \"}\\n\\n\";\n    print NEW \"sub view{\\n\";\n    print NEW \"  print \\$g->{CGI}->start_table({-cols=>\\\"1\\\",-border=>\\\"0\\\",-width=>\\\"100%\\\",-align=>\\\"center\\\",-cellspacing=>\\\"0\\\"}),\\n\";\n    print NEW \"  \\$g->{CGI}->Tr(\\$g->{CGI}->td(\\n\";\n    print NEW \"    \\$g->{CGI}->start_form({-action=>\\\"\\$g->{scriptname}\\\",-method=>\\\"POST\\\"}),\\n\";\n    print NEW \"    \\$g->{CGI}->hidden({-name=>\\\"sid\\\",-value=>\\\"\\$g->{sid}\\\",-override=>\\\"1\\\"}),\\n\";\n    print NEW \"    \\$g->{CGI}->hidden({-name=>\\\"action\\\",-value=>\\\"someaction\\\",-override=>\\\"1\\\"}),\\n\";\n    print NEW \"    \\$g->{CGI}->textfield({-name=>\\\"example\\\",-value=>\\\"\\$g->{example}\\\",-override=>\\\"1\\\"}),\\n\";\n    print NEW \"    \\$g->{CGI}->popup_menu({-name=>\\\"popup\\\",-value=>[\\\"click me\\\",\\\"whoopie!\\\"],-default=>\\\"\\$g->{popup}\\\",-size=>\\\"10\\\",-override=>\\\"1\\\"}),\\n\";\n    print NEW \"    \\$g->{CGI}->submit(\\\"button text\\\"),\\n\";\n    print NEW \"    \\$g->{CGI}->end_form(),\\n\";\n    print NEW \"  ),),\\n\";\n    print NEW \"  \\$g->{CGI}->end_table(),\\n\";\n    print NEW \"  \\$g->{CGI}->hr(\\\"This is a skeleton module automatically generated by Interface.\\\");\\n\";\n    print NEW \"}\\n\\n\";\n    print NEW \"sub head{\\n\";\n    print NEW \"  # \\$dbh=DBI->connect(\\\"DBI:mysql:database\\\",\\\"user\\\",\\\"password\\\",{PrintError=>1,RaiseError=>1}) or\\n\";\n    print NEW \"  #   die \\\"Cannot connect to database : \\$DBI::errstr\\\";\\n\";\n    print NEW \"  print \\\"&nbsp;&#149;&nbsp;\\\",\\n\";\n    print NEW \"  \\$g->{CGI}->a({-href=>\\\"\\$g->{scriptname}?sid=\\$g->{sid}&action=YourAction\\\"},\\\"Add a new thingy\\\");\\n\";\n    print NEW \"  unless(\\$g->{action} eq \\\"\\\"){\\n\";\n    print NEW \"    print \\\"&nbsp;&#149;&nbsp;\\\",\\n\";\n    print NEW \"    \\$g->{CGI}->a({-href=>\\\"\\$g->{scriptname}?sid=\\$g->{sid}\\\"},\\\"Back\\\");\\n\";\n    print NEW \"  }\\n\";\n    print NEW \"  print \\$g->{CGI}->h1({-align=>\\\"center\\\"},\\\"\\$script_title\\\");\\n\";\n    print NEW \"}\\n\\n\";\n    print NEW \"sub tail{\\n  print \\$g->{CGI}->end_table();\\n  #\\$g->{dbh}->disconnect(); # This will close your database session\\n}\\n\\n\";\n    print NEW \"sub connectsql{\\n\";\n    print NEW \"  open(FIL,\\\"</\\$g->{sql_jahvastat}\\\")|| die\\\"cannot open \\$g->{sql_jahvastat} : \\$!\\\";\\n\";\n  	print NEW \"  my (\\$d,\\$u,\\$p); while(my \\$line=<FIL>){chomp(\\$line); if(\\$line ne \\\"\\\"){(\\$d,\\$u,\\$p)=split(/\\,/,\\$line); next;}}\\n\";\n    print NEW \"  \\$dbh=DBI->connect(\\\"DBI:mysql:\\$d\\\",\\\"\\$u\\\",\\\"\\$p\\\",\\n\";\n    print NEW \"      {PrintError=>1,RaiseError=>1}) or die\\\"Can not connect to database: \\$DBI::errstr\\n\\\";\\n\";\n    print NEW \"}\\n\\n\";\n\n    close(NEW);\n    system(\"webp\"); # fix permissions on script\n    print \"finished creating script\\n<br />\";\n  }else{print\"could not open : modules/$grp/$opt/$scr for writing : $!<br />\";}\n}\n\nsub msg{ my ($msg)=@_; print $g->{CGI}->h2({-align=>\"center\"},\"$msg\");}\n','active','0000-00-00 00:00:00',''),('rcs_alerts','0.0.02','#!/usr/bin/perl\r\n\r\nprint $g->{CGI}->div({-id=>\"submenu\"},\"&nbsp\"),\r\n$g->{CGI}->div({-id=>\"navlinks\"},\"&nbsp;\"),\r\n$g->{CGI}->div({-id=>\"title\"},$g->{CGI}->h3(\"Alerts\")),\r\n$g->{CGI}->div({-id=>\"subtitle\"},\"&nbsp;\");\r\nprint qq(<div id=\'main\'>\\n);\r\n\r\nmy $query_fields=\"id,uid,type,payload,automatic,sent,confirmed,status\";\r\nmy $alerts_table=\"rcs_alerts\";\r\n\r\n$sth=$g->{dbh}->prepare(\"select $query_fields from $alerts_table\"); $sth->execute();\r\nmy $check=0;\r\nprint $g->{CGI}->start_table(),\r\n    $g->{CGI}->Tr(\r\n    $g->{CGI}->th({},\"ID\"),\r\n    $g->{CGI}->th({},\"UID\"),\r\n    $g->{CGI}->th({},\"Type\"),\r\n    $g->{CGI}->th({},\"Payload\"),\r\n    $g->{CGI}->th({},\"Automatic\"),\r\n    $g->{CGI}->th({},\"Sent\"),\r\n    $g->{CGI}->th({},\"Confirmed\"),\r\n    $g->{CGI}->th({},\"Status\"),\r\n  );\r\n\r\nwhile(my($id,$uid,$type,$payload,$automatic,$sent,$confirmed,$status)=$sth->fetchrow_array()){\r\n  print $g->{CGI}->Tr(\r\n    $g->{CGI}->td({},\"$id\"),\r\n    $g->{CGI}->td({},\"$uid\"),\r\n    $g->{CGI}->td({},\"$type\"),\r\n    $g->{CGI}->td({},\"$payload\"),\r\n    $g->{CGI}->td({},\"$automatic\"),\r\n    $g->{CGI}->td({},\"$sent\"),\r\n    $g->{CGI}->td({},\"$confirmed\"),\r\n    $g->{CGI}->td({},\"$status\"),\r\n  );\r\n  $check=1;\r\n}\r\nif($check eq 0){\r\n  print $g->{CGI}->Tr($g->{CGI}->td({-colspan=>\"8\"},$g->{CGI}->h2(\"There are no alerts in the system at this time.\")));\r\n}\r\nprint $g->{CGI}->end_table();\r\n\r\nprint qq(\\n</div> <!-- end main -->\\n);\r\n\r\n1; # end of module\r\n\r\n\r\n\r\nsub send_email{\r\n  # code to send message\r\n  # $g->event();\r\n}\r\n','active','2010-11-21 23:33:17','dev'),('charity_default','0.0.01','#!/usr/bin/perl\n\nprint qq(<h3>default</h3>\\n);','active','0000-00-00 00:00:00',''),('charity_sponsor','0.0.02','#!/usr/bin/perl\r\n\r\nprint qq(<h3>sponsor</h3>\\n);','active','2015-08-30 20:34:59','bciv');
/*!40000 ALTER TABLE `interface_module_source` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `interface_module_users`
--

DROP TABLE IF EXISTS `interface_module_users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `interface_module_users` (
  `username` varchar(30) NOT NULL,
  `interface_alerts` varchar(50) DEFAULT NULL,
  `interface_modules` varchar(50) DEFAULT NULL,
  `interface_users` varchar(50) DEFAULT NULL,
  `interface_sessions` varchar(50) DEFAULT NULL,
  `interface_alpha` varchar(50) DEFAULT NULL,
  `interface_settings` varchar(50) DEFAULT NULL,
  `interface_preferences` varchar(50) DEFAULT NULL,
  `interface_tasks` varchar(50) DEFAULT NULL,
  `customer_licenses` varchar(50) NOT NULL DEFAULT 'false',
  `sales_leads` varchar(50) DEFAULT NULL,
  `sales_tracking` varchar(50) DEFAULT NULL,
  `charity_events` varchar(50) DEFAULT NULL,
  `charity_sponsor` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`username`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `interface_module_users`
--

LOCK TABLES `interface_module_users` WRITE;
/*!40000 ALTER TABLE `interface_module_users` DISABLE KEYS */;
INSERT INTO `interface_module_users` VALUES ('dev','true','true','true','true','true','true','true','true','true',NULL,NULL,NULL,NULL),('bciv','true','true','true','true','true','true','true','true','true','true','true','true','true');
/*!40000 ALTER TABLE `interface_module_users` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `interface_modules`
--

DROP TABLE IF EXISTS `interface_modules`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `interface_modules` (
  `name` varchar(100) NOT NULL DEFAULT '',
  `title` varchar(100) NOT NULL DEFAULT '',
  `roles` varchar(255) DEFAULT NULL,
  `groups` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`name`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `interface_modules`
--

LOCK TABLES `interface_modules` WRITE;
/*!40000 ALTER TABLE `interface_modules` DISABLE KEYS */;
INSERT INTO `interface_modules` VALUES ('interface_sessions','Sessions',NULL,NULL),('interface_modules','Modules','add,edit,assign,properties,roles,groups,delete',NULL),('interface_users','Users','delete','dev,rcs'),('interface_preferences','Preferences',NULL,NULL),('interface_alpha','Alpha',NULL,NULL),('interface_settings','Settings',NULL,NULL),('interface_alerts','Alerts','',NULL),('interface_tasks','Tasks',NULL,NULL),('customer_licenses','Licenses',NULL,NULL),('sales_leads','Leads','edit,delete',NULL),('sales_tracking','Tracking','edit,delete,feedback',NULL),('charity_events','Events','add,edit,view,register,venue,events,tickets,participants,delete,sponsors,players',NULL),('charity_sponsor','Sponsor',NULL,NULL);
/*!40000 ALTER TABLE `interface_modules` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `interface_services`
--

DROP TABLE IF EXISTS `interface_services`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `interface_services` (
  `code` varchar(10) NOT NULL DEFAULT '',
  `shortName` varchar(10) NOT NULL DEFAULT '',
  `serviceName` varchar(60) NOT NULL DEFAULT '',
  `serviceChief` varchar(100) NOT NULL DEFAULT '',
  UNIQUE KEY `code` (`code`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1 COMMENT='List of Services and their Chiefs';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `interface_services`
--

LOCK TABLES `interface_services` WRITE;
/*!40000 ALTER TABLE `interface_services` DISABLE KEYS */;
INSERT INTO `interface_services` VALUES ('research','Tampa','Research','Dr. Robert Farese');
/*!40000 ALTER TABLE `interface_services` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `interface_sessions`
--

DROP TABLE IF EXISTS `interface_sessions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `interface_sessions` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `username` varchar(30) NOT NULL DEFAULT '',
  `hostname` varchar(50) DEFAULT NULL,
  `key` varchar(50) DEFAULT NULL,
  `ip` varchar(15) DEFAULT NULL,
  `vars` text NOT NULL,
  `begin` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `expire` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `interface_sessions`
--

LOCK TABLES `interface_sessions` WRITE;
/*!40000 ALTER TABLE `interface_sessions` DISABLE KEYS */;
INSERT INTO `interface_sessions` VALUES (1,'admin','sys_status','227bfc9c99c4aad6b4d817bd662c17ff','127.0.0.1','sys_mod interface_sessions','2015-09-11 15:30:05','2015-09-11 18:33:23');
/*!40000 ALTER TABLE `interface_sessions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `interface_user_demographics`
--

DROP TABLE IF EXISTS `interface_user_demographics`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `interface_user_demographics` (
  `username` varchar(30) NOT NULL DEFAULT '',
  `salutation` varchar(12) DEFAULT NULL,
  `firstname` varchar(40) NOT NULL,
  `middle` char(1) DEFAULT NULL,
  `lastname` varchar(100) NOT NULL,
  `suffix` varchar(7) DEFAULT NULL,
  `jobtitle` varchar(50) DEFAULT NULL,
  `company` varchar(30) DEFAULT NULL,
  `department` varchar(200) DEFAULT NULL,
  `phone` varchar(20) DEFAULT NULL,
  `addressline1` varchar(200) DEFAULT NULL,
  `addressline2` varchar(200) DEFAULT NULL,
  `city` varchar(200) DEFAULT NULL,
  `stateprovince` varchar(200) DEFAULT NULL,
  `postalcode` varchar(50) DEFAULT NULL,
  `country` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`username`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `interface_user_demographics`
--

LOCK TABLES `interface_user_demographics` WRITE;
/*!40000 ALTER TABLE `interface_user_demographics` DISABLE KEYS */;
INSERT INTO `interface_user_demographics` VALUES ('dev',' ','System','','Administrator',' ','Builtin Administrator Account','EtherFeat','Automation','8888736050','24348 Summer Wind Ct','','Lutz','FL','33559','UNITED STATES - US'),('bciv','Mr.','Will','M','Collins','IV','President/CEO','EtherFeat LLC','Development','8134284725','10148 Montague Street','','Westchase','FL','33626','UNITED STATES - US'),('admin',' ','Default','','Administrator',' ','Administrator','Example Corporation','None','0000000000','123 Fake Street','','Nowhere','NM','00000','UNITED STATES - US');
/*!40000 ALTER TABLE `interface_user_demographics` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `interface_users`
--

DROP TABLE IF EXISTS `interface_users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `interface_users` (
  `username` varchar(30) NOT NULL DEFAULT '',
  `active` varchar(10) DEFAULT NULL,
  `email` varchar(100) DEFAULT NULL,
  `theme` varchar(30) DEFAULT NULL,
  `timeout` int(3) NOT NULL DEFAULT '15',
  `password` varchar(60) DEFAULT NULL,
  PRIMARY KEY (`username`),
  KEY `lname` (`username`,`active`,`email`,`theme`,`timeout`,`password`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `interface_users`
--

LOCK TABLES `interface_users` WRITE;
/*!40000 ALTER TABLE `interface_users` DISABLE KEYS */;
INSERT INTO `interface_users` VALUES ('admin','true','admin@example.com','default',9600,'6cd152c73499e11cb8fc82019153c565'),('bciv','true','will@etherfeat.com','bootstrap',3600,'5f00188a0221e7844577794aa4d5a09e'),('dev','true','infrastructure@etherfeat.com','portal',180,'466d0dc6c1cdc607ddec9587e30b97c3');
/*!40000 ALTER TABLE `interface_users` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sales_leads`
--

DROP TABLE IF EXISTS `sales_leads`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sales_leads` (
  `uid` bigint(20) NOT NULL AUTO_INCREMENT,
  `alias` varchar(20) DEFAULT NULL,
  `lastname` varchar(40) NOT NULL DEFAULT '',
  `firstname` varchar(30) NOT NULL DEFAULT '',
  `middle` varchar(15) DEFAULT NULL,
  `suffix` varchar(5) DEFAULT NULL,
  `degree` varchar(20) DEFAULT NULL,
  `jobtitle` varchar(30) DEFAULT NULL,
  `company` varchar(100) DEFAULT NULL,
  `addressline1` varchar(255) DEFAULT NULL,
  `addressline2` varchar(255) DEFAULT NULL,
  `city` varchar(100) DEFAULT NULL,
  `stateprovince` varchar(80) DEFAULT NULL,
  `postalcode` varchar(10) DEFAULT NULL,
  `country` varchar(100) DEFAULT 'US',
  `language` varchar(100) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL,
  `homephone` varchar(15) DEFAULT NULL,
  `facilityid` int(11) DEFAULT '6',
  `mailcode` varchar(25) DEFAULT NULL,
  `workphone` varchar(15) DEFAULT NULL,
  `workext` varchar(8) DEFAULT NULL,
  `cellphone` varchar(15) DEFAULT NULL,
  `fax` varchar(15) DEFAULT NULL,
  `email` varchar(100) DEFAULT NULL,
  `status` varchar(20) DEFAULT NULL,
  `comment` text,
  PRIMARY KEY (`uid`),
  KEY `lastname` (`lastname`),
  KEY `firstname` (`firstname`),
  KEY `middle` (`middle`),
  KEY `suffix` (`suffix`),
  KEY `degree` (`degree`),
  KEY `jobtitle` (`jobtitle`),
  KEY `status` (`status`)
) ENGINE=MyISAM AUTO_INCREMENT=42 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sales_leads`
--

LOCK TABLES `sales_leads` WRITE;
/*!40000 ALTER TABLE `sales_leads` DISABLE KEYS */;
INSERT INTO `sales_leads` VALUES (25,NULL,'Fite','Bill',NULL,NULL,NULL,'Research Officer','Orlando VAMC Research','Orlando VAMC - Research Department','5201 Raymond Street','Orlando','FL','32802','US','English',NULL,675,'','3213976663',NULL,'3214415890',NULL,'william.fite@va.gov','','he doesn\'t realize t'),(8,'','Traub','Robert','','','','','University of Central Florida','4000 Central FL Blvd','','Orlando','Fl','32816-2500','UNITED STATES - US','English','',0,'','407 823-2497','','','','rob.traub@ucf.edu','',''),(3,'','Philipe','Bruce','','','','IT manager','Raymon james Financial','','','','','','UNITED STATES - US','English','',0,'','727-567-4068','','','','','',''),(4,'Pat','Gall','Patrick ','','','','IT manager ','USF physicans Group','2122 s. dale mabry hwy','','tampa','fl','33629','UNITED STATES - US','English','',0,'','813','','','','','',''),(6,'','Guadalupe','Erik','','','','','City of Cocoa','','','Cocoa','FL','','UNITED STATES - US','English','',0,'','3214338558','','','','eduadalupe@cocoafl.org','','non&nbsp;responder'),(9,'','Schumm','Randall','','','','Storage Governance Technical S','Walt Disney Company','5601 Center Drive','','Lake Buena Vista','Fl','32830','UNITED STATES - US','English','',0,'','407-828-6584','','','','randall.r.schumm@disney.com','',''),(10,'','Schnoke','Mike','','','','Systems Engineer','QinetiQ North America','ESC-44','','Kennedy space center','Fl','32899','UNITED STATES - US','English','',0,'','321-867-3007','','','','michael.r.schnoke@nasa.gov','',''),(11,'','Rosales','Armando ','','','','Sr. Server Engineer','Assurant Solutions','11222 Quail Roost Drive','','Miami','FL ','33157','UNITED STATES - US','English','',0,'','3052527035 x 33','','','','armando.rosales@assurant.com','',''),(12,'','akers','Jon','','','','System engineer','university of Florida hoc building','b1000 new physics building','','gainesville','Fl','32611','UNITED KINGDOM - GB','English','',0,'','3528461776','','','','jka@hoc.ufl.edu','','Jon&nbsp;Akers&nbsp;'),(13,'','Nestor','Mike','','','','VP Technology','ADM','1111 park center blvd.','','Miami','FL ','33169','UNITED STATES - US','English','',0,'','305-321-3435','','','','mikenestor@live.com','',''),(14,'','Mulcahy','Phil ','','','','Sr. Info Systems Technologist','Pinellas County Govt. /BTS','400 S. Ft. Harrison','','Clearwater ',' FL ','34688','UNITED STATES - US','English','',0,'','727-464-4057','','','','pmulcahy@co.pinellas.fl.us','',''),(15,'','Madathil','Suresh','','','','DBA','Citigroup','14000 Citicards way','','Jacksonville','FL','32258','UNITED KINGDOM - GB','English','',0,'','9049547924','','','','suresh.madathil@citi.com','',''),(16,'','Hossain','Omar','','','','Director','Houghton Mifflin Harcourt','3846 Brookmyra Dr','','Orlando','Fl','32837','UNITED STATES - US','English','',0,'','407-345-3636','','','','omarh@bellsouth.net','',''),(18,'','De la cruz','Alfredo','','','','Director of Technology','METI','6300 Edgelake Dr','','Sarasota','Fl','34240','UNITED STATES - US','English','',0,'','941-377-5562','2752','','','adelacruz@meti.com','',''),(20,'','Awad','Chris','','','','Director of IT','Image One','6206 Benjamin Rd','','Tampa','Fl','33634','UNITED STATES - US','English','',0,'','813-888-8288','','','','Chrisa@image-1.com','','Very&nbsp;enthuastic'),(21,'','Ackers','Jon ','','','','Systems Engineer','University of Florida HPC Center','B100 new physics building','','gainesville','fl','32611','UNITED STATES - US','English','',0,'','352-846-1776','','','','jka@hpc.ufl.edu','',''),(22,'','Granger','Garrett','','','','CIO','Risk Transfer Holding','219 East Livingston Street','','Orlando','Fl','32801','UNITED STATES - US','English','',0,'','321-281-0765','','','','ggrainer@risktransfercorp.com','',''),(24,'','Berube','Todd','','','','System-storage Engineer','City of Orlando','400 south orange ave','','Orlando','Fl','32801','UNITED STATES - US','English','',0,'','407-246-2864','','','','todd.berube@cityoforlando.net','','Duche'),(27,'','Kirk','James','T','','Masters of Space','Starfleet Captain','Starfleet Command','000002030101020004000f0040s0a','','Chicago','IL','23412','UNITED STATES - US','English','',0,'','9991231234','','','','james.kirk@starfleet.gov','','This&nbsp;is&nbsp;a&nbsp;test.'),(29,NULL,'B','Paul',NULL,NULL,NULL,NULL,'MicroD',NULL,NULL,NULL,NULL,NULL,'US','english',NULL,6,NULL,'7279923871',NULL,NULL,NULL,'pauld@microd.com','95','Handles DR. Gonzales MD PA\'s Office tech needs and a few others Good source for referrals'),(30,'Deb','Idontknow','Debbie','','','','Office Manager','Family Medical Center','10806 US hwy 19','Ste. 102A','Port Richey','Fl','34668','UNITED STATES - US','English','',0,'','7278617043','','','','','',''),(31,'Fat Ass','Cartman','Eric','','','None','None','Eric\'s Most Awesomest Company','','','','','','UNITED KINGDOM - GB','English',NULL,0,'','','','','','',NULL,''),(32,'','','Ellen','','','','IT Director','North Pinellas Children\'s Medical Center','10537 SR 54','','','','','UNITED STATES - US','English',NULL,0,'','7273768404','','','','',NULL,'Using Tape system with their successEHC software oracle based can run on NSF share'),(33,'','Smiley','Guy','','','broadcasting','announcer','Sesame Street','205 Sesame Street','','New York City','NY','66605','UNITED STATES - US','English','',0,'','828382838','','83829382873','','guy.smiley@sesamestreet.com','',''),(34,'','Cromer','Carol','','','','','Tampa Clinical Research','4290 W. Linebaugh Ave','unit B','tampa','fl','','UNITED STATES - US','English','',0,'','813-960-7070','','','','Ccromer@tampaclinicalresearch.com','',''),(35,'','Vasden','Kay','','','','Director of Research','Tampa Medical Group','4700 North Habana Ave, ','#201','Tampa','Fl','','UNITED STATES - US','English','',0,'','813-879-5485','','','','','',''),(36,'','','Carletta','','','','Manager','Stedman Clinical Trials','3212 Cove Bend Dr.','','Tampa','Fl','','UNITED STATES - US','English','',0,'','813-971-8311','','','','Marystedman@stedmanslinicaltrials.com','',''),(37,'','Collins','C','','','','CEO','Meridien Research','501 S. Blvd','','Tampa','Fl','','UNITED STATES - US','English','',0,'','727-347-8839','','813-877-8839','','Ccollins@meridienresearch.net','',''),(38,'','Cooper','Jennifer','','','','Research Manager','Tampa General Hospital, Office of Clinical Trials','5 Tampa General Cir #470','','Tampa','Fl','','UNITED STATES - US','English','',0,'','813-844-7989','','','','Jcooper@tgh.org','',''),(39,'','Keskiner','Barbra','','','','','Clinical Research of West Florida','5115 N. Armernia Ave.','','Tampa','Fl','','UNITED STATES - US','English','',0,'','813-870-1292','122','','','bkeskiner@crwf.com','',''),(40,'','Orr','Heather ','','','BA in health science','Clinical Research Manager','Insignia Clinical Research','3268 Cove Bend Dr.','','Tampa','Fl','','UNITED STATES - US','English','',0,'','813-739-1174','','','','Heathero@womenscarefl.com','',''),(41,'','Ardila','Jill','','','','','Byrd Alzheimer\'s Institute','4001 E. Fletcher Ave.','','Tampa','Fl','','UNITED STATES - US','English',NULL,0,'','813-974-1294','','','','',NULL,'');
/*!40000 ALTER TABLE `sales_leads` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sales_tracking`
--

DROP TABLE IF EXISTS `sales_tracking`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sales_tracking` (
  `tid` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `uid` bigint(20) NOT NULL,
  `contact` varchar(50) NOT NULL,
  `reference` varchar(100) NOT NULL,
  `comment` text NOT NULL,
  `timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `mood` int(3) NOT NULL,
  PRIMARY KEY (`tid`)
) ENGINE=MyISAM AUTO_INCREMENT=29 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sales_tracking`
--

LOCK TABLES `sales_tracking` WRITE;
/*!40000 ALTER TABLE `sales_tracking` DISABLE KEYS */;
INSERT INTO `sales_tracking` VALUES (1,6,'Phone','Nimble Storage','Left voicemail and also called on 2 other occasions.  This guy is either laid-off or uninterested...','2011-10-05 11:14:46',1),(2,7,'Phone','DIFR :: General Sales','Contacted Yoda. Talked about ReviewClient compatible with R2D2 droid models.','2011-10-10 21:52:25',100),(3,20,'In Person','Nimble Storage','Company has three locations tampa orlando and boston\r\nmay put nimble into orlando and tampa and bridge the two together then eventually span to boston.','2011-10-13 16:20:00',85),(4,21,'In Person','Nimble Storage','Running a linux system older and needs to update','2011-10-13 16:23:05',82),(5,22,'In Person','Nimble Storage','Group takes care of disability insurance cases. Currently in 3 homes in downtown orlando. Looking to expand into new data center soon','2011-10-13 16:26:39',80),(6,22,'Phone','Nimble Storage','Talked with him on 10-18 he is slightly interested is reviewing material that he got at convention. Will follow-up in a few days and go over more info about his new data center.','2011-10-19 15:00:14',86),(7,13,'In Person','Nimble Storage','Spoke with him in orlando about storage solutions. Me and chris tag teamed him. He is intrested he invited us down to Miami.','2011-10-19 15:11:15',100),(8,13,'Phone','Nimble Storage','In meeting left message','2011-10-19 15:11:51',50),(9,20,'Phone','Nimble Storage','Called to touch base and had to leave a message he wasn\'t in his office','2011-10-19 15:17:13',100),(10,14,'Phone','Nimble Storage','Spoke to him on the phone. His storage needs are currently set he isn\'t looking for any changes at the time. ','2011-10-19 15:21:14',15),(11,6,'Phone','Nimble Storage','Called no answer','2011-10-19 16:36:33',1),(12,22,'Phone','Nimble Storage','Called and left message','2011-11-10 14:34:02',1),(13,0,'Phone','Nimble Storage','Works as an IT guy for a few clients. Is a good spot for referrals. \r\nWill possibly want info for a scenario involving 300gb that is backed up and taken off site nightly. ','2011-11-10 14:41:01',95),(14,29,'Phone','Nimble Storage','Handles a few different clients and is a good referral source ','2011-11-10 14:58:55',95),(15,29,'Email','Nimble Storage','Sent email with link to partners page and should hear back from him in a few days if not will call monday.','2011-11-10 14:59:49',95),(16,30,'Phone','Nimble Storage','They have two offices main is in port richey the second is in trinity. \r\nSpoke with Debbie and she is going to be getting information to the doctor and he will go over it and get back with us. I was going to go by the office on thursday but I will reach out and make an actual appointment where we can sit down and talk about the storage device. ','2011-11-10 15:06:05',83),(17,0,'Phone','Nimble Storage','Easy to talk to on phone.\r\nRunning successEHS software said it requires a Tape back up\r\nL204 tape in place Oracle based. Talked to successEHS and they said that their software will support NSF Share. ','2011-11-10 15:12:01',15),(18,33,'Email','DIFR :: General Sales','Dude says that he is tired of using paper to keep track of where his microphones are.','2011-11-16 23:37:28',100),(19,33,'In Person','DIFR :: General Sales','Gave demonstration of DIFR with the asset module.  He says he will have funding next quarter to purchase DIFR and he also will need a server with RAID-5 at approximately 5TB of storage','2011-11-16 23:38:51',100),(20,34,'Phone','DIFR :: General Sales','Called and left message','2012-02-16 19:12:20',100),(21,35,'Phone','DIFR :: General Sales','Talked to Lynn the Clinical Research Manager she informed me that each researcher/ investigator/ nurse tracks their own personal information. She referred me to Kay Vasden','2012-02-16 19:21:30',100),(22,35,'Phone','DIFR :: General Sales','Left message for Kay Vasden','2012-02-16 19:21:55',100),(23,36,'Phone','DIFR :: General Sales','Talked to Carletta about DIFR for their records she is going to talk to Dr. Stedman about it check back in a few days.  ','2012-02-16 19:26:32',100),(24,37,'Email','DIFR :: General Sales','Spoke to staff at tampa location they have 4 other locations with one physician per location. CEO approves everything and to send her an email with information. ','2012-02-16 19:30:53',100),(25,38,'Phone','DIFR :: General Sales','Currently on a sharepoint system, just added a new EMR system doesn\'t have funds available for DIFR and doesn\'t think IT would be for the new system. ','2012-02-16 19:33:57',100),(26,39,'Phone','DIFR :: General Sales','Called and spoke to a researcher she then told me I need to talk to Barbra who is in the Regulations Department. Called back and left message','2012-02-16 19:37:58',100),(27,40,'Phone','DIFR :: General Sales','Left message','2012-02-16 19:41:03',100),(28,41,'Phone','DIFR :: General Sales','Left message','2012-02-16 19:43:54',100);
/*!40000 ALTER TABLE `sales_tracking` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2015-09-11 15:39:05
